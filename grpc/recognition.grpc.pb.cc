// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: recognition.proto

#include "recognition.pb.h"
#include "recognition.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace cniface {

static const char* RecognitionService_method_names[] = {
  "/cniface.RecognitionService/extractFeature",
  "/cniface.RecognitionService/similarity",
};

std::unique_ptr< RecognitionService::Stub> RecognitionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RecognitionService::Stub> stub(new RecognitionService::Stub(channel, options));
  return stub;
}

RecognitionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_extractFeature_(RecognitionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_similarity_(RecognitionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RecognitionService::Stub::extractFeature(::grpc::ClientContext* context, const ::cniface::ExtractFeatureRequest& request, ::cniface::ExtractFeatureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cniface::ExtractFeatureRequest, ::cniface::ExtractFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_extractFeature_, context, request, response);
}

void RecognitionService::Stub::async::extractFeature(::grpc::ClientContext* context, const ::cniface::ExtractFeatureRequest* request, ::cniface::ExtractFeatureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cniface::ExtractFeatureRequest, ::cniface::ExtractFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_extractFeature_, context, request, response, std::move(f));
}

void RecognitionService::Stub::async::extractFeature(::grpc::ClientContext* context, const ::cniface::ExtractFeatureRequest* request, ::cniface::ExtractFeatureResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_extractFeature_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cniface::ExtractFeatureResponse>* RecognitionService::Stub::PrepareAsyncextractFeatureRaw(::grpc::ClientContext* context, const ::cniface::ExtractFeatureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cniface::ExtractFeatureResponse, ::cniface::ExtractFeatureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_extractFeature_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cniface::ExtractFeatureResponse>* RecognitionService::Stub::AsyncextractFeatureRaw(::grpc::ClientContext* context, const ::cniface::ExtractFeatureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncextractFeatureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RecognitionService::Stub::similarity(::grpc::ClientContext* context, const ::cniface::SimilarityRequest& request, ::cniface::SimilarityeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cniface::SimilarityRequest, ::cniface::SimilarityeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_similarity_, context, request, response);
}

void RecognitionService::Stub::async::similarity(::grpc::ClientContext* context, const ::cniface::SimilarityRequest* request, ::cniface::SimilarityeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cniface::SimilarityRequest, ::cniface::SimilarityeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_similarity_, context, request, response, std::move(f));
}

void RecognitionService::Stub::async::similarity(::grpc::ClientContext* context, const ::cniface::SimilarityRequest* request, ::cniface::SimilarityeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_similarity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cniface::SimilarityeResponse>* RecognitionService::Stub::PrepareAsyncsimilarityRaw(::grpc::ClientContext* context, const ::cniface::SimilarityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cniface::SimilarityeResponse, ::cniface::SimilarityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_similarity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cniface::SimilarityeResponse>* RecognitionService::Stub::AsyncsimilarityRaw(::grpc::ClientContext* context, const ::cniface::SimilarityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsimilarityRaw(context, request, cq);
  result->StartCall();
  return result;
}

RecognitionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RecognitionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RecognitionService::Service, ::cniface::ExtractFeatureRequest, ::cniface::ExtractFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RecognitionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cniface::ExtractFeatureRequest* req,
             ::cniface::ExtractFeatureResponse* resp) {
               return service->extractFeature(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RecognitionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RecognitionService::Service, ::cniface::SimilarityRequest, ::cniface::SimilarityeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RecognitionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cniface::SimilarityRequest* req,
             ::cniface::SimilarityeResponse* resp) {
               return service->similarity(ctx, req, resp);
             }, this)));
}

RecognitionService::Service::~Service() {
}

::grpc::Status RecognitionService::Service::extractFeature(::grpc::ServerContext* context, const ::cniface::ExtractFeatureRequest* request, ::cniface::ExtractFeatureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RecognitionService::Service::similarity(::grpc::ServerContext* context, const ::cniface::SimilarityRequest* request, ::cniface::SimilarityeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cniface

