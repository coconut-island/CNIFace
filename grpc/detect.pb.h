// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: detect.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_detect_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_detect_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_detect_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_detect_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_detect_2eproto;
namespace cniface {
class DetectRequest;
struct DetectRequestDefaultTypeInternal;
extern DetectRequestDefaultTypeInternal _DetectRequest_default_instance_;
class DetectResponse;
struct DetectResponseDefaultTypeInternal;
extern DetectResponseDefaultTypeInternal _DetectResponse_default_instance_;
class DetectResult;
struct DetectResultDefaultTypeInternal;
extern DetectResultDefaultTypeInternal _DetectResult_default_instance_;
}  // namespace cniface
PROTOBUF_NAMESPACE_OPEN
template<> ::cniface::DetectRequest* Arena::CreateMaybeMessage<::cniface::DetectRequest>(Arena*);
template<> ::cniface::DetectResponse* Arena::CreateMaybeMessage<::cniface::DetectResponse>(Arena*);
template<> ::cniface::DetectResult* Arena::CreateMaybeMessage<::cniface::DetectResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cniface {

// ===================================================================

class DetectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.DetectRequest) */ {
 public:
  inline DetectRequest() : DetectRequest(nullptr) {}
  ~DetectRequest() override;
  explicit constexpr DetectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectRequest(const DetectRequest& from);
  DetectRequest(DetectRequest&& from) noexcept
    : DetectRequest() {
    *this = ::std::move(from);
  }

  inline DetectRequest& operator=(const DetectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectRequest& operator=(DetectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectRequest* internal_default_instance() {
    return reinterpret_cast<const DetectRequest*>(
               &_DetectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DetectRequest& a, DetectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DetectRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.DetectRequest";
  }
  protected:
  explicit DetectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaceImageBase64FieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // string faceImageBase64 = 1;
  void clear_faceimagebase64();
  const std::string& faceimagebase64() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_faceimagebase64(ArgT0&& arg0, ArgT... args);
  std::string* mutable_faceimagebase64();
  PROTOBUF_NODISCARD std::string* release_faceimagebase64();
  void set_allocated_faceimagebase64(std::string* faceimagebase64);
  private:
  const std::string& _internal_faceimagebase64() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_faceimagebase64(const std::string& value);
  std::string* _internal_mutable_faceimagebase64();
  public:

  // float score = 2;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.DetectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr faceimagebase64_;
  float score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_detect_2eproto;
};
// -------------------------------------------------------------------

class DetectResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.DetectResult) */ {
 public:
  inline DetectResult() : DetectResult(nullptr) {}
  ~DetectResult() override;
  explicit constexpr DetectResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectResult(const DetectResult& from);
  DetectResult(DetectResult&& from) noexcept
    : DetectResult() {
    *this = ::std::move(from);
  }

  inline DetectResult& operator=(const DetectResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectResult& operator=(DetectResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectResult* internal_default_instance() {
    return reinterpret_cast<const DetectResult*>(
               &_DetectResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DetectResult& a, DetectResult& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DetectResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.DetectResult";
  }
  protected:
  explicit DetectResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKpsFieldNumber = 6,
    kScoreFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kWFieldNumber = 4,
    kHFieldNumber = 5,
  };
  // repeated float kps = 6;
  int kps_size() const;
  private:
  int _internal_kps_size() const;
  public:
  void clear_kps();
  private:
  float _internal_kps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_kps() const;
  void _internal_add_kps(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_kps();
  public:
  float kps(int index) const;
  void set_kps(int index, float value);
  void add_kps(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kps();

  // float score = 1;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float w = 4;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float h = 5;
  void clear_h();
  float h() const;
  void set_h(float value);
  private:
  float _internal_h() const;
  void _internal_set_h(float value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.DetectResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kps_;
  float score_;
  float x_;
  float y_;
  float w_;
  float h_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_detect_2eproto;
};
// -------------------------------------------------------------------

class DetectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.DetectResponse) */ {
 public:
  inline DetectResponse() : DetectResponse(nullptr) {}
  ~DetectResponse() override;
  explicit constexpr DetectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectResponse(const DetectResponse& from);
  DetectResponse(DetectResponse&& from) noexcept
    : DetectResponse() {
    *this = ::std::move(from);
  }

  inline DetectResponse& operator=(const DetectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectResponse& operator=(DetectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectResponse* internal_default_instance() {
    return reinterpret_cast<const DetectResponse*>(
               &_DetectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DetectResponse& a, DetectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DetectResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.DetectResponse";
  }
  protected:
  explicit DetectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 3,
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .cniface.DetectResult results = 3;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::cniface::DetectResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::DetectResult >*
      mutable_results();
  private:
  const ::cniface::DetectResult& _internal_results(int index) const;
  ::cniface::DetectResult* _internal_add_results();
  public:
  const ::cniface::DetectResult& results(int index) const;
  ::cniface::DetectResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::DetectResult >&
      results() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 code = 1;
  void clear_code();
  int64_t code() const;
  void set_code(int64_t value);
  private:
  int64_t _internal_code() const;
  void _internal_set_code(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.DetectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::DetectResult > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int64_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_detect_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DetectRequest

// string faceImageBase64 = 1;
inline void DetectRequest::clear_faceimagebase64() {
  faceimagebase64_.ClearToEmpty();
}
inline const std::string& DetectRequest::faceimagebase64() const {
  // @@protoc_insertion_point(field_get:cniface.DetectRequest.faceImageBase64)
  return _internal_faceimagebase64();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetectRequest::set_faceimagebase64(ArgT0&& arg0, ArgT... args) {
 
 faceimagebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.DetectRequest.faceImageBase64)
}
inline std::string* DetectRequest::mutable_faceimagebase64() {
  std::string* _s = _internal_mutable_faceimagebase64();
  // @@protoc_insertion_point(field_mutable:cniface.DetectRequest.faceImageBase64)
  return _s;
}
inline const std::string& DetectRequest::_internal_faceimagebase64() const {
  return faceimagebase64_.Get();
}
inline void DetectRequest::_internal_set_faceimagebase64(const std::string& value) {
  
  faceimagebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DetectRequest::_internal_mutable_faceimagebase64() {
  
  return faceimagebase64_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DetectRequest::release_faceimagebase64() {
  // @@protoc_insertion_point(field_release:cniface.DetectRequest.faceImageBase64)
  return faceimagebase64_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DetectRequest::set_allocated_faceimagebase64(std::string* faceimagebase64) {
  if (faceimagebase64 != nullptr) {
    
  } else {
    
  }
  faceimagebase64_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), faceimagebase64,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (faceimagebase64_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    faceimagebase64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.DetectRequest.faceImageBase64)
}

// float score = 2;
inline void DetectRequest::clear_score() {
  score_ = 0;
}
inline float DetectRequest::_internal_score() const {
  return score_;
}
inline float DetectRequest::score() const {
  // @@protoc_insertion_point(field_get:cniface.DetectRequest.score)
  return _internal_score();
}
inline void DetectRequest::_internal_set_score(float value) {
  
  score_ = value;
}
inline void DetectRequest::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:cniface.DetectRequest.score)
}

// -------------------------------------------------------------------

// DetectResult

// float score = 1;
inline void DetectResult::clear_score() {
  score_ = 0;
}
inline float DetectResult::_internal_score() const {
  return score_;
}
inline float DetectResult::score() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.score)
  return _internal_score();
}
inline void DetectResult::_internal_set_score(float value) {
  
  score_ = value;
}
inline void DetectResult::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.score)
}

// float x = 2;
inline void DetectResult::clear_x() {
  x_ = 0;
}
inline float DetectResult::_internal_x() const {
  return x_;
}
inline float DetectResult::x() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.x)
  return _internal_x();
}
inline void DetectResult::_internal_set_x(float value) {
  
  x_ = value;
}
inline void DetectResult::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.x)
}

// float y = 3;
inline void DetectResult::clear_y() {
  y_ = 0;
}
inline float DetectResult::_internal_y() const {
  return y_;
}
inline float DetectResult::y() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.y)
  return _internal_y();
}
inline void DetectResult::_internal_set_y(float value) {
  
  y_ = value;
}
inline void DetectResult::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.y)
}

// float w = 4;
inline void DetectResult::clear_w() {
  w_ = 0;
}
inline float DetectResult::_internal_w() const {
  return w_;
}
inline float DetectResult::w() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.w)
  return _internal_w();
}
inline void DetectResult::_internal_set_w(float value) {
  
  w_ = value;
}
inline void DetectResult::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.w)
}

// float h = 5;
inline void DetectResult::clear_h() {
  h_ = 0;
}
inline float DetectResult::_internal_h() const {
  return h_;
}
inline float DetectResult::h() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.h)
  return _internal_h();
}
inline void DetectResult::_internal_set_h(float value) {
  
  h_ = value;
}
inline void DetectResult::set_h(float value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.h)
}

// repeated float kps = 6;
inline int DetectResult::_internal_kps_size() const {
  return kps_.size();
}
inline int DetectResult::kps_size() const {
  return _internal_kps_size();
}
inline void DetectResult::clear_kps() {
  kps_.Clear();
}
inline float DetectResult::_internal_kps(int index) const {
  return kps_.Get(index);
}
inline float DetectResult::kps(int index) const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.kps)
  return _internal_kps(index);
}
inline void DetectResult::set_kps(int index, float value) {
  kps_.Set(index, value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.kps)
}
inline void DetectResult::_internal_add_kps(float value) {
  kps_.Add(value);
}
inline void DetectResult::add_kps(float value) {
  _internal_add_kps(value);
  // @@protoc_insertion_point(field_add:cniface.DetectResult.kps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DetectResult::_internal_kps() const {
  return kps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DetectResult::kps() const {
  // @@protoc_insertion_point(field_list:cniface.DetectResult.kps)
  return _internal_kps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DetectResult::_internal_mutable_kps() {
  return &kps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DetectResult::mutable_kps() {
  // @@protoc_insertion_point(field_mutable_list:cniface.DetectResult.kps)
  return _internal_mutable_kps();
}

// -------------------------------------------------------------------

// DetectResponse

// int64 code = 1;
inline void DetectResponse::clear_code() {
  code_ = int64_t{0};
}
inline int64_t DetectResponse::_internal_code() const {
  return code_;
}
inline int64_t DetectResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResponse.code)
  return _internal_code();
}
inline void DetectResponse::_internal_set_code(int64_t value) {
  
  code_ = value;
}
inline void DetectResponse::set_code(int64_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResponse.code)
}

// string message = 2;
inline void DetectResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& DetectResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetectResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.DetectResponse.message)
}
inline std::string* DetectResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.DetectResponse.message)
  return _s;
}
inline const std::string& DetectResponse::_internal_message() const {
  return message_.Get();
}
inline void DetectResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DetectResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DetectResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.DetectResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DetectResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.DetectResponse.message)
}

// repeated .cniface.DetectResult results = 3;
inline int DetectResponse::_internal_results_size() const {
  return results_.size();
}
inline int DetectResponse::results_size() const {
  return _internal_results_size();
}
inline void DetectResponse::clear_results() {
  results_.Clear();
}
inline ::cniface::DetectResult* DetectResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:cniface.DetectResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::DetectResult >*
DetectResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:cniface.DetectResponse.results)
  return &results_;
}
inline const ::cniface::DetectResult& DetectResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::cniface::DetectResult& DetectResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:cniface.DetectResponse.results)
  return _internal_results(index);
}
inline ::cniface::DetectResult* DetectResponse::_internal_add_results() {
  return results_.Add();
}
inline ::cniface::DetectResult* DetectResponse::add_results() {
  ::cniface::DetectResult* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:cniface.DetectResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::DetectResult >&
DetectResponse::results() const {
  // @@protoc_insertion_point(field_list:cniface.DetectResponse.results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cniface

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_detect_2eproto
