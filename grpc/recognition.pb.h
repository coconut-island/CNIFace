// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recognition.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_recognition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_recognition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_recognition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_recognition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_recognition_2eproto;
namespace cniface {
class ExtractFeatureRequest;
struct ExtractFeatureRequestDefaultTypeInternal;
extern ExtractFeatureRequestDefaultTypeInternal _ExtractFeatureRequest_default_instance_;
class ExtractFeatureResponse;
struct ExtractFeatureResponseDefaultTypeInternal;
extern ExtractFeatureResponseDefaultTypeInternal _ExtractFeatureResponse_default_instance_;
class SimilarityRequest;
struct SimilarityRequestDefaultTypeInternal;
extern SimilarityRequestDefaultTypeInternal _SimilarityRequest_default_instance_;
class SimilarityeResponse;
struct SimilarityeResponseDefaultTypeInternal;
extern SimilarityeResponseDefaultTypeInternal _SimilarityeResponse_default_instance_;
}  // namespace cniface
PROTOBUF_NAMESPACE_OPEN
template<> ::cniface::ExtractFeatureRequest* Arena::CreateMaybeMessage<::cniface::ExtractFeatureRequest>(Arena*);
template<> ::cniface::ExtractFeatureResponse* Arena::CreateMaybeMessage<::cniface::ExtractFeatureResponse>(Arena*);
template<> ::cniface::SimilarityRequest* Arena::CreateMaybeMessage<::cniface::SimilarityRequest>(Arena*);
template<> ::cniface::SimilarityeResponse* Arena::CreateMaybeMessage<::cniface::SimilarityeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cniface {

// ===================================================================

class ExtractFeatureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.ExtractFeatureRequest) */ {
 public:
  inline ExtractFeatureRequest() : ExtractFeatureRequest(nullptr) {}
  ~ExtractFeatureRequest() override;
  explicit constexpr ExtractFeatureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtractFeatureRequest(const ExtractFeatureRequest& from);
  ExtractFeatureRequest(ExtractFeatureRequest&& from) noexcept
    : ExtractFeatureRequest() {
    *this = ::std::move(from);
  }

  inline ExtractFeatureRequest& operator=(const ExtractFeatureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtractFeatureRequest& operator=(ExtractFeatureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtractFeatureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtractFeatureRequest* internal_default_instance() {
    return reinterpret_cast<const ExtractFeatureRequest*>(
               &_ExtractFeatureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExtractFeatureRequest& a, ExtractFeatureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtractFeatureRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtractFeatureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtractFeatureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtractFeatureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtractFeatureRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExtractFeatureRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtractFeatureRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.ExtractFeatureRequest";
  }
  protected:
  explicit ExtractFeatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKpsFieldNumber = 2,
    kFaceImageBase64FieldNumber = 1,
  };
  // repeated float kps = 2;
  int kps_size() const;
  private:
  int _internal_kps_size() const;
  public:
  void clear_kps();
  private:
  float _internal_kps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_kps() const;
  void _internal_add_kps(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_kps();
  public:
  float kps(int index) const;
  void set_kps(int index, float value);
  void add_kps(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kps();

  // string faceImageBase64 = 1;
  void clear_faceimagebase64();
  const std::string& faceimagebase64() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_faceimagebase64(ArgT0&& arg0, ArgT... args);
  std::string* mutable_faceimagebase64();
  PROTOBUF_NODISCARD std::string* release_faceimagebase64();
  void set_allocated_faceimagebase64(std::string* faceimagebase64);
  private:
  const std::string& _internal_faceimagebase64() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_faceimagebase64(const std::string& value);
  std::string* _internal_mutable_faceimagebase64();
  public:

  // @@protoc_insertion_point(class_scope:cniface.ExtractFeatureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr faceimagebase64_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recognition_2eproto;
};
// -------------------------------------------------------------------

class ExtractFeatureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.ExtractFeatureResponse) */ {
 public:
  inline ExtractFeatureResponse() : ExtractFeatureResponse(nullptr) {}
  ~ExtractFeatureResponse() override;
  explicit constexpr ExtractFeatureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtractFeatureResponse(const ExtractFeatureResponse& from);
  ExtractFeatureResponse(ExtractFeatureResponse&& from) noexcept
    : ExtractFeatureResponse() {
    *this = ::std::move(from);
  }

  inline ExtractFeatureResponse& operator=(const ExtractFeatureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtractFeatureResponse& operator=(ExtractFeatureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtractFeatureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtractFeatureResponse* internal_default_instance() {
    return reinterpret_cast<const ExtractFeatureResponse*>(
               &_ExtractFeatureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExtractFeatureResponse& a, ExtractFeatureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtractFeatureResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtractFeatureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtractFeatureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtractFeatureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtractFeatureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExtractFeatureResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtractFeatureResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.ExtractFeatureResponse";
  }
  protected:
  explicit ExtractFeatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kFeatureBase64FieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string featureBase64 = 3;
  void clear_featurebase64();
  const std::string& featurebase64() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_featurebase64(ArgT0&& arg0, ArgT... args);
  std::string* mutable_featurebase64();
  PROTOBUF_NODISCARD std::string* release_featurebase64();
  void set_allocated_featurebase64(std::string* featurebase64);
  private:
  const std::string& _internal_featurebase64() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_featurebase64(const std::string& value);
  std::string* _internal_mutable_featurebase64();
  public:

  // int64 code = 1;
  void clear_code();
  int64_t code() const;
  void set_code(int64_t value);
  private:
  int64_t _internal_code() const;
  void _internal_set_code(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.ExtractFeatureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr featurebase64_;
  int64_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recognition_2eproto;
};
// -------------------------------------------------------------------

class SimilarityRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.SimilarityRequest) */ {
 public:
  inline SimilarityRequest() : SimilarityRequest(nullptr) {}
  ~SimilarityRequest() override;
  explicit constexpr SimilarityRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimilarityRequest(const SimilarityRequest& from);
  SimilarityRequest(SimilarityRequest&& from) noexcept
    : SimilarityRequest() {
    *this = ::std::move(from);
  }

  inline SimilarityRequest& operator=(const SimilarityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimilarityRequest& operator=(SimilarityRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimilarityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimilarityRequest* internal_default_instance() {
    return reinterpret_cast<const SimilarityRequest*>(
               &_SimilarityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SimilarityRequest& a, SimilarityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SimilarityRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimilarityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimilarityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimilarityRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimilarityRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimilarityRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimilarityRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.SimilarityRequest";
  }
  protected:
  explicit SimilarityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureBase641FieldNumber = 1,
    kFeatureBase642FieldNumber = 2,
  };
  // string featureBase64_1 = 1;
  void clear_featurebase64_1();
  const std::string& featurebase64_1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_featurebase64_1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_featurebase64_1();
  PROTOBUF_NODISCARD std::string* release_featurebase64_1();
  void set_allocated_featurebase64_1(std::string* featurebase64_1);
  private:
  const std::string& _internal_featurebase64_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_featurebase64_1(const std::string& value);
  std::string* _internal_mutable_featurebase64_1();
  public:

  // string featureBase64_2 = 2;
  void clear_featurebase64_2();
  const std::string& featurebase64_2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_featurebase64_2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_featurebase64_2();
  PROTOBUF_NODISCARD std::string* release_featurebase64_2();
  void set_allocated_featurebase64_2(std::string* featurebase64_2);
  private:
  const std::string& _internal_featurebase64_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_featurebase64_2(const std::string& value);
  std::string* _internal_mutable_featurebase64_2();
  public:

  // @@protoc_insertion_point(class_scope:cniface.SimilarityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr featurebase64_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr featurebase64_2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recognition_2eproto;
};
// -------------------------------------------------------------------

class SimilarityeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.SimilarityeResponse) */ {
 public:
  inline SimilarityeResponse() : SimilarityeResponse(nullptr) {}
  ~SimilarityeResponse() override;
  explicit constexpr SimilarityeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimilarityeResponse(const SimilarityeResponse& from);
  SimilarityeResponse(SimilarityeResponse&& from) noexcept
    : SimilarityeResponse() {
    *this = ::std::move(from);
  }

  inline SimilarityeResponse& operator=(const SimilarityeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimilarityeResponse& operator=(SimilarityeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimilarityeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimilarityeResponse* internal_default_instance() {
    return reinterpret_cast<const SimilarityeResponse*>(
               &_SimilarityeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SimilarityeResponse& a, SimilarityeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SimilarityeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimilarityeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimilarityeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimilarityeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimilarityeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimilarityeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimilarityeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.SimilarityeResponse";
  }
  protected:
  explicit SimilarityeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
    kSimilarityFieldNumber = 3,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 code = 1;
  void clear_code();
  int64_t code() const;
  void set_code(int64_t value);
  private:
  int64_t _internal_code() const;
  void _internal_set_code(int64_t value);
  public:

  // float similarity = 3;
  void clear_similarity();
  float similarity() const;
  void set_similarity(float value);
  private:
  float _internal_similarity() const;
  void _internal_set_similarity(float value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.SimilarityeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int64_t code_;
  float similarity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_recognition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExtractFeatureRequest

// string faceImageBase64 = 1;
inline void ExtractFeatureRequest::clear_faceimagebase64() {
  faceimagebase64_.ClearToEmpty();
}
inline const std::string& ExtractFeatureRequest::faceimagebase64() const {
  // @@protoc_insertion_point(field_get:cniface.ExtractFeatureRequest.faceImageBase64)
  return _internal_faceimagebase64();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtractFeatureRequest::set_faceimagebase64(ArgT0&& arg0, ArgT... args) {
 
 faceimagebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.ExtractFeatureRequest.faceImageBase64)
}
inline std::string* ExtractFeatureRequest::mutable_faceimagebase64() {
  std::string* _s = _internal_mutable_faceimagebase64();
  // @@protoc_insertion_point(field_mutable:cniface.ExtractFeatureRequest.faceImageBase64)
  return _s;
}
inline const std::string& ExtractFeatureRequest::_internal_faceimagebase64() const {
  return faceimagebase64_.Get();
}
inline void ExtractFeatureRequest::_internal_set_faceimagebase64(const std::string& value) {
  
  faceimagebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExtractFeatureRequest::_internal_mutable_faceimagebase64() {
  
  return faceimagebase64_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExtractFeatureRequest::release_faceimagebase64() {
  // @@protoc_insertion_point(field_release:cniface.ExtractFeatureRequest.faceImageBase64)
  return faceimagebase64_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExtractFeatureRequest::set_allocated_faceimagebase64(std::string* faceimagebase64) {
  if (faceimagebase64 != nullptr) {
    
  } else {
    
  }
  faceimagebase64_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), faceimagebase64,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (faceimagebase64_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    faceimagebase64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.ExtractFeatureRequest.faceImageBase64)
}

// repeated float kps = 2;
inline int ExtractFeatureRequest::_internal_kps_size() const {
  return kps_.size();
}
inline int ExtractFeatureRequest::kps_size() const {
  return _internal_kps_size();
}
inline void ExtractFeatureRequest::clear_kps() {
  kps_.Clear();
}
inline float ExtractFeatureRequest::_internal_kps(int index) const {
  return kps_.Get(index);
}
inline float ExtractFeatureRequest::kps(int index) const {
  // @@protoc_insertion_point(field_get:cniface.ExtractFeatureRequest.kps)
  return _internal_kps(index);
}
inline void ExtractFeatureRequest::set_kps(int index, float value) {
  kps_.Set(index, value);
  // @@protoc_insertion_point(field_set:cniface.ExtractFeatureRequest.kps)
}
inline void ExtractFeatureRequest::_internal_add_kps(float value) {
  kps_.Add(value);
}
inline void ExtractFeatureRequest::add_kps(float value) {
  _internal_add_kps(value);
  // @@protoc_insertion_point(field_add:cniface.ExtractFeatureRequest.kps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ExtractFeatureRequest::_internal_kps() const {
  return kps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ExtractFeatureRequest::kps() const {
  // @@protoc_insertion_point(field_list:cniface.ExtractFeatureRequest.kps)
  return _internal_kps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ExtractFeatureRequest::_internal_mutable_kps() {
  return &kps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ExtractFeatureRequest::mutable_kps() {
  // @@protoc_insertion_point(field_mutable_list:cniface.ExtractFeatureRequest.kps)
  return _internal_mutable_kps();
}

// -------------------------------------------------------------------

// ExtractFeatureResponse

// int64 code = 1;
inline void ExtractFeatureResponse::clear_code() {
  code_ = int64_t{0};
}
inline int64_t ExtractFeatureResponse::_internal_code() const {
  return code_;
}
inline int64_t ExtractFeatureResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.ExtractFeatureResponse.code)
  return _internal_code();
}
inline void ExtractFeatureResponse::_internal_set_code(int64_t value) {
  
  code_ = value;
}
inline void ExtractFeatureResponse::set_code(int64_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.ExtractFeatureResponse.code)
}

// string message = 2;
inline void ExtractFeatureResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ExtractFeatureResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.ExtractFeatureResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtractFeatureResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.ExtractFeatureResponse.message)
}
inline std::string* ExtractFeatureResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.ExtractFeatureResponse.message)
  return _s;
}
inline const std::string& ExtractFeatureResponse::_internal_message() const {
  return message_.Get();
}
inline void ExtractFeatureResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExtractFeatureResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExtractFeatureResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.ExtractFeatureResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExtractFeatureResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.ExtractFeatureResponse.message)
}

// string featureBase64 = 3;
inline void ExtractFeatureResponse::clear_featurebase64() {
  featurebase64_.ClearToEmpty();
}
inline const std::string& ExtractFeatureResponse::featurebase64() const {
  // @@protoc_insertion_point(field_get:cniface.ExtractFeatureResponse.featureBase64)
  return _internal_featurebase64();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtractFeatureResponse::set_featurebase64(ArgT0&& arg0, ArgT... args) {
 
 featurebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.ExtractFeatureResponse.featureBase64)
}
inline std::string* ExtractFeatureResponse::mutable_featurebase64() {
  std::string* _s = _internal_mutable_featurebase64();
  // @@protoc_insertion_point(field_mutable:cniface.ExtractFeatureResponse.featureBase64)
  return _s;
}
inline const std::string& ExtractFeatureResponse::_internal_featurebase64() const {
  return featurebase64_.Get();
}
inline void ExtractFeatureResponse::_internal_set_featurebase64(const std::string& value) {
  
  featurebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExtractFeatureResponse::_internal_mutable_featurebase64() {
  
  return featurebase64_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExtractFeatureResponse::release_featurebase64() {
  // @@protoc_insertion_point(field_release:cniface.ExtractFeatureResponse.featureBase64)
  return featurebase64_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExtractFeatureResponse::set_allocated_featurebase64(std::string* featurebase64) {
  if (featurebase64 != nullptr) {
    
  } else {
    
  }
  featurebase64_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), featurebase64,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (featurebase64_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    featurebase64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.ExtractFeatureResponse.featureBase64)
}

// -------------------------------------------------------------------

// SimilarityRequest

// string featureBase64_1 = 1;
inline void SimilarityRequest::clear_featurebase64_1() {
  featurebase64_1_.ClearToEmpty();
}
inline const std::string& SimilarityRequest::featurebase64_1() const {
  // @@protoc_insertion_point(field_get:cniface.SimilarityRequest.featureBase64_1)
  return _internal_featurebase64_1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimilarityRequest::set_featurebase64_1(ArgT0&& arg0, ArgT... args) {
 
 featurebase64_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.SimilarityRequest.featureBase64_1)
}
inline std::string* SimilarityRequest::mutable_featurebase64_1() {
  std::string* _s = _internal_mutable_featurebase64_1();
  // @@protoc_insertion_point(field_mutable:cniface.SimilarityRequest.featureBase64_1)
  return _s;
}
inline const std::string& SimilarityRequest::_internal_featurebase64_1() const {
  return featurebase64_1_.Get();
}
inline void SimilarityRequest::_internal_set_featurebase64_1(const std::string& value) {
  
  featurebase64_1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimilarityRequest::_internal_mutable_featurebase64_1() {
  
  return featurebase64_1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimilarityRequest::release_featurebase64_1() {
  // @@protoc_insertion_point(field_release:cniface.SimilarityRequest.featureBase64_1)
  return featurebase64_1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimilarityRequest::set_allocated_featurebase64_1(std::string* featurebase64_1) {
  if (featurebase64_1 != nullptr) {
    
  } else {
    
  }
  featurebase64_1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), featurebase64_1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (featurebase64_1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    featurebase64_1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.SimilarityRequest.featureBase64_1)
}

// string featureBase64_2 = 2;
inline void SimilarityRequest::clear_featurebase64_2() {
  featurebase64_2_.ClearToEmpty();
}
inline const std::string& SimilarityRequest::featurebase64_2() const {
  // @@protoc_insertion_point(field_get:cniface.SimilarityRequest.featureBase64_2)
  return _internal_featurebase64_2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimilarityRequest::set_featurebase64_2(ArgT0&& arg0, ArgT... args) {
 
 featurebase64_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.SimilarityRequest.featureBase64_2)
}
inline std::string* SimilarityRequest::mutable_featurebase64_2() {
  std::string* _s = _internal_mutable_featurebase64_2();
  // @@protoc_insertion_point(field_mutable:cniface.SimilarityRequest.featureBase64_2)
  return _s;
}
inline const std::string& SimilarityRequest::_internal_featurebase64_2() const {
  return featurebase64_2_.Get();
}
inline void SimilarityRequest::_internal_set_featurebase64_2(const std::string& value) {
  
  featurebase64_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimilarityRequest::_internal_mutable_featurebase64_2() {
  
  return featurebase64_2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimilarityRequest::release_featurebase64_2() {
  // @@protoc_insertion_point(field_release:cniface.SimilarityRequest.featureBase64_2)
  return featurebase64_2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimilarityRequest::set_allocated_featurebase64_2(std::string* featurebase64_2) {
  if (featurebase64_2 != nullptr) {
    
  } else {
    
  }
  featurebase64_2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), featurebase64_2,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (featurebase64_2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    featurebase64_2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.SimilarityRequest.featureBase64_2)
}

// -------------------------------------------------------------------

// SimilarityeResponse

// int64 code = 1;
inline void SimilarityeResponse::clear_code() {
  code_ = int64_t{0};
}
inline int64_t SimilarityeResponse::_internal_code() const {
  return code_;
}
inline int64_t SimilarityeResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.SimilarityeResponse.code)
  return _internal_code();
}
inline void SimilarityeResponse::_internal_set_code(int64_t value) {
  
  code_ = value;
}
inline void SimilarityeResponse::set_code(int64_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.SimilarityeResponse.code)
}

// string message = 2;
inline void SimilarityeResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& SimilarityeResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.SimilarityeResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimilarityeResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.SimilarityeResponse.message)
}
inline std::string* SimilarityeResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.SimilarityeResponse.message)
  return _s;
}
inline const std::string& SimilarityeResponse::_internal_message() const {
  return message_.Get();
}
inline void SimilarityeResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimilarityeResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimilarityeResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.SimilarityeResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimilarityeResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.SimilarityeResponse.message)
}

// float similarity = 3;
inline void SimilarityeResponse::clear_similarity() {
  similarity_ = 0;
}
inline float SimilarityeResponse::_internal_similarity() const {
  return similarity_;
}
inline float SimilarityeResponse::similarity() const {
  // @@protoc_insertion_point(field_get:cniface.SimilarityeResponse.similarity)
  return _internal_similarity();
}
inline void SimilarityeResponse::_internal_set_similarity(float value) {
  
  similarity_ = value;
}
inline void SimilarityeResponse::set_similarity(float value) {
  _internal_set_similarity(value);
  // @@protoc_insertion_point(field_set:cniface.SimilarityeResponse.similarity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cniface

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_recognition_2eproto
