// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: detect.proto

#include "detect.pb.h"
#include "detect.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace cniface {

static const char* DetectService_method_names[] = {
  "/cniface.DetectService/detect",
};

std::unique_ptr< DetectService::Stub> DetectService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DetectService::Stub> stub(new DetectService::Stub(channel, options));
  return stub;
}

DetectService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_detect_(DetectService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DetectService::Stub::detect(::grpc::ClientContext* context, const ::cniface::DetectRequest& request, ::cniface::DetectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cniface::DetectRequest, ::cniface::DetectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_detect_, context, request, response);
}

void DetectService::Stub::async::detect(::grpc::ClientContext* context, const ::cniface::DetectRequest* request, ::cniface::DetectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cniface::DetectRequest, ::cniface::DetectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_detect_, context, request, response, std::move(f));
}

void DetectService::Stub::async::detect(::grpc::ClientContext* context, const ::cniface::DetectRequest* request, ::cniface::DetectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_detect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cniface::DetectResponse>* DetectService::Stub::PrepareAsyncdetectRaw(::grpc::ClientContext* context, const ::cniface::DetectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cniface::DetectResponse, ::cniface::DetectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_detect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cniface::DetectResponse>* DetectService::Stub::AsyncdetectRaw(::grpc::ClientContext* context, const ::cniface::DetectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdetectRaw(context, request, cq);
  result->StartCall();
  return result;
}

DetectService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DetectService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DetectService::Service, ::cniface::DetectRequest, ::cniface::DetectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DetectService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cniface::DetectRequest* req,
             ::cniface::DetectResponse* resp) {
               return service->detect(ctx, req, resp);
             }, this)));
}

DetectService::Service::~Service() {
}

::grpc::Status DetectService::Service::detect(::grpc::ServerContext* context, const ::cniface::DetectRequest* request, ::cniface::DetectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cniface

