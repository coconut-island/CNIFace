// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: repository.proto
#ifndef GRPC_repository_2eproto__INCLUDED
#define GRPC_repository_2eproto__INCLUDED

#include "repository.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace cniface {

class RepositoryService final {
 public:
  static constexpr char const* service_full_name() {
    return "cniface.RepositoryService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status listRepo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::cniface::ListRepositoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::ListRepositoryResponse>> AsynclistRepo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::ListRepositoryResponse>>(AsynclistRepoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::ListRepositoryResponse>> PrepareAsynclistRepo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::ListRepositoryResponse>>(PrepareAsynclistRepoRaw(context, request, cq));
    }
    virtual ::grpc::Status addRepo(::grpc::ClientContext* context, const ::cniface::AddRepoRequest& request, ::cniface::AddRepoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::AddRepoResponse>> AsyncaddRepo(::grpc::ClientContext* context, const ::cniface::AddRepoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::AddRepoResponse>>(AsyncaddRepoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::AddRepoResponse>> PrepareAsyncaddRepo(::grpc::ClientContext* context, const ::cniface::AddRepoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::AddRepoResponse>>(PrepareAsyncaddRepoRaw(context, request, cq));
    }
    virtual ::grpc::Status deleteRepo(::grpc::ClientContext* context, const ::cniface::DeleteRepoRequest& request, ::cniface::DeleteRepoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::DeleteRepoResponse>> AsyncdeleteRepo(::grpc::ClientContext* context, const ::cniface::DeleteRepoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::DeleteRepoResponse>>(AsyncdeleteRepoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::DeleteRepoResponse>> PrepareAsyncdeleteRepo(::grpc::ClientContext* context, const ::cniface::DeleteRepoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::DeleteRepoResponse>>(PrepareAsyncdeleteRepoRaw(context, request, cq));
    }
    virtual ::grpc::Status search(::grpc::ClientContext* context, const ::cniface::SearchRequest& request, ::cniface::SearchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::SearchResponse>> Asyncsearch(::grpc::ClientContext* context, const ::cniface::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::SearchResponse>>(AsyncsearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::SearchResponse>> PrepareAsyncsearch(::grpc::ClientContext* context, const ::cniface::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::SearchResponse>>(PrepareAsyncsearchRaw(context, request, cq));
    }
    virtual ::grpc::Status addFeature(::grpc::ClientContext* context, const ::cniface::AddFeatureRequest& request, ::cniface::AddFeatureResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::AddFeatureResponse>> AsyncaddFeature(::grpc::ClientContext* context, const ::cniface::AddFeatureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::AddFeatureResponse>>(AsyncaddFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::AddFeatureResponse>> PrepareAsyncaddFeature(::grpc::ClientContext* context, const ::cniface::AddFeatureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::AddFeatureResponse>>(PrepareAsyncaddFeatureRaw(context, request, cq));
    }
    virtual ::grpc::Status deleteFeature(::grpc::ClientContext* context, const ::cniface::deleteFeatureRequest& request, ::cniface::deleteFeatureResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::deleteFeatureResponse>> AsyncdeleteFeature(::grpc::ClientContext* context, const ::cniface::deleteFeatureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::deleteFeatureResponse>>(AsyncdeleteFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::deleteFeatureResponse>> PrepareAsyncdeleteFeature(::grpc::ClientContext* context, const ::cniface::deleteFeatureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cniface::deleteFeatureResponse>>(PrepareAsyncdeleteFeatureRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void listRepo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::cniface::ListRepositoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void listRepo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::cniface::ListRepositoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void addRepo(::grpc::ClientContext* context, const ::cniface::AddRepoRequest* request, ::cniface::AddRepoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void addRepo(::grpc::ClientContext* context, const ::cniface::AddRepoRequest* request, ::cniface::AddRepoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void deleteRepo(::grpc::ClientContext* context, const ::cniface::DeleteRepoRequest* request, ::cniface::DeleteRepoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteRepo(::grpc::ClientContext* context, const ::cniface::DeleteRepoRequest* request, ::cniface::DeleteRepoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void search(::grpc::ClientContext* context, const ::cniface::SearchRequest* request, ::cniface::SearchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void search(::grpc::ClientContext* context, const ::cniface::SearchRequest* request, ::cniface::SearchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void addFeature(::grpc::ClientContext* context, const ::cniface::AddFeatureRequest* request, ::cniface::AddFeatureResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void addFeature(::grpc::ClientContext* context, const ::cniface::AddFeatureRequest* request, ::cniface::AddFeatureResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void deleteFeature(::grpc::ClientContext* context, const ::cniface::deleteFeatureRequest* request, ::cniface::deleteFeatureResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteFeature(::grpc::ClientContext* context, const ::cniface::deleteFeatureRequest* request, ::cniface::deleteFeatureResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cniface::ListRepositoryResponse>* AsynclistRepoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cniface::ListRepositoryResponse>* PrepareAsynclistRepoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cniface::AddRepoResponse>* AsyncaddRepoRaw(::grpc::ClientContext* context, const ::cniface::AddRepoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cniface::AddRepoResponse>* PrepareAsyncaddRepoRaw(::grpc::ClientContext* context, const ::cniface::AddRepoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cniface::DeleteRepoResponse>* AsyncdeleteRepoRaw(::grpc::ClientContext* context, const ::cniface::DeleteRepoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cniface::DeleteRepoResponse>* PrepareAsyncdeleteRepoRaw(::grpc::ClientContext* context, const ::cniface::DeleteRepoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cniface::SearchResponse>* AsyncsearchRaw(::grpc::ClientContext* context, const ::cniface::SearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cniface::SearchResponse>* PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::cniface::SearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cniface::AddFeatureResponse>* AsyncaddFeatureRaw(::grpc::ClientContext* context, const ::cniface::AddFeatureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cniface::AddFeatureResponse>* PrepareAsyncaddFeatureRaw(::grpc::ClientContext* context, const ::cniface::AddFeatureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cniface::deleteFeatureResponse>* AsyncdeleteFeatureRaw(::grpc::ClientContext* context, const ::cniface::deleteFeatureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cniface::deleteFeatureResponse>* PrepareAsyncdeleteFeatureRaw(::grpc::ClientContext* context, const ::cniface::deleteFeatureRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status listRepo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::cniface::ListRepositoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::ListRepositoryResponse>> AsynclistRepo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::ListRepositoryResponse>>(AsynclistRepoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::ListRepositoryResponse>> PrepareAsynclistRepo(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::ListRepositoryResponse>>(PrepareAsynclistRepoRaw(context, request, cq));
    }
    ::grpc::Status addRepo(::grpc::ClientContext* context, const ::cniface::AddRepoRequest& request, ::cniface::AddRepoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::AddRepoResponse>> AsyncaddRepo(::grpc::ClientContext* context, const ::cniface::AddRepoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::AddRepoResponse>>(AsyncaddRepoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::AddRepoResponse>> PrepareAsyncaddRepo(::grpc::ClientContext* context, const ::cniface::AddRepoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::AddRepoResponse>>(PrepareAsyncaddRepoRaw(context, request, cq));
    }
    ::grpc::Status deleteRepo(::grpc::ClientContext* context, const ::cniface::DeleteRepoRequest& request, ::cniface::DeleteRepoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::DeleteRepoResponse>> AsyncdeleteRepo(::grpc::ClientContext* context, const ::cniface::DeleteRepoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::DeleteRepoResponse>>(AsyncdeleteRepoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::DeleteRepoResponse>> PrepareAsyncdeleteRepo(::grpc::ClientContext* context, const ::cniface::DeleteRepoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::DeleteRepoResponse>>(PrepareAsyncdeleteRepoRaw(context, request, cq));
    }
    ::grpc::Status search(::grpc::ClientContext* context, const ::cniface::SearchRequest& request, ::cniface::SearchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::SearchResponse>> Asyncsearch(::grpc::ClientContext* context, const ::cniface::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::SearchResponse>>(AsyncsearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::SearchResponse>> PrepareAsyncsearch(::grpc::ClientContext* context, const ::cniface::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::SearchResponse>>(PrepareAsyncsearchRaw(context, request, cq));
    }
    ::grpc::Status addFeature(::grpc::ClientContext* context, const ::cniface::AddFeatureRequest& request, ::cniface::AddFeatureResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::AddFeatureResponse>> AsyncaddFeature(::grpc::ClientContext* context, const ::cniface::AddFeatureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::AddFeatureResponse>>(AsyncaddFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::AddFeatureResponse>> PrepareAsyncaddFeature(::grpc::ClientContext* context, const ::cniface::AddFeatureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::AddFeatureResponse>>(PrepareAsyncaddFeatureRaw(context, request, cq));
    }
    ::grpc::Status deleteFeature(::grpc::ClientContext* context, const ::cniface::deleteFeatureRequest& request, ::cniface::deleteFeatureResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::deleteFeatureResponse>> AsyncdeleteFeature(::grpc::ClientContext* context, const ::cniface::deleteFeatureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::deleteFeatureResponse>>(AsyncdeleteFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::deleteFeatureResponse>> PrepareAsyncdeleteFeature(::grpc::ClientContext* context, const ::cniface::deleteFeatureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cniface::deleteFeatureResponse>>(PrepareAsyncdeleteFeatureRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void listRepo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::cniface::ListRepositoryResponse* response, std::function<void(::grpc::Status)>) override;
      void listRepo(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::cniface::ListRepositoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void addRepo(::grpc::ClientContext* context, const ::cniface::AddRepoRequest* request, ::cniface::AddRepoResponse* response, std::function<void(::grpc::Status)>) override;
      void addRepo(::grpc::ClientContext* context, const ::cniface::AddRepoRequest* request, ::cniface::AddRepoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deleteRepo(::grpc::ClientContext* context, const ::cniface::DeleteRepoRequest* request, ::cniface::DeleteRepoResponse* response, std::function<void(::grpc::Status)>) override;
      void deleteRepo(::grpc::ClientContext* context, const ::cniface::DeleteRepoRequest* request, ::cniface::DeleteRepoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void search(::grpc::ClientContext* context, const ::cniface::SearchRequest* request, ::cniface::SearchResponse* response, std::function<void(::grpc::Status)>) override;
      void search(::grpc::ClientContext* context, const ::cniface::SearchRequest* request, ::cniface::SearchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void addFeature(::grpc::ClientContext* context, const ::cniface::AddFeatureRequest* request, ::cniface::AddFeatureResponse* response, std::function<void(::grpc::Status)>) override;
      void addFeature(::grpc::ClientContext* context, const ::cniface::AddFeatureRequest* request, ::cniface::AddFeatureResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deleteFeature(::grpc::ClientContext* context, const ::cniface::deleteFeatureRequest* request, ::cniface::deleteFeatureResponse* response, std::function<void(::grpc::Status)>) override;
      void deleteFeature(::grpc::ClientContext* context, const ::cniface::deleteFeatureRequest* request, ::cniface::deleteFeatureResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cniface::ListRepositoryResponse>* AsynclistRepoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cniface::ListRepositoryResponse>* PrepareAsynclistRepoRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cniface::AddRepoResponse>* AsyncaddRepoRaw(::grpc::ClientContext* context, const ::cniface::AddRepoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cniface::AddRepoResponse>* PrepareAsyncaddRepoRaw(::grpc::ClientContext* context, const ::cniface::AddRepoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cniface::DeleteRepoResponse>* AsyncdeleteRepoRaw(::grpc::ClientContext* context, const ::cniface::DeleteRepoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cniface::DeleteRepoResponse>* PrepareAsyncdeleteRepoRaw(::grpc::ClientContext* context, const ::cniface::DeleteRepoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cniface::SearchResponse>* AsyncsearchRaw(::grpc::ClientContext* context, const ::cniface::SearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cniface::SearchResponse>* PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::cniface::SearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cniface::AddFeatureResponse>* AsyncaddFeatureRaw(::grpc::ClientContext* context, const ::cniface::AddFeatureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cniface::AddFeatureResponse>* PrepareAsyncaddFeatureRaw(::grpc::ClientContext* context, const ::cniface::AddFeatureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cniface::deleteFeatureResponse>* AsyncdeleteFeatureRaw(::grpc::ClientContext* context, const ::cniface::deleteFeatureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cniface::deleteFeatureResponse>* PrepareAsyncdeleteFeatureRaw(::grpc::ClientContext* context, const ::cniface::deleteFeatureRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_listRepo_;
    const ::grpc::internal::RpcMethod rpcmethod_addRepo_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteRepo_;
    const ::grpc::internal::RpcMethod rpcmethod_search_;
    const ::grpc::internal::RpcMethod rpcmethod_addFeature_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteFeature_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status listRepo(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::cniface::ListRepositoryResponse* response);
    virtual ::grpc::Status addRepo(::grpc::ServerContext* context, const ::cniface::AddRepoRequest* request, ::cniface::AddRepoResponse* response);
    virtual ::grpc::Status deleteRepo(::grpc::ServerContext* context, const ::cniface::DeleteRepoRequest* request, ::cniface::DeleteRepoResponse* response);
    virtual ::grpc::Status search(::grpc::ServerContext* context, const ::cniface::SearchRequest* request, ::cniface::SearchResponse* response);
    virtual ::grpc::Status addFeature(::grpc::ServerContext* context, const ::cniface::AddFeatureRequest* request, ::cniface::AddFeatureResponse* response);
    virtual ::grpc::Status deleteFeature(::grpc::ServerContext* context, const ::cniface::deleteFeatureRequest* request, ::cniface::deleteFeatureResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_listRepo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_listRepo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_listRepo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listRepo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::cniface::ListRepositoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlistRepo(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::cniface::ListRepositoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addRepo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addRepo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_addRepo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addRepo(::grpc::ServerContext* /*context*/, const ::cniface::AddRepoRequest* /*request*/, ::cniface::AddRepoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddRepo(::grpc::ServerContext* context, ::cniface::AddRepoRequest* request, ::grpc::ServerAsyncResponseWriter< ::cniface::AddRepoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteRepo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deleteRepo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_deleteRepo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteRepo(::grpc::ServerContext* /*context*/, const ::cniface::DeleteRepoRequest* /*request*/, ::cniface::DeleteRepoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteRepo(::grpc::ServerContext* context, ::cniface::DeleteRepoRequest* request, ::grpc::ServerAsyncResponseWriter< ::cniface::DeleteRepoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_search() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::cniface::SearchRequest* /*request*/, ::cniface::SearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::cniface::SearchRequest* request, ::grpc::ServerAsyncResponseWriter< ::cniface::SearchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addFeature() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_addFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addFeature(::grpc::ServerContext* /*context*/, const ::cniface::AddFeatureRequest* /*request*/, ::cniface::AddFeatureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddFeature(::grpc::ServerContext* context, ::cniface::AddFeatureRequest* request, ::grpc::ServerAsyncResponseWriter< ::cniface::AddFeatureResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deleteFeature() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_deleteFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteFeature(::grpc::ServerContext* /*context*/, const ::cniface::deleteFeatureRequest* /*request*/, ::cniface::deleteFeatureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteFeature(::grpc::ServerContext* context, ::cniface::deleteFeatureRequest* request, ::grpc::ServerAsyncResponseWriter< ::cniface::deleteFeatureResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_listRepo<WithAsyncMethod_addRepo<WithAsyncMethod_deleteRepo<WithAsyncMethod_search<WithAsyncMethod_addFeature<WithAsyncMethod_deleteFeature<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_listRepo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_listRepo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::cniface::ListRepositoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::cniface::ListRepositoryResponse* response) { return this->listRepo(context, request, response); }));}
    void SetMessageAllocatorFor_listRepo(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::cniface::ListRepositoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::cniface::ListRepositoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_listRepo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listRepo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::cniface::ListRepositoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* listRepo(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::cniface::ListRepositoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_addRepo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_addRepo() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cniface::AddRepoRequest, ::cniface::AddRepoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cniface::AddRepoRequest* request, ::cniface::AddRepoResponse* response) { return this->addRepo(context, request, response); }));}
    void SetMessageAllocatorFor_addRepo(
        ::grpc::MessageAllocator< ::cniface::AddRepoRequest, ::cniface::AddRepoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cniface::AddRepoRequest, ::cniface::AddRepoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_addRepo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addRepo(::grpc::ServerContext* /*context*/, const ::cniface::AddRepoRequest* /*request*/, ::cniface::AddRepoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addRepo(
      ::grpc::CallbackServerContext* /*context*/, const ::cniface::AddRepoRequest* /*request*/, ::cniface::AddRepoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deleteRepo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deleteRepo() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cniface::DeleteRepoRequest, ::cniface::DeleteRepoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cniface::DeleteRepoRequest* request, ::cniface::DeleteRepoResponse* response) { return this->deleteRepo(context, request, response); }));}
    void SetMessageAllocatorFor_deleteRepo(
        ::grpc::MessageAllocator< ::cniface::DeleteRepoRequest, ::cniface::DeleteRepoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cniface::DeleteRepoRequest, ::cniface::DeleteRepoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deleteRepo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteRepo(::grpc::ServerContext* /*context*/, const ::cniface::DeleteRepoRequest* /*request*/, ::cniface::DeleteRepoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteRepo(
      ::grpc::CallbackServerContext* /*context*/, const ::cniface::DeleteRepoRequest* /*request*/, ::cniface::DeleteRepoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_search() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cniface::SearchRequest, ::cniface::SearchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cniface::SearchRequest* request, ::cniface::SearchResponse* response) { return this->search(context, request, response); }));}
    void SetMessageAllocatorFor_search(
        ::grpc::MessageAllocator< ::cniface::SearchRequest, ::cniface::SearchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cniface::SearchRequest, ::cniface::SearchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::cniface::SearchRequest* /*request*/, ::cniface::SearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* search(
      ::grpc::CallbackServerContext* /*context*/, const ::cniface::SearchRequest* /*request*/, ::cniface::SearchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_addFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_addFeature() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::cniface::AddFeatureRequest, ::cniface::AddFeatureResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cniface::AddFeatureRequest* request, ::cniface::AddFeatureResponse* response) { return this->addFeature(context, request, response); }));}
    void SetMessageAllocatorFor_addFeature(
        ::grpc::MessageAllocator< ::cniface::AddFeatureRequest, ::cniface::AddFeatureResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cniface::AddFeatureRequest, ::cniface::AddFeatureResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_addFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addFeature(::grpc::ServerContext* /*context*/, const ::cniface::AddFeatureRequest* /*request*/, ::cniface::AddFeatureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addFeature(
      ::grpc::CallbackServerContext* /*context*/, const ::cniface::AddFeatureRequest* /*request*/, ::cniface::AddFeatureResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deleteFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deleteFeature() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::cniface::deleteFeatureRequest, ::cniface::deleteFeatureResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cniface::deleteFeatureRequest* request, ::cniface::deleteFeatureResponse* response) { return this->deleteFeature(context, request, response); }));}
    void SetMessageAllocatorFor_deleteFeature(
        ::grpc::MessageAllocator< ::cniface::deleteFeatureRequest, ::cniface::deleteFeatureResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cniface::deleteFeatureRequest, ::cniface::deleteFeatureResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deleteFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteFeature(::grpc::ServerContext* /*context*/, const ::cniface::deleteFeatureRequest* /*request*/, ::cniface::deleteFeatureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteFeature(
      ::grpc::CallbackServerContext* /*context*/, const ::cniface::deleteFeatureRequest* /*request*/, ::cniface::deleteFeatureResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_listRepo<WithCallbackMethod_addRepo<WithCallbackMethod_deleteRepo<WithCallbackMethod_search<WithCallbackMethod_addFeature<WithCallbackMethod_deleteFeature<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_listRepo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_listRepo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_listRepo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listRepo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::cniface::ListRepositoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addRepo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addRepo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_addRepo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addRepo(::grpc::ServerContext* /*context*/, const ::cniface::AddRepoRequest* /*request*/, ::cniface::AddRepoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteRepo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deleteRepo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_deleteRepo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteRepo(::grpc::ServerContext* /*context*/, const ::cniface::DeleteRepoRequest* /*request*/, ::cniface::DeleteRepoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_search() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::cniface::SearchRequest* /*request*/, ::cniface::SearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addFeature() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_addFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addFeature(::grpc::ServerContext* /*context*/, const ::cniface::AddFeatureRequest* /*request*/, ::cniface::AddFeatureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deleteFeature() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_deleteFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteFeature(::grpc::ServerContext* /*context*/, const ::cniface::deleteFeatureRequest* /*request*/, ::cniface::deleteFeatureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_listRepo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_listRepo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_listRepo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listRepo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::cniface::ListRepositoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlistRepo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_addRepo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addRepo() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_addRepo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addRepo(::grpc::ServerContext* /*context*/, const ::cniface::AddRepoRequest* /*request*/, ::cniface::AddRepoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddRepo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteRepo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deleteRepo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_deleteRepo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteRepo(::grpc::ServerContext* /*context*/, const ::cniface::DeleteRepoRequest* /*request*/, ::cniface::DeleteRepoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteRepo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_search() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::cniface::SearchRequest* /*request*/, ::cniface::SearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_addFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addFeature() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_addFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addFeature(::grpc::ServerContext* /*context*/, const ::cniface::AddFeatureRequest* /*request*/, ::cniface::AddFeatureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddFeature(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deleteFeature() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_deleteFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteFeature(::grpc::ServerContext* /*context*/, const ::cniface::deleteFeatureRequest* /*request*/, ::cniface::deleteFeatureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteFeature(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_listRepo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_listRepo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->listRepo(context, request, response); }));
    }
    ~WithRawCallbackMethod_listRepo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listRepo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::cniface::ListRepositoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* listRepo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_addRepo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_addRepo() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addRepo(context, request, response); }));
    }
    ~WithRawCallbackMethod_addRepo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addRepo(::grpc::ServerContext* /*context*/, const ::cniface::AddRepoRequest* /*request*/, ::cniface::AddRepoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addRepo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deleteRepo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deleteRepo() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deleteRepo(context, request, response); }));
    }
    ~WithRawCallbackMethod_deleteRepo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteRepo(::grpc::ServerContext* /*context*/, const ::cniface::DeleteRepoRequest* /*request*/, ::cniface::DeleteRepoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteRepo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_search() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->search(context, request, response); }));
    }
    ~WithRawCallbackMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::cniface::SearchRequest* /*request*/, ::cniface::SearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* search(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_addFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_addFeature() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addFeature(context, request, response); }));
    }
    ~WithRawCallbackMethod_addFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addFeature(::grpc::ServerContext* /*context*/, const ::cniface::AddFeatureRequest* /*request*/, ::cniface::AddFeatureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addFeature(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deleteFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deleteFeature() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deleteFeature(context, request, response); }));
    }
    ~WithRawCallbackMethod_deleteFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteFeature(::grpc::ServerContext* /*context*/, const ::cniface::deleteFeatureRequest* /*request*/, ::cniface::deleteFeatureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteFeature(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_listRepo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_listRepo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::cniface::ListRepositoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::cniface::ListRepositoryResponse>* streamer) {
                       return this->StreamedlistRepo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_listRepo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status listRepo(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::cniface::ListRepositoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlistRepo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::cniface::ListRepositoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addRepo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addRepo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cniface::AddRepoRequest, ::cniface::AddRepoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cniface::AddRepoRequest, ::cniface::AddRepoResponse>* streamer) {
                       return this->StreamedaddRepo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addRepo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addRepo(::grpc::ServerContext* /*context*/, const ::cniface::AddRepoRequest* /*request*/, ::cniface::AddRepoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddRepo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cniface::AddRepoRequest,::cniface::AddRepoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteRepo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deleteRepo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cniface::DeleteRepoRequest, ::cniface::DeleteRepoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cniface::DeleteRepoRequest, ::cniface::DeleteRepoResponse>* streamer) {
                       return this->StreameddeleteRepo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deleteRepo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteRepo(::grpc::ServerContext* /*context*/, const ::cniface::DeleteRepoRequest* /*request*/, ::cniface::DeleteRepoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteRepo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cniface::DeleteRepoRequest,::cniface::DeleteRepoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_search() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cniface::SearchRequest, ::cniface::SearchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cniface::SearchRequest, ::cniface::SearchResponse>* streamer) {
                       return this->Streamedsearch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::cniface::SearchRequest* /*request*/, ::cniface::SearchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cniface::SearchRequest,::cniface::SearchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addFeature() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cniface::AddFeatureRequest, ::cniface::AddFeatureResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cniface::AddFeatureRequest, ::cniface::AddFeatureResponse>* streamer) {
                       return this->StreamedaddFeature(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addFeature(::grpc::ServerContext* /*context*/, const ::cniface::AddFeatureRequest* /*request*/, ::cniface::AddFeatureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddFeature(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cniface::AddFeatureRequest,::cniface::AddFeatureResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deleteFeature() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cniface::deleteFeatureRequest, ::cniface::deleteFeatureResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cniface::deleteFeatureRequest, ::cniface::deleteFeatureResponse>* streamer) {
                       return this->StreameddeleteFeature(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deleteFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteFeature(::grpc::ServerContext* /*context*/, const ::cniface::deleteFeatureRequest* /*request*/, ::cniface::deleteFeatureResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteFeature(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cniface::deleteFeatureRequest,::cniface::deleteFeatureResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_listRepo<WithStreamedUnaryMethod_addRepo<WithStreamedUnaryMethod_deleteRepo<WithStreamedUnaryMethod_search<WithStreamedUnaryMethod_addFeature<WithStreamedUnaryMethod_deleteFeature<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_listRepo<WithStreamedUnaryMethod_addRepo<WithStreamedUnaryMethod_deleteRepo<WithStreamedUnaryMethod_search<WithStreamedUnaryMethod_addFeature<WithStreamedUnaryMethod_deleteFeature<Service > > > > > > StreamedService;
};

}  // namespace cniface


#endif  // GRPC_repository_2eproto__INCLUDED
