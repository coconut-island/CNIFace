// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cniface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cniface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cniface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cniface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cniface_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cniface_2eproto;
namespace cniface {
class DetectRequest;
struct DetectRequestDefaultTypeInternal;
extern DetectRequestDefaultTypeInternal _DetectRequest_default_instance_;
class DetectResponse;
struct DetectResponseDefaultTypeInternal;
extern DetectResponseDefaultTypeInternal _DetectResponse_default_instance_;
class DetectResult;
struct DetectResultDefaultTypeInternal;
extern DetectResultDefaultTypeInternal _DetectResult_default_instance_;
class ExtractFeatureRequest;
struct ExtractFeatureRequestDefaultTypeInternal;
extern ExtractFeatureRequestDefaultTypeInternal _ExtractFeatureRequest_default_instance_;
class ExtractFeatureResponse;
struct ExtractFeatureResponseDefaultTypeInternal;
extern ExtractFeatureResponseDefaultTypeInternal _ExtractFeatureResponse_default_instance_;
class SimilarityRequest;
struct SimilarityRequestDefaultTypeInternal;
extern SimilarityRequestDefaultTypeInternal _SimilarityRequest_default_instance_;
class SimilarityResponse;
struct SimilarityResponseDefaultTypeInternal;
extern SimilarityResponseDefaultTypeInternal _SimilarityResponse_default_instance_;
}  // namespace cniface
PROTOBUF_NAMESPACE_OPEN
template<> ::cniface::DetectRequest* Arena::CreateMaybeMessage<::cniface::DetectRequest>(Arena*);
template<> ::cniface::DetectResponse* Arena::CreateMaybeMessage<::cniface::DetectResponse>(Arena*);
template<> ::cniface::DetectResult* Arena::CreateMaybeMessage<::cniface::DetectResult>(Arena*);
template<> ::cniface::ExtractFeatureRequest* Arena::CreateMaybeMessage<::cniface::ExtractFeatureRequest>(Arena*);
template<> ::cniface::ExtractFeatureResponse* Arena::CreateMaybeMessage<::cniface::ExtractFeatureResponse>(Arena*);
template<> ::cniface::SimilarityRequest* Arena::CreateMaybeMessage<::cniface::SimilarityRequest>(Arena*);
template<> ::cniface::SimilarityResponse* Arena::CreateMaybeMessage<::cniface::SimilarityResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cniface {

// ===================================================================

class DetectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.DetectRequest) */ {
 public:
  inline DetectRequest() : DetectRequest(nullptr) {}
  ~DetectRequest() override;
  explicit constexpr DetectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectRequest(const DetectRequest& from);
  DetectRequest(DetectRequest&& from) noexcept
    : DetectRequest() {
    *this = ::std::move(from);
  }

  inline DetectRequest& operator=(const DetectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectRequest& operator=(DetectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectRequest* internal_default_instance() {
    return reinterpret_cast<const DetectRequest*>(
               &_DetectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DetectRequest& a, DetectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DetectRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.DetectRequest";
  }
  protected:
  explicit DetectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
    kFaceImageBase64FieldNumber = 2,
    kScoreFieldNumber = 3,
  };
  // string model = 1;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string faceImageBase64 = 2;
  void clear_faceimagebase64();
  const std::string& faceimagebase64() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_faceimagebase64(ArgT0&& arg0, ArgT... args);
  std::string* mutable_faceimagebase64();
  PROTOBUF_NODISCARD std::string* release_faceimagebase64();
  void set_allocated_faceimagebase64(std::string* faceimagebase64);
  private:
  const std::string& _internal_faceimagebase64() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_faceimagebase64(const std::string& value);
  std::string* _internal_mutable_faceimagebase64();
  public:

  // float score = 3;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.DetectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr faceimagebase64_;
  float score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class DetectResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.DetectResult) */ {
 public:
  inline DetectResult() : DetectResult(nullptr) {}
  ~DetectResult() override;
  explicit constexpr DetectResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectResult(const DetectResult& from);
  DetectResult(DetectResult&& from) noexcept
    : DetectResult() {
    *this = ::std::move(from);
  }

  inline DetectResult& operator=(const DetectResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectResult& operator=(DetectResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectResult* internal_default_instance() {
    return reinterpret_cast<const DetectResult*>(
               &_DetectResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DetectResult& a, DetectResult& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DetectResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.DetectResult";
  }
  protected:
  explicit DetectResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKpsFieldNumber = 6,
    kScoreFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kWFieldNumber = 4,
    kHFieldNumber = 5,
    kMaskScoreFieldNumber = 7,
  };
  // repeated float kps = 6;
  int kps_size() const;
  private:
  int _internal_kps_size() const;
  public:
  void clear_kps();
  private:
  float _internal_kps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_kps() const;
  void _internal_add_kps(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_kps();
  public:
  float kps(int index) const;
  void set_kps(int index, float value);
  void add_kps(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kps();

  // float score = 1;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float w = 4;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float h = 5;
  void clear_h();
  float h() const;
  void set_h(float value);
  private:
  float _internal_h() const;
  void _internal_set_h(float value);
  public:

  // float maskScore = 7;
  void clear_maskscore();
  float maskscore() const;
  void set_maskscore(float value);
  private:
  float _internal_maskscore() const;
  void _internal_set_maskscore(float value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.DetectResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kps_;
  float score_;
  float x_;
  float y_;
  float w_;
  float h_;
  float maskscore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class DetectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.DetectResponse) */ {
 public:
  inline DetectResponse() : DetectResponse(nullptr) {}
  ~DetectResponse() override;
  explicit constexpr DetectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectResponse(const DetectResponse& from);
  DetectResponse(DetectResponse&& from) noexcept
    : DetectResponse() {
    *this = ::std::move(from);
  }

  inline DetectResponse& operator=(const DetectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectResponse& operator=(DetectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectResponse* internal_default_instance() {
    return reinterpret_cast<const DetectResponse*>(
               &_DetectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DetectResponse& a, DetectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DetectResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.DetectResponse";
  }
  protected:
  explicit DetectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 3,
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .cniface.DetectResult results = 3;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::cniface::DetectResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::DetectResult >*
      mutable_results();
  private:
  const ::cniface::DetectResult& _internal_results(int index) const;
  ::cniface::DetectResult* _internal_add_results();
  public:
  const ::cniface::DetectResult& results(int index) const;
  ::cniface::DetectResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::DetectResult >&
      results() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 code = 1;
  void clear_code();
  int64_t code() const;
  void set_code(int64_t value);
  private:
  int64_t _internal_code() const;
  void _internal_set_code(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.DetectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::DetectResult > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int64_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class ExtractFeatureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.ExtractFeatureRequest) */ {
 public:
  inline ExtractFeatureRequest() : ExtractFeatureRequest(nullptr) {}
  ~ExtractFeatureRequest() override;
  explicit constexpr ExtractFeatureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtractFeatureRequest(const ExtractFeatureRequest& from);
  ExtractFeatureRequest(ExtractFeatureRequest&& from) noexcept
    : ExtractFeatureRequest() {
    *this = ::std::move(from);
  }

  inline ExtractFeatureRequest& operator=(const ExtractFeatureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtractFeatureRequest& operator=(ExtractFeatureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtractFeatureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtractFeatureRequest* internal_default_instance() {
    return reinterpret_cast<const ExtractFeatureRequest*>(
               &_ExtractFeatureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExtractFeatureRequest& a, ExtractFeatureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtractFeatureRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtractFeatureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtractFeatureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtractFeatureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtractFeatureRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExtractFeatureRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtractFeatureRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.ExtractFeatureRequest";
  }
  protected:
  explicit ExtractFeatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKpsFieldNumber = 3,
    kModelFieldNumber = 1,
    kFaceImageBase64FieldNumber = 2,
  };
  // repeated float kps = 3;
  int kps_size() const;
  private:
  int _internal_kps_size() const;
  public:
  void clear_kps();
  private:
  float _internal_kps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_kps() const;
  void _internal_add_kps(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_kps();
  public:
  float kps(int index) const;
  void set_kps(int index, float value);
  void add_kps(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kps();

  // string model = 1;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string faceImageBase64 = 2;
  void clear_faceimagebase64();
  const std::string& faceimagebase64() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_faceimagebase64(ArgT0&& arg0, ArgT... args);
  std::string* mutable_faceimagebase64();
  PROTOBUF_NODISCARD std::string* release_faceimagebase64();
  void set_allocated_faceimagebase64(std::string* faceimagebase64);
  private:
  const std::string& _internal_faceimagebase64() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_faceimagebase64(const std::string& value);
  std::string* _internal_mutable_faceimagebase64();
  public:

  // @@protoc_insertion_point(class_scope:cniface.ExtractFeatureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr faceimagebase64_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class ExtractFeatureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.ExtractFeatureResponse) */ {
 public:
  inline ExtractFeatureResponse() : ExtractFeatureResponse(nullptr) {}
  ~ExtractFeatureResponse() override;
  explicit constexpr ExtractFeatureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtractFeatureResponse(const ExtractFeatureResponse& from);
  ExtractFeatureResponse(ExtractFeatureResponse&& from) noexcept
    : ExtractFeatureResponse() {
    *this = ::std::move(from);
  }

  inline ExtractFeatureResponse& operator=(const ExtractFeatureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtractFeatureResponse& operator=(ExtractFeatureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtractFeatureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtractFeatureResponse* internal_default_instance() {
    return reinterpret_cast<const ExtractFeatureResponse*>(
               &_ExtractFeatureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ExtractFeatureResponse& a, ExtractFeatureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtractFeatureResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtractFeatureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtractFeatureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtractFeatureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtractFeatureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExtractFeatureResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtractFeatureResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.ExtractFeatureResponse";
  }
  protected:
  explicit ExtractFeatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 3,
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated float feature = 3;
  int feature_size() const;
  private:
  int _internal_feature_size() const;
  public:
  void clear_feature();
  private:
  float _internal_feature(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_feature() const;
  void _internal_add_feature(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_feature();
  public:
  float feature(int index) const;
  void set_feature(int index, float value);
  void add_feature(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      feature() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_feature();

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 code = 1;
  void clear_code();
  int64_t code() const;
  void set_code(int64_t value);
  private:
  int64_t _internal_code() const;
  void _internal_set_code(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.ExtractFeatureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > feature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int64_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class SimilarityRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.SimilarityRequest) */ {
 public:
  inline SimilarityRequest() : SimilarityRequest(nullptr) {}
  ~SimilarityRequest() override;
  explicit constexpr SimilarityRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimilarityRequest(const SimilarityRequest& from);
  SimilarityRequest(SimilarityRequest&& from) noexcept
    : SimilarityRequest() {
    *this = ::std::move(from);
  }

  inline SimilarityRequest& operator=(const SimilarityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimilarityRequest& operator=(SimilarityRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimilarityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimilarityRequest* internal_default_instance() {
    return reinterpret_cast<const SimilarityRequest*>(
               &_SimilarityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SimilarityRequest& a, SimilarityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SimilarityRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimilarityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimilarityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimilarityRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimilarityRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimilarityRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimilarityRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.SimilarityRequest";
  }
  protected:
  explicit SimilarityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeature1FieldNumber = 1,
    kFeature2FieldNumber = 2,
  };
  // repeated float feature1 = 1;
  int feature1_size() const;
  private:
  int _internal_feature1_size() const;
  public:
  void clear_feature1();
  private:
  float _internal_feature1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_feature1() const;
  void _internal_add_feature1(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_feature1();
  public:
  float feature1(int index) const;
  void set_feature1(int index, float value);
  void add_feature1(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      feature1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_feature1();

  // repeated float feature2 = 2;
  int feature2_size() const;
  private:
  int _internal_feature2_size() const;
  public:
  void clear_feature2();
  private:
  float _internal_feature2(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_feature2() const;
  void _internal_add_feature2(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_feature2();
  public:
  float feature2(int index) const;
  void set_feature2(int index, float value);
  void add_feature2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      feature2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_feature2();

  // @@protoc_insertion_point(class_scope:cniface.SimilarityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > feature1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > feature2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class SimilarityResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.SimilarityResponse) */ {
 public:
  inline SimilarityResponse() : SimilarityResponse(nullptr) {}
  ~SimilarityResponse() override;
  explicit constexpr SimilarityResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimilarityResponse(const SimilarityResponse& from);
  SimilarityResponse(SimilarityResponse&& from) noexcept
    : SimilarityResponse() {
    *this = ::std::move(from);
  }

  inline SimilarityResponse& operator=(const SimilarityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimilarityResponse& operator=(SimilarityResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimilarityResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimilarityResponse* internal_default_instance() {
    return reinterpret_cast<const SimilarityResponse*>(
               &_SimilarityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SimilarityResponse& a, SimilarityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SimilarityResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimilarityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimilarityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimilarityResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimilarityResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimilarityResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimilarityResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.SimilarityResponse";
  }
  protected:
  explicit SimilarityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
    kSimilarityFieldNumber = 3,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 code = 1;
  void clear_code();
  int64_t code() const;
  void set_code(int64_t value);
  private:
  int64_t _internal_code() const;
  void _internal_set_code(int64_t value);
  public:

  // float similarity = 3;
  void clear_similarity();
  float similarity() const;
  void set_similarity(float value);
  private:
  float _internal_similarity() const;
  void _internal_set_similarity(float value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.SimilarityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int64_t code_;
  float similarity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DetectRequest

// string model = 1;
inline void DetectRequest::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& DetectRequest::model() const {
  // @@protoc_insertion_point(field_get:cniface.DetectRequest.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetectRequest::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.DetectRequest.model)
}
inline std::string* DetectRequest::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:cniface.DetectRequest.model)
  return _s;
}
inline const std::string& DetectRequest::_internal_model() const {
  return model_.Get();
}
inline void DetectRequest::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DetectRequest::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DetectRequest::release_model() {
  // @@protoc_insertion_point(field_release:cniface.DetectRequest.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DetectRequest::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.DetectRequest.model)
}

// string faceImageBase64 = 2;
inline void DetectRequest::clear_faceimagebase64() {
  faceimagebase64_.ClearToEmpty();
}
inline const std::string& DetectRequest::faceimagebase64() const {
  // @@protoc_insertion_point(field_get:cniface.DetectRequest.faceImageBase64)
  return _internal_faceimagebase64();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetectRequest::set_faceimagebase64(ArgT0&& arg0, ArgT... args) {
 
 faceimagebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.DetectRequest.faceImageBase64)
}
inline std::string* DetectRequest::mutable_faceimagebase64() {
  std::string* _s = _internal_mutable_faceimagebase64();
  // @@protoc_insertion_point(field_mutable:cniface.DetectRequest.faceImageBase64)
  return _s;
}
inline const std::string& DetectRequest::_internal_faceimagebase64() const {
  return faceimagebase64_.Get();
}
inline void DetectRequest::_internal_set_faceimagebase64(const std::string& value) {
  
  faceimagebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DetectRequest::_internal_mutable_faceimagebase64() {
  
  return faceimagebase64_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DetectRequest::release_faceimagebase64() {
  // @@protoc_insertion_point(field_release:cniface.DetectRequest.faceImageBase64)
  return faceimagebase64_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DetectRequest::set_allocated_faceimagebase64(std::string* faceimagebase64) {
  if (faceimagebase64 != nullptr) {
    
  } else {
    
  }
  faceimagebase64_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), faceimagebase64,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (faceimagebase64_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    faceimagebase64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.DetectRequest.faceImageBase64)
}

// float score = 3;
inline void DetectRequest::clear_score() {
  score_ = 0;
}
inline float DetectRequest::_internal_score() const {
  return score_;
}
inline float DetectRequest::score() const {
  // @@protoc_insertion_point(field_get:cniface.DetectRequest.score)
  return _internal_score();
}
inline void DetectRequest::_internal_set_score(float value) {
  
  score_ = value;
}
inline void DetectRequest::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:cniface.DetectRequest.score)
}

// -------------------------------------------------------------------

// DetectResult

// float score = 1;
inline void DetectResult::clear_score() {
  score_ = 0;
}
inline float DetectResult::_internal_score() const {
  return score_;
}
inline float DetectResult::score() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.score)
  return _internal_score();
}
inline void DetectResult::_internal_set_score(float value) {
  
  score_ = value;
}
inline void DetectResult::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.score)
}

// float x = 2;
inline void DetectResult::clear_x() {
  x_ = 0;
}
inline float DetectResult::_internal_x() const {
  return x_;
}
inline float DetectResult::x() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.x)
  return _internal_x();
}
inline void DetectResult::_internal_set_x(float value) {
  
  x_ = value;
}
inline void DetectResult::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.x)
}

// float y = 3;
inline void DetectResult::clear_y() {
  y_ = 0;
}
inline float DetectResult::_internal_y() const {
  return y_;
}
inline float DetectResult::y() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.y)
  return _internal_y();
}
inline void DetectResult::_internal_set_y(float value) {
  
  y_ = value;
}
inline void DetectResult::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.y)
}

// float w = 4;
inline void DetectResult::clear_w() {
  w_ = 0;
}
inline float DetectResult::_internal_w() const {
  return w_;
}
inline float DetectResult::w() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.w)
  return _internal_w();
}
inline void DetectResult::_internal_set_w(float value) {
  
  w_ = value;
}
inline void DetectResult::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.w)
}

// float h = 5;
inline void DetectResult::clear_h() {
  h_ = 0;
}
inline float DetectResult::_internal_h() const {
  return h_;
}
inline float DetectResult::h() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.h)
  return _internal_h();
}
inline void DetectResult::_internal_set_h(float value) {
  
  h_ = value;
}
inline void DetectResult::set_h(float value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.h)
}

// repeated float kps = 6;
inline int DetectResult::_internal_kps_size() const {
  return kps_.size();
}
inline int DetectResult::kps_size() const {
  return _internal_kps_size();
}
inline void DetectResult::clear_kps() {
  kps_.Clear();
}
inline float DetectResult::_internal_kps(int index) const {
  return kps_.Get(index);
}
inline float DetectResult::kps(int index) const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.kps)
  return _internal_kps(index);
}
inline void DetectResult::set_kps(int index, float value) {
  kps_.Set(index, value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.kps)
}
inline void DetectResult::_internal_add_kps(float value) {
  kps_.Add(value);
}
inline void DetectResult::add_kps(float value) {
  _internal_add_kps(value);
  // @@protoc_insertion_point(field_add:cniface.DetectResult.kps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DetectResult::_internal_kps() const {
  return kps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DetectResult::kps() const {
  // @@protoc_insertion_point(field_list:cniface.DetectResult.kps)
  return _internal_kps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DetectResult::_internal_mutable_kps() {
  return &kps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DetectResult::mutable_kps() {
  // @@protoc_insertion_point(field_mutable_list:cniface.DetectResult.kps)
  return _internal_mutable_kps();
}

// float maskScore = 7;
inline void DetectResult::clear_maskscore() {
  maskscore_ = 0;
}
inline float DetectResult::_internal_maskscore() const {
  return maskscore_;
}
inline float DetectResult::maskscore() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.maskScore)
  return _internal_maskscore();
}
inline void DetectResult::_internal_set_maskscore(float value) {
  
  maskscore_ = value;
}
inline void DetectResult::set_maskscore(float value) {
  _internal_set_maskscore(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.maskScore)
}

// -------------------------------------------------------------------

// DetectResponse

// int64 code = 1;
inline void DetectResponse::clear_code() {
  code_ = int64_t{0};
}
inline int64_t DetectResponse::_internal_code() const {
  return code_;
}
inline int64_t DetectResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResponse.code)
  return _internal_code();
}
inline void DetectResponse::_internal_set_code(int64_t value) {
  
  code_ = value;
}
inline void DetectResponse::set_code(int64_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResponse.code)
}

// string message = 2;
inline void DetectResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& DetectResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetectResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.DetectResponse.message)
}
inline std::string* DetectResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.DetectResponse.message)
  return _s;
}
inline const std::string& DetectResponse::_internal_message() const {
  return message_.Get();
}
inline void DetectResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DetectResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DetectResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.DetectResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DetectResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.DetectResponse.message)
}

// repeated .cniface.DetectResult results = 3;
inline int DetectResponse::_internal_results_size() const {
  return results_.size();
}
inline int DetectResponse::results_size() const {
  return _internal_results_size();
}
inline void DetectResponse::clear_results() {
  results_.Clear();
}
inline ::cniface::DetectResult* DetectResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:cniface.DetectResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::DetectResult >*
DetectResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:cniface.DetectResponse.results)
  return &results_;
}
inline const ::cniface::DetectResult& DetectResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::cniface::DetectResult& DetectResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:cniface.DetectResponse.results)
  return _internal_results(index);
}
inline ::cniface::DetectResult* DetectResponse::_internal_add_results() {
  return results_.Add();
}
inline ::cniface::DetectResult* DetectResponse::add_results() {
  ::cniface::DetectResult* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:cniface.DetectResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::DetectResult >&
DetectResponse::results() const {
  // @@protoc_insertion_point(field_list:cniface.DetectResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// ExtractFeatureRequest

// string model = 1;
inline void ExtractFeatureRequest::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& ExtractFeatureRequest::model() const {
  // @@protoc_insertion_point(field_get:cniface.ExtractFeatureRequest.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtractFeatureRequest::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.ExtractFeatureRequest.model)
}
inline std::string* ExtractFeatureRequest::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:cniface.ExtractFeatureRequest.model)
  return _s;
}
inline const std::string& ExtractFeatureRequest::_internal_model() const {
  return model_.Get();
}
inline void ExtractFeatureRequest::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExtractFeatureRequest::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExtractFeatureRequest::release_model() {
  // @@protoc_insertion_point(field_release:cniface.ExtractFeatureRequest.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExtractFeatureRequest::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.ExtractFeatureRequest.model)
}

// string faceImageBase64 = 2;
inline void ExtractFeatureRequest::clear_faceimagebase64() {
  faceimagebase64_.ClearToEmpty();
}
inline const std::string& ExtractFeatureRequest::faceimagebase64() const {
  // @@protoc_insertion_point(field_get:cniface.ExtractFeatureRequest.faceImageBase64)
  return _internal_faceimagebase64();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtractFeatureRequest::set_faceimagebase64(ArgT0&& arg0, ArgT... args) {
 
 faceimagebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.ExtractFeatureRequest.faceImageBase64)
}
inline std::string* ExtractFeatureRequest::mutable_faceimagebase64() {
  std::string* _s = _internal_mutable_faceimagebase64();
  // @@protoc_insertion_point(field_mutable:cniface.ExtractFeatureRequest.faceImageBase64)
  return _s;
}
inline const std::string& ExtractFeatureRequest::_internal_faceimagebase64() const {
  return faceimagebase64_.Get();
}
inline void ExtractFeatureRequest::_internal_set_faceimagebase64(const std::string& value) {
  
  faceimagebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExtractFeatureRequest::_internal_mutable_faceimagebase64() {
  
  return faceimagebase64_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExtractFeatureRequest::release_faceimagebase64() {
  // @@protoc_insertion_point(field_release:cniface.ExtractFeatureRequest.faceImageBase64)
  return faceimagebase64_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExtractFeatureRequest::set_allocated_faceimagebase64(std::string* faceimagebase64) {
  if (faceimagebase64 != nullptr) {
    
  } else {
    
  }
  faceimagebase64_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), faceimagebase64,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (faceimagebase64_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    faceimagebase64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.ExtractFeatureRequest.faceImageBase64)
}

// repeated float kps = 3;
inline int ExtractFeatureRequest::_internal_kps_size() const {
  return kps_.size();
}
inline int ExtractFeatureRequest::kps_size() const {
  return _internal_kps_size();
}
inline void ExtractFeatureRequest::clear_kps() {
  kps_.Clear();
}
inline float ExtractFeatureRequest::_internal_kps(int index) const {
  return kps_.Get(index);
}
inline float ExtractFeatureRequest::kps(int index) const {
  // @@protoc_insertion_point(field_get:cniface.ExtractFeatureRequest.kps)
  return _internal_kps(index);
}
inline void ExtractFeatureRequest::set_kps(int index, float value) {
  kps_.Set(index, value);
  // @@protoc_insertion_point(field_set:cniface.ExtractFeatureRequest.kps)
}
inline void ExtractFeatureRequest::_internal_add_kps(float value) {
  kps_.Add(value);
}
inline void ExtractFeatureRequest::add_kps(float value) {
  _internal_add_kps(value);
  // @@protoc_insertion_point(field_add:cniface.ExtractFeatureRequest.kps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ExtractFeatureRequest::_internal_kps() const {
  return kps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ExtractFeatureRequest::kps() const {
  // @@protoc_insertion_point(field_list:cniface.ExtractFeatureRequest.kps)
  return _internal_kps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ExtractFeatureRequest::_internal_mutable_kps() {
  return &kps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ExtractFeatureRequest::mutable_kps() {
  // @@protoc_insertion_point(field_mutable_list:cniface.ExtractFeatureRequest.kps)
  return _internal_mutable_kps();
}

// -------------------------------------------------------------------

// ExtractFeatureResponse

// int64 code = 1;
inline void ExtractFeatureResponse::clear_code() {
  code_ = int64_t{0};
}
inline int64_t ExtractFeatureResponse::_internal_code() const {
  return code_;
}
inline int64_t ExtractFeatureResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.ExtractFeatureResponse.code)
  return _internal_code();
}
inline void ExtractFeatureResponse::_internal_set_code(int64_t value) {
  
  code_ = value;
}
inline void ExtractFeatureResponse::set_code(int64_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.ExtractFeatureResponse.code)
}

// string message = 2;
inline void ExtractFeatureResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ExtractFeatureResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.ExtractFeatureResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtractFeatureResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.ExtractFeatureResponse.message)
}
inline std::string* ExtractFeatureResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.ExtractFeatureResponse.message)
  return _s;
}
inline const std::string& ExtractFeatureResponse::_internal_message() const {
  return message_.Get();
}
inline void ExtractFeatureResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExtractFeatureResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExtractFeatureResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.ExtractFeatureResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExtractFeatureResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.ExtractFeatureResponse.message)
}

// repeated float feature = 3;
inline int ExtractFeatureResponse::_internal_feature_size() const {
  return feature_.size();
}
inline int ExtractFeatureResponse::feature_size() const {
  return _internal_feature_size();
}
inline void ExtractFeatureResponse::clear_feature() {
  feature_.Clear();
}
inline float ExtractFeatureResponse::_internal_feature(int index) const {
  return feature_.Get(index);
}
inline float ExtractFeatureResponse::feature(int index) const {
  // @@protoc_insertion_point(field_get:cniface.ExtractFeatureResponse.feature)
  return _internal_feature(index);
}
inline void ExtractFeatureResponse::set_feature(int index, float value) {
  feature_.Set(index, value);
  // @@protoc_insertion_point(field_set:cniface.ExtractFeatureResponse.feature)
}
inline void ExtractFeatureResponse::_internal_add_feature(float value) {
  feature_.Add(value);
}
inline void ExtractFeatureResponse::add_feature(float value) {
  _internal_add_feature(value);
  // @@protoc_insertion_point(field_add:cniface.ExtractFeatureResponse.feature)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ExtractFeatureResponse::_internal_feature() const {
  return feature_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ExtractFeatureResponse::feature() const {
  // @@protoc_insertion_point(field_list:cniface.ExtractFeatureResponse.feature)
  return _internal_feature();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ExtractFeatureResponse::_internal_mutable_feature() {
  return &feature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ExtractFeatureResponse::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:cniface.ExtractFeatureResponse.feature)
  return _internal_mutable_feature();
}

// -------------------------------------------------------------------

// SimilarityRequest

// repeated float feature1 = 1;
inline int SimilarityRequest::_internal_feature1_size() const {
  return feature1_.size();
}
inline int SimilarityRequest::feature1_size() const {
  return _internal_feature1_size();
}
inline void SimilarityRequest::clear_feature1() {
  feature1_.Clear();
}
inline float SimilarityRequest::_internal_feature1(int index) const {
  return feature1_.Get(index);
}
inline float SimilarityRequest::feature1(int index) const {
  // @@protoc_insertion_point(field_get:cniface.SimilarityRequest.feature1)
  return _internal_feature1(index);
}
inline void SimilarityRequest::set_feature1(int index, float value) {
  feature1_.Set(index, value);
  // @@protoc_insertion_point(field_set:cniface.SimilarityRequest.feature1)
}
inline void SimilarityRequest::_internal_add_feature1(float value) {
  feature1_.Add(value);
}
inline void SimilarityRequest::add_feature1(float value) {
  _internal_add_feature1(value);
  // @@protoc_insertion_point(field_add:cniface.SimilarityRequest.feature1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SimilarityRequest::_internal_feature1() const {
  return feature1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SimilarityRequest::feature1() const {
  // @@protoc_insertion_point(field_list:cniface.SimilarityRequest.feature1)
  return _internal_feature1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SimilarityRequest::_internal_mutable_feature1() {
  return &feature1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SimilarityRequest::mutable_feature1() {
  // @@protoc_insertion_point(field_mutable_list:cniface.SimilarityRequest.feature1)
  return _internal_mutable_feature1();
}

// repeated float feature2 = 2;
inline int SimilarityRequest::_internal_feature2_size() const {
  return feature2_.size();
}
inline int SimilarityRequest::feature2_size() const {
  return _internal_feature2_size();
}
inline void SimilarityRequest::clear_feature2() {
  feature2_.Clear();
}
inline float SimilarityRequest::_internal_feature2(int index) const {
  return feature2_.Get(index);
}
inline float SimilarityRequest::feature2(int index) const {
  // @@protoc_insertion_point(field_get:cniface.SimilarityRequest.feature2)
  return _internal_feature2(index);
}
inline void SimilarityRequest::set_feature2(int index, float value) {
  feature2_.Set(index, value);
  // @@protoc_insertion_point(field_set:cniface.SimilarityRequest.feature2)
}
inline void SimilarityRequest::_internal_add_feature2(float value) {
  feature2_.Add(value);
}
inline void SimilarityRequest::add_feature2(float value) {
  _internal_add_feature2(value);
  // @@protoc_insertion_point(field_add:cniface.SimilarityRequest.feature2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SimilarityRequest::_internal_feature2() const {
  return feature2_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SimilarityRequest::feature2() const {
  // @@protoc_insertion_point(field_list:cniface.SimilarityRequest.feature2)
  return _internal_feature2();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SimilarityRequest::_internal_mutable_feature2() {
  return &feature2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SimilarityRequest::mutable_feature2() {
  // @@protoc_insertion_point(field_mutable_list:cniface.SimilarityRequest.feature2)
  return _internal_mutable_feature2();
}

// -------------------------------------------------------------------

// SimilarityResponse

// int64 code = 1;
inline void SimilarityResponse::clear_code() {
  code_ = int64_t{0};
}
inline int64_t SimilarityResponse::_internal_code() const {
  return code_;
}
inline int64_t SimilarityResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.SimilarityResponse.code)
  return _internal_code();
}
inline void SimilarityResponse::_internal_set_code(int64_t value) {
  
  code_ = value;
}
inline void SimilarityResponse::set_code(int64_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.SimilarityResponse.code)
}

// string message = 2;
inline void SimilarityResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& SimilarityResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.SimilarityResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimilarityResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.SimilarityResponse.message)
}
inline std::string* SimilarityResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.SimilarityResponse.message)
  return _s;
}
inline const std::string& SimilarityResponse::_internal_message() const {
  return message_.Get();
}
inline void SimilarityResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimilarityResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimilarityResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.SimilarityResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimilarityResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.SimilarityResponse.message)
}

// float similarity = 3;
inline void SimilarityResponse::clear_similarity() {
  similarity_ = 0;
}
inline float SimilarityResponse::_internal_similarity() const {
  return similarity_;
}
inline float SimilarityResponse::similarity() const {
  // @@protoc_insertion_point(field_get:cniface.SimilarityResponse.similarity)
  return _internal_similarity();
}
inline void SimilarityResponse::_internal_set_similarity(float value) {
  
  similarity_ = value;
}
inline void SimilarityResponse::set_similarity(float value) {
  _internal_set_similarity(value);
  // @@protoc_insertion_point(field_set:cniface.SimilarityResponse.similarity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cniface

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cniface_2eproto
