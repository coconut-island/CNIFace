// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cniface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cniface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cniface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cniface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cniface_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cniface_2eproto;
namespace cniface {
class AddOrUpdateItemRequest;
struct AddOrUpdateItemRequestDefaultTypeInternal;
extern AddOrUpdateItemRequestDefaultTypeInternal _AddOrUpdateItemRequest_default_instance_;
class AddOrUpdateItemResponse;
struct AddOrUpdateItemResponseDefaultTypeInternal;
extern AddOrUpdateItemResponseDefaultTypeInternal _AddOrUpdateItemResponse_default_instance_;
class CreateRepositoryRequest;
struct CreateRepositoryRequestDefaultTypeInternal;
extern CreateRepositoryRequestDefaultTypeInternal _CreateRepositoryRequest_default_instance_;
class CreateRepositoryResponse;
struct CreateRepositoryResponseDefaultTypeInternal;
extern CreateRepositoryResponseDefaultTypeInternal _CreateRepositoryResponse_default_instance_;
class DeleteItemRequest;
struct DeleteItemRequestDefaultTypeInternal;
extern DeleteItemRequestDefaultTypeInternal _DeleteItemRequest_default_instance_;
class DeleteItemResponse;
struct DeleteItemResponseDefaultTypeInternal;
extern DeleteItemResponseDefaultTypeInternal _DeleteItemResponse_default_instance_;
class DeleteRepositoryRequest;
struct DeleteRepositoryRequestDefaultTypeInternal;
extern DeleteRepositoryRequestDefaultTypeInternal _DeleteRepositoryRequest_default_instance_;
class DeleteRepositoryResponse;
struct DeleteRepositoryResponseDefaultTypeInternal;
extern DeleteRepositoryResponseDefaultTypeInternal _DeleteRepositoryResponse_default_instance_;
class DetectRequest;
struct DetectRequestDefaultTypeInternal;
extern DetectRequestDefaultTypeInternal _DetectRequest_default_instance_;
class DetectResponse;
struct DetectResponseDefaultTypeInternal;
extern DetectResponseDefaultTypeInternal _DetectResponse_default_instance_;
class DetectResult;
struct DetectResultDefaultTypeInternal;
extern DetectResultDefaultTypeInternal _DetectResult_default_instance_;
class ExistRepositoryRequest;
struct ExistRepositoryRequestDefaultTypeInternal;
extern ExistRepositoryRequestDefaultTypeInternal _ExistRepositoryRequest_default_instance_;
class ExistRepositoryResponse;
struct ExistRepositoryResponseDefaultTypeInternal;
extern ExistRepositoryResponseDefaultTypeInternal _ExistRepositoryResponse_default_instance_;
class ExtractFeatureRequest;
struct ExtractFeatureRequestDefaultTypeInternal;
extern ExtractFeatureRequestDefaultTypeInternal _ExtractFeatureRequest_default_instance_;
class ExtractFeatureResponse;
struct ExtractFeatureResponseDefaultTypeInternal;
extern ExtractFeatureResponseDefaultTypeInternal _ExtractFeatureResponse_default_instance_;
class GenderAgeRequest;
struct GenderAgeRequestDefaultTypeInternal;
extern GenderAgeRequestDefaultTypeInternal _GenderAgeRequest_default_instance_;
class GenderAgeResponse;
struct GenderAgeResponseDefaultTypeInternal;
extern GenderAgeResponseDefaultTypeInternal _GenderAgeResponse_default_instance_;
class ListRepositoryResponse;
struct ListRepositoryResponseDefaultTypeInternal;
extern ListRepositoryResponseDefaultTypeInternal _ListRepositoryResponse_default_instance_;
class OCRRequest;
struct OCRRequestDefaultTypeInternal;
extern OCRRequestDefaultTypeInternal _OCRRequest_default_instance_;
class OCRResponse;
struct OCRResponseDefaultTypeInternal;
extern OCRResponseDefaultTypeInternal _OCRResponse_default_instance_;
class OCRResponseItem;
struct OCRResponseItemDefaultTypeInternal;
extern OCRResponseItemDefaultTypeInternal _OCRResponseItem_default_instance_;
class SearchRequest;
struct SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
struct SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
class SearchResponseItem;
struct SearchResponseItemDefaultTypeInternal;
extern SearchResponseItemDefaultTypeInternal _SearchResponseItem_default_instance_;
class SimilarityRequest;
struct SimilarityRequestDefaultTypeInternal;
extern SimilarityRequestDefaultTypeInternal _SimilarityRequest_default_instance_;
class SimilarityResponse;
struct SimilarityResponseDefaultTypeInternal;
extern SimilarityResponseDefaultTypeInternal _SimilarityResponse_default_instance_;
}  // namespace cniface
PROTOBUF_NAMESPACE_OPEN
template<> ::cniface::AddOrUpdateItemRequest* Arena::CreateMaybeMessage<::cniface::AddOrUpdateItemRequest>(Arena*);
template<> ::cniface::AddOrUpdateItemResponse* Arena::CreateMaybeMessage<::cniface::AddOrUpdateItemResponse>(Arena*);
template<> ::cniface::CreateRepositoryRequest* Arena::CreateMaybeMessage<::cniface::CreateRepositoryRequest>(Arena*);
template<> ::cniface::CreateRepositoryResponse* Arena::CreateMaybeMessage<::cniface::CreateRepositoryResponse>(Arena*);
template<> ::cniface::DeleteItemRequest* Arena::CreateMaybeMessage<::cniface::DeleteItemRequest>(Arena*);
template<> ::cniface::DeleteItemResponse* Arena::CreateMaybeMessage<::cniface::DeleteItemResponse>(Arena*);
template<> ::cniface::DeleteRepositoryRequest* Arena::CreateMaybeMessage<::cniface::DeleteRepositoryRequest>(Arena*);
template<> ::cniface::DeleteRepositoryResponse* Arena::CreateMaybeMessage<::cniface::DeleteRepositoryResponse>(Arena*);
template<> ::cniface::DetectRequest* Arena::CreateMaybeMessage<::cniface::DetectRequest>(Arena*);
template<> ::cniface::DetectResponse* Arena::CreateMaybeMessage<::cniface::DetectResponse>(Arena*);
template<> ::cniface::DetectResult* Arena::CreateMaybeMessage<::cniface::DetectResult>(Arena*);
template<> ::cniface::ExistRepositoryRequest* Arena::CreateMaybeMessage<::cniface::ExistRepositoryRequest>(Arena*);
template<> ::cniface::ExistRepositoryResponse* Arena::CreateMaybeMessage<::cniface::ExistRepositoryResponse>(Arena*);
template<> ::cniface::ExtractFeatureRequest* Arena::CreateMaybeMessage<::cniface::ExtractFeatureRequest>(Arena*);
template<> ::cniface::ExtractFeatureResponse* Arena::CreateMaybeMessage<::cniface::ExtractFeatureResponse>(Arena*);
template<> ::cniface::GenderAgeRequest* Arena::CreateMaybeMessage<::cniface::GenderAgeRequest>(Arena*);
template<> ::cniface::GenderAgeResponse* Arena::CreateMaybeMessage<::cniface::GenderAgeResponse>(Arena*);
template<> ::cniface::ListRepositoryResponse* Arena::CreateMaybeMessage<::cniface::ListRepositoryResponse>(Arena*);
template<> ::cniface::OCRRequest* Arena::CreateMaybeMessage<::cniface::OCRRequest>(Arena*);
template<> ::cniface::OCRResponse* Arena::CreateMaybeMessage<::cniface::OCRResponse>(Arena*);
template<> ::cniface::OCRResponseItem* Arena::CreateMaybeMessage<::cniface::OCRResponseItem>(Arena*);
template<> ::cniface::SearchRequest* Arena::CreateMaybeMessage<::cniface::SearchRequest>(Arena*);
template<> ::cniface::SearchResponse* Arena::CreateMaybeMessage<::cniface::SearchResponse>(Arena*);
template<> ::cniface::SearchResponseItem* Arena::CreateMaybeMessage<::cniface::SearchResponseItem>(Arena*);
template<> ::cniface::SimilarityRequest* Arena::CreateMaybeMessage<::cniface::SimilarityRequest>(Arena*);
template<> ::cniface::SimilarityResponse* Arena::CreateMaybeMessage<::cniface::SimilarityResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cniface {

// ===================================================================

class DetectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.DetectRequest) */ {
 public:
  inline DetectRequest() : DetectRequest(nullptr) {}
  ~DetectRequest() override;
  explicit constexpr DetectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectRequest(const DetectRequest& from);
  DetectRequest(DetectRequest&& from) noexcept
    : DetectRequest() {
    *this = ::std::move(from);
  }

  inline DetectRequest& operator=(const DetectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectRequest& operator=(DetectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectRequest* internal_default_instance() {
    return reinterpret_cast<const DetectRequest*>(
               &_DetectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DetectRequest& a, DetectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DetectRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.DetectRequest";
  }
  protected:
  explicit DetectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
    kFaceImageBase64FieldNumber = 2,
    kScoreFieldNumber = 3,
    kIsReturnRecognitionSubImageFieldNumber = 4,
  };
  // string model = 1;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string faceImageBase64 = 2;
  void clear_faceimagebase64();
  const std::string& faceimagebase64() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_faceimagebase64(ArgT0&& arg0, ArgT... args);
  std::string* mutable_faceimagebase64();
  PROTOBUF_NODISCARD std::string* release_faceimagebase64();
  void set_allocated_faceimagebase64(std::string* faceimagebase64);
  private:
  const std::string& _internal_faceimagebase64() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_faceimagebase64(const std::string& value);
  std::string* _internal_mutable_faceimagebase64();
  public:

  // float score = 3;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // bool isReturnRecognitionSubImage = 4;
  void clear_isreturnrecognitionsubimage();
  bool isreturnrecognitionsubimage() const;
  void set_isreturnrecognitionsubimage(bool value);
  private:
  bool _internal_isreturnrecognitionsubimage() const;
  void _internal_set_isreturnrecognitionsubimage(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.DetectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr faceimagebase64_;
  float score_;
  bool isreturnrecognitionsubimage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class DetectResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.DetectResult) */ {
 public:
  inline DetectResult() : DetectResult(nullptr) {}
  ~DetectResult() override;
  explicit constexpr DetectResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectResult(const DetectResult& from);
  DetectResult(DetectResult&& from) noexcept
    : DetectResult() {
    *this = ::std::move(from);
  }

  inline DetectResult& operator=(const DetectResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectResult& operator=(DetectResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectResult* internal_default_instance() {
    return reinterpret_cast<const DetectResult*>(
               &_DetectResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DetectResult& a, DetectResult& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DetectResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.DetectResult";
  }
  protected:
  explicit DetectResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKpsFieldNumber = 6,
    kSubImageBase64FieldNumber = 8,
    kScoreFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kWFieldNumber = 4,
    kHFieldNumber = 5,
    kMaskScoreFieldNumber = 7,
  };
  // repeated float kps = 6;
  int kps_size() const;
  private:
  int _internal_kps_size() const;
  public:
  void clear_kps();
  private:
  float _internal_kps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_kps() const;
  void _internal_add_kps(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_kps();
  public:
  float kps(int index) const;
  void set_kps(int index, float value);
  void add_kps(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kps();

  // string subImageBase64 = 8;
  void clear_subimagebase64();
  const std::string& subimagebase64() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subimagebase64(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subimagebase64();
  PROTOBUF_NODISCARD std::string* release_subimagebase64();
  void set_allocated_subimagebase64(std::string* subimagebase64);
  private:
  const std::string& _internal_subimagebase64() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subimagebase64(const std::string& value);
  std::string* _internal_mutable_subimagebase64();
  public:

  // float score = 1;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float w = 4;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float h = 5;
  void clear_h();
  float h() const;
  void set_h(float value);
  private:
  float _internal_h() const;
  void _internal_set_h(float value);
  public:

  // float maskScore = 7;
  void clear_maskscore();
  float maskscore() const;
  void set_maskscore(float value);
  private:
  float _internal_maskscore() const;
  void _internal_set_maskscore(float value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.DetectResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subimagebase64_;
  float score_;
  float x_;
  float y_;
  float w_;
  float h_;
  float maskscore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class DetectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.DetectResponse) */ {
 public:
  inline DetectResponse() : DetectResponse(nullptr) {}
  ~DetectResponse() override;
  explicit constexpr DetectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectResponse(const DetectResponse& from);
  DetectResponse(DetectResponse&& from) noexcept
    : DetectResponse() {
    *this = ::std::move(from);
  }

  inline DetectResponse& operator=(const DetectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectResponse& operator=(DetectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectResponse* internal_default_instance() {
    return reinterpret_cast<const DetectResponse*>(
               &_DetectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DetectResponse& a, DetectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DetectResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.DetectResponse";
  }
  protected:
  explicit DetectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 3,
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .cniface.DetectResult results = 3;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::cniface::DetectResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::DetectResult >*
      mutable_results();
  private:
  const ::cniface::DetectResult& _internal_results(int index) const;
  ::cniface::DetectResult* _internal_add_results();
  public:
  const ::cniface::DetectResult& results(int index) const;
  ::cniface::DetectResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::DetectResult >&
      results() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.DetectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::DetectResult > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class ExtractFeatureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.ExtractFeatureRequest) */ {
 public:
  inline ExtractFeatureRequest() : ExtractFeatureRequest(nullptr) {}
  ~ExtractFeatureRequest() override;
  explicit constexpr ExtractFeatureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtractFeatureRequest(const ExtractFeatureRequest& from);
  ExtractFeatureRequest(ExtractFeatureRequest&& from) noexcept
    : ExtractFeatureRequest() {
    *this = ::std::move(from);
  }

  inline ExtractFeatureRequest& operator=(const ExtractFeatureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtractFeatureRequest& operator=(ExtractFeatureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtractFeatureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtractFeatureRequest* internal_default_instance() {
    return reinterpret_cast<const ExtractFeatureRequest*>(
               &_ExtractFeatureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExtractFeatureRequest& a, ExtractFeatureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtractFeatureRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtractFeatureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtractFeatureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtractFeatureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtractFeatureRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExtractFeatureRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtractFeatureRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.ExtractFeatureRequest";
  }
  protected:
  explicit ExtractFeatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKpsFieldNumber = 3,
    kModelFieldNumber = 1,
    kFaceImageBase64FieldNumber = 2,
    kIsDoNormalizeL2FieldNumber = 4,
  };
  // repeated float kps = 3;
  int kps_size() const;
  private:
  int _internal_kps_size() const;
  public:
  void clear_kps();
  private:
  float _internal_kps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_kps() const;
  void _internal_add_kps(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_kps();
  public:
  float kps(int index) const;
  void set_kps(int index, float value);
  void add_kps(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kps();

  // string model = 1;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string faceImageBase64 = 2;
  void clear_faceimagebase64();
  const std::string& faceimagebase64() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_faceimagebase64(ArgT0&& arg0, ArgT... args);
  std::string* mutable_faceimagebase64();
  PROTOBUF_NODISCARD std::string* release_faceimagebase64();
  void set_allocated_faceimagebase64(std::string* faceimagebase64);
  private:
  const std::string& _internal_faceimagebase64() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_faceimagebase64(const std::string& value);
  std::string* _internal_mutable_faceimagebase64();
  public:

  // bool isDoNormalizeL2 = 4;
  void clear_isdonormalizel2();
  bool isdonormalizel2() const;
  void set_isdonormalizel2(bool value);
  private:
  bool _internal_isdonormalizel2() const;
  void _internal_set_isdonormalizel2(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.ExtractFeatureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr faceimagebase64_;
  bool isdonormalizel2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class ExtractFeatureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.ExtractFeatureResponse) */ {
 public:
  inline ExtractFeatureResponse() : ExtractFeatureResponse(nullptr) {}
  ~ExtractFeatureResponse() override;
  explicit constexpr ExtractFeatureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtractFeatureResponse(const ExtractFeatureResponse& from);
  ExtractFeatureResponse(ExtractFeatureResponse&& from) noexcept
    : ExtractFeatureResponse() {
    *this = ::std::move(from);
  }

  inline ExtractFeatureResponse& operator=(const ExtractFeatureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtractFeatureResponse& operator=(ExtractFeatureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtractFeatureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtractFeatureResponse* internal_default_instance() {
    return reinterpret_cast<const ExtractFeatureResponse*>(
               &_ExtractFeatureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ExtractFeatureResponse& a, ExtractFeatureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtractFeatureResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtractFeatureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtractFeatureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtractFeatureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtractFeatureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExtractFeatureResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtractFeatureResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.ExtractFeatureResponse";
  }
  protected:
  explicit ExtractFeatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 3,
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated float feature = 3;
  int feature_size() const;
  private:
  int _internal_feature_size() const;
  public:
  void clear_feature();
  private:
  float _internal_feature(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_feature() const;
  void _internal_add_feature(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_feature();
  public:
  float feature(int index) const;
  void set_feature(int index, float value);
  void add_feature(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      feature() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_feature();

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.ExtractFeatureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > feature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class SimilarityRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.SimilarityRequest) */ {
 public:
  inline SimilarityRequest() : SimilarityRequest(nullptr) {}
  ~SimilarityRequest() override;
  explicit constexpr SimilarityRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimilarityRequest(const SimilarityRequest& from);
  SimilarityRequest(SimilarityRequest&& from) noexcept
    : SimilarityRequest() {
    *this = ::std::move(from);
  }

  inline SimilarityRequest& operator=(const SimilarityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimilarityRequest& operator=(SimilarityRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimilarityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimilarityRequest* internal_default_instance() {
    return reinterpret_cast<const SimilarityRequest*>(
               &_SimilarityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SimilarityRequest& a, SimilarityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SimilarityRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimilarityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimilarityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimilarityRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimilarityRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimilarityRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimilarityRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.SimilarityRequest";
  }
  protected:
  explicit SimilarityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeature1FieldNumber = 1,
    kFeature2FieldNumber = 2,
  };
  // repeated float feature1 = 1;
  int feature1_size() const;
  private:
  int _internal_feature1_size() const;
  public:
  void clear_feature1();
  private:
  float _internal_feature1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_feature1() const;
  void _internal_add_feature1(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_feature1();
  public:
  float feature1(int index) const;
  void set_feature1(int index, float value);
  void add_feature1(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      feature1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_feature1();

  // repeated float feature2 = 2;
  int feature2_size() const;
  private:
  int _internal_feature2_size() const;
  public:
  void clear_feature2();
  private:
  float _internal_feature2(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_feature2() const;
  void _internal_add_feature2(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_feature2();
  public:
  float feature2(int index) const;
  void set_feature2(int index, float value);
  void add_feature2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      feature2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_feature2();

  // @@protoc_insertion_point(class_scope:cniface.SimilarityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > feature1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > feature2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class SimilarityResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.SimilarityResponse) */ {
 public:
  inline SimilarityResponse() : SimilarityResponse(nullptr) {}
  ~SimilarityResponse() override;
  explicit constexpr SimilarityResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimilarityResponse(const SimilarityResponse& from);
  SimilarityResponse(SimilarityResponse&& from) noexcept
    : SimilarityResponse() {
    *this = ::std::move(from);
  }

  inline SimilarityResponse& operator=(const SimilarityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimilarityResponse& operator=(SimilarityResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimilarityResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimilarityResponse* internal_default_instance() {
    return reinterpret_cast<const SimilarityResponse*>(
               &_SimilarityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SimilarityResponse& a, SimilarityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SimilarityResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimilarityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimilarityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimilarityResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimilarityResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SimilarityResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimilarityResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.SimilarityResponse";
  }
  protected:
  explicit SimilarityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
    kSimilarityFieldNumber = 3,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // float similarity = 3;
  void clear_similarity();
  float similarity() const;
  void set_similarity(float value);
  private:
  float _internal_similarity() const;
  void _internal_set_similarity(float value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.SimilarityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int32_t code_;
  float similarity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class GenderAgeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.GenderAgeRequest) */ {
 public:
  inline GenderAgeRequest() : GenderAgeRequest(nullptr) {}
  ~GenderAgeRequest() override;
  explicit constexpr GenderAgeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenderAgeRequest(const GenderAgeRequest& from);
  GenderAgeRequest(GenderAgeRequest&& from) noexcept
    : GenderAgeRequest() {
    *this = ::std::move(from);
  }

  inline GenderAgeRequest& operator=(const GenderAgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenderAgeRequest& operator=(GenderAgeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenderAgeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenderAgeRequest* internal_default_instance() {
    return reinterpret_cast<const GenderAgeRequest*>(
               &_GenderAgeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GenderAgeRequest& a, GenderAgeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenderAgeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenderAgeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenderAgeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenderAgeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenderAgeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenderAgeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenderAgeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.GenderAgeRequest";
  }
  protected:
  explicit GenderAgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKpsFieldNumber = 3,
    kModelFieldNumber = 1,
    kFaceImageBase64FieldNumber = 2,
  };
  // repeated float kps = 3;
  int kps_size() const;
  private:
  int _internal_kps_size() const;
  public:
  void clear_kps();
  private:
  float _internal_kps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_kps() const;
  void _internal_add_kps(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_kps();
  public:
  float kps(int index) const;
  void set_kps(int index, float value);
  void add_kps(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kps();

  // string model = 1;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string faceImageBase64 = 2;
  void clear_faceimagebase64();
  const std::string& faceimagebase64() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_faceimagebase64(ArgT0&& arg0, ArgT... args);
  std::string* mutable_faceimagebase64();
  PROTOBUF_NODISCARD std::string* release_faceimagebase64();
  void set_allocated_faceimagebase64(std::string* faceimagebase64);
  private:
  const std::string& _internal_faceimagebase64() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_faceimagebase64(const std::string& value);
  std::string* _internal_mutable_faceimagebase64();
  public:

  // @@protoc_insertion_point(class_scope:cniface.GenderAgeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr faceimagebase64_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class GenderAgeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.GenderAgeResponse) */ {
 public:
  inline GenderAgeResponse() : GenderAgeResponse(nullptr) {}
  ~GenderAgeResponse() override;
  explicit constexpr GenderAgeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenderAgeResponse(const GenderAgeResponse& from);
  GenderAgeResponse(GenderAgeResponse&& from) noexcept
    : GenderAgeResponse() {
    *this = ::std::move(from);
  }

  inline GenderAgeResponse& operator=(const GenderAgeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenderAgeResponse& operator=(GenderAgeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenderAgeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenderAgeResponse* internal_default_instance() {
    return reinterpret_cast<const GenderAgeResponse*>(
               &_GenderAgeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GenderAgeResponse& a, GenderAgeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenderAgeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenderAgeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenderAgeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenderAgeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenderAgeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenderAgeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenderAgeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.GenderAgeResponse";
  }
  protected:
  explicit GenderAgeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
    kGenderFieldNumber = 3,
    kAgeFieldNumber = 4,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // int32 gender = 3;
  void clear_gender();
  int32_t gender() const;
  void set_gender(int32_t value);
  private:
  int32_t _internal_gender() const;
  void _internal_set_gender(int32_t value);
  public:

  // int32 age = 4;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.GenderAgeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int32_t code_;
  int32_t gender_;
  int32_t age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class CreateRepositoryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.CreateRepositoryRequest) */ {
 public:
  inline CreateRepositoryRequest() : CreateRepositoryRequest(nullptr) {}
  ~CreateRepositoryRequest() override;
  explicit constexpr CreateRepositoryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRepositoryRequest(const CreateRepositoryRequest& from);
  CreateRepositoryRequest(CreateRepositoryRequest&& from) noexcept
    : CreateRepositoryRequest() {
    *this = ::std::move(from);
  }

  inline CreateRepositoryRequest& operator=(const CreateRepositoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRepositoryRequest& operator=(CreateRepositoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRepositoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRepositoryRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRepositoryRequest*>(
               &_CreateRepositoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreateRepositoryRequest& a, CreateRepositoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRepositoryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRepositoryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRepositoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRepositoryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRepositoryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRepositoryRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRepositoryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.CreateRepositoryRequest";
  }
  protected:
  explicit CreateRepositoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepoNameFieldNumber = 1,
  };
  // string repoName = 1;
  void clear_reponame();
  const std::string& reponame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reponame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reponame();
  PROTOBUF_NODISCARD std::string* release_reponame();
  void set_allocated_reponame(std::string* reponame);
  private:
  const std::string& _internal_reponame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reponame(const std::string& value);
  std::string* _internal_mutable_reponame();
  public:

  // @@protoc_insertion_point(class_scope:cniface.CreateRepositoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reponame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class CreateRepositoryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.CreateRepositoryResponse) */ {
 public:
  inline CreateRepositoryResponse() : CreateRepositoryResponse(nullptr) {}
  ~CreateRepositoryResponse() override;
  explicit constexpr CreateRepositoryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRepositoryResponse(const CreateRepositoryResponse& from);
  CreateRepositoryResponse(CreateRepositoryResponse&& from) noexcept
    : CreateRepositoryResponse() {
    *this = ::std::move(from);
  }

  inline CreateRepositoryResponse& operator=(const CreateRepositoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRepositoryResponse& operator=(CreateRepositoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRepositoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRepositoryResponse* internal_default_instance() {
    return reinterpret_cast<const CreateRepositoryResponse*>(
               &_CreateRepositoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CreateRepositoryResponse& a, CreateRepositoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRepositoryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRepositoryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRepositoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRepositoryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRepositoryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRepositoryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRepositoryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.CreateRepositoryResponse";
  }
  protected:
  explicit CreateRepositoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.CreateRepositoryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class DeleteRepositoryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.DeleteRepositoryRequest) */ {
 public:
  inline DeleteRepositoryRequest() : DeleteRepositoryRequest(nullptr) {}
  ~DeleteRepositoryRequest() override;
  explicit constexpr DeleteRepositoryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRepositoryRequest(const DeleteRepositoryRequest& from);
  DeleteRepositoryRequest(DeleteRepositoryRequest&& from) noexcept
    : DeleteRepositoryRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRepositoryRequest& operator=(const DeleteRepositoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRepositoryRequest& operator=(DeleteRepositoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRepositoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRepositoryRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRepositoryRequest*>(
               &_DeleteRepositoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeleteRepositoryRequest& a, DeleteRepositoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRepositoryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRepositoryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRepositoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRepositoryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRepositoryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRepositoryRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRepositoryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.DeleteRepositoryRequest";
  }
  protected:
  explicit DeleteRepositoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepoNameFieldNumber = 1,
  };
  // string repoName = 1;
  void clear_reponame();
  const std::string& reponame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reponame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reponame();
  PROTOBUF_NODISCARD std::string* release_reponame();
  void set_allocated_reponame(std::string* reponame);
  private:
  const std::string& _internal_reponame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reponame(const std::string& value);
  std::string* _internal_mutable_reponame();
  public:

  // @@protoc_insertion_point(class_scope:cniface.DeleteRepositoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reponame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class DeleteRepositoryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.DeleteRepositoryResponse) */ {
 public:
  inline DeleteRepositoryResponse() : DeleteRepositoryResponse(nullptr) {}
  ~DeleteRepositoryResponse() override;
  explicit constexpr DeleteRepositoryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRepositoryResponse(const DeleteRepositoryResponse& from);
  DeleteRepositoryResponse(DeleteRepositoryResponse&& from) noexcept
    : DeleteRepositoryResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRepositoryResponse& operator=(const DeleteRepositoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRepositoryResponse& operator=(DeleteRepositoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRepositoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRepositoryResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRepositoryResponse*>(
               &_DeleteRepositoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeleteRepositoryResponse& a, DeleteRepositoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRepositoryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRepositoryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRepositoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRepositoryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRepositoryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRepositoryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRepositoryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.DeleteRepositoryResponse";
  }
  protected:
  explicit DeleteRepositoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.DeleteRepositoryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class ExistRepositoryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.ExistRepositoryRequest) */ {
 public:
  inline ExistRepositoryRequest() : ExistRepositoryRequest(nullptr) {}
  ~ExistRepositoryRequest() override;
  explicit constexpr ExistRepositoryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExistRepositoryRequest(const ExistRepositoryRequest& from);
  ExistRepositoryRequest(ExistRepositoryRequest&& from) noexcept
    : ExistRepositoryRequest() {
    *this = ::std::move(from);
  }

  inline ExistRepositoryRequest& operator=(const ExistRepositoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExistRepositoryRequest& operator=(ExistRepositoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExistRepositoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExistRepositoryRequest* internal_default_instance() {
    return reinterpret_cast<const ExistRepositoryRequest*>(
               &_ExistRepositoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ExistRepositoryRequest& a, ExistRepositoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExistRepositoryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExistRepositoryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExistRepositoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExistRepositoryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExistRepositoryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExistRepositoryRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExistRepositoryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.ExistRepositoryRequest";
  }
  protected:
  explicit ExistRepositoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepoNameFieldNumber = 1,
  };
  // string repoName = 1;
  void clear_reponame();
  const std::string& reponame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reponame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reponame();
  PROTOBUF_NODISCARD std::string* release_reponame();
  void set_allocated_reponame(std::string* reponame);
  private:
  const std::string& _internal_reponame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reponame(const std::string& value);
  std::string* _internal_mutable_reponame();
  public:

  // @@protoc_insertion_point(class_scope:cniface.ExistRepositoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reponame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class ExistRepositoryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.ExistRepositoryResponse) */ {
 public:
  inline ExistRepositoryResponse() : ExistRepositoryResponse(nullptr) {}
  ~ExistRepositoryResponse() override;
  explicit constexpr ExistRepositoryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExistRepositoryResponse(const ExistRepositoryResponse& from);
  ExistRepositoryResponse(ExistRepositoryResponse&& from) noexcept
    : ExistRepositoryResponse() {
    *this = ::std::move(from);
  }

  inline ExistRepositoryResponse& operator=(const ExistRepositoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExistRepositoryResponse& operator=(ExistRepositoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExistRepositoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExistRepositoryResponse* internal_default_instance() {
    return reinterpret_cast<const ExistRepositoryResponse*>(
               &_ExistRepositoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ExistRepositoryResponse& a, ExistRepositoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExistRepositoryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExistRepositoryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExistRepositoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExistRepositoryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExistRepositoryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExistRepositoryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExistRepositoryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.ExistRepositoryResponse";
  }
  protected:
  explicit ExistRepositoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
    kExistFieldNumber = 3,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // bool exist = 3;
  void clear_exist();
  bool exist() const;
  void set_exist(bool value);
  private:
  bool _internal_exist() const;
  void _internal_set_exist(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.ExistRepositoryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int32_t code_;
  bool exist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class ListRepositoryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.ListRepositoryResponse) */ {
 public:
  inline ListRepositoryResponse() : ListRepositoryResponse(nullptr) {}
  ~ListRepositoryResponse() override;
  explicit constexpr ListRepositoryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRepositoryResponse(const ListRepositoryResponse& from);
  ListRepositoryResponse(ListRepositoryResponse&& from) noexcept
    : ListRepositoryResponse() {
    *this = ::std::move(from);
  }

  inline ListRepositoryResponse& operator=(const ListRepositoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRepositoryResponse& operator=(ListRepositoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRepositoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRepositoryResponse* internal_default_instance() {
    return reinterpret_cast<const ListRepositoryResponse*>(
               &_ListRepositoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ListRepositoryResponse& a, ListRepositoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRepositoryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRepositoryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRepositoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRepositoryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRepositoryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListRepositoryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRepositoryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.ListRepositoryResponse";
  }
  protected:
  explicit ListRepositoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 3,
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated string names = 3;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.ListRepositoryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class AddOrUpdateItemRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.AddOrUpdateItemRequest) */ {
 public:
  inline AddOrUpdateItemRequest() : AddOrUpdateItemRequest(nullptr) {}
  ~AddOrUpdateItemRequest() override;
  explicit constexpr AddOrUpdateItemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddOrUpdateItemRequest(const AddOrUpdateItemRequest& from);
  AddOrUpdateItemRequest(AddOrUpdateItemRequest&& from) noexcept
    : AddOrUpdateItemRequest() {
    *this = ::std::move(from);
  }

  inline AddOrUpdateItemRequest& operator=(const AddOrUpdateItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOrUpdateItemRequest& operator=(AddOrUpdateItemRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddOrUpdateItemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddOrUpdateItemRequest* internal_default_instance() {
    return reinterpret_cast<const AddOrUpdateItemRequest*>(
               &_AddOrUpdateItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AddOrUpdateItemRequest& a, AddOrUpdateItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOrUpdateItemRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOrUpdateItemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddOrUpdateItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddOrUpdateItemRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddOrUpdateItemRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddOrUpdateItemRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrUpdateItemRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.AddOrUpdateItemRequest";
  }
  protected:
  explicit AddOrUpdateItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 3,
    kRepoNameFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // repeated float feature = 3;
  int feature_size() const;
  private:
  int _internal_feature_size() const;
  public:
  void clear_feature();
  private:
  float _internal_feature(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_feature() const;
  void _internal_add_feature(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_feature();
  public:
  float feature(int index) const;
  void set_feature(int index, float value);
  void add_feature(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      feature() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_feature();

  // string repoName = 1;
  void clear_reponame();
  const std::string& reponame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reponame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reponame();
  PROTOBUF_NODISCARD std::string* release_reponame();
  void set_allocated_reponame(std::string* reponame);
  private:
  const std::string& _internal_reponame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reponame(const std::string& value);
  std::string* _internal_mutable_reponame();
  public:

  // int64 id = 2;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.AddOrUpdateItemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > feature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reponame_;
  int64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class AddOrUpdateItemResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.AddOrUpdateItemResponse) */ {
 public:
  inline AddOrUpdateItemResponse() : AddOrUpdateItemResponse(nullptr) {}
  ~AddOrUpdateItemResponse() override;
  explicit constexpr AddOrUpdateItemResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddOrUpdateItemResponse(const AddOrUpdateItemResponse& from);
  AddOrUpdateItemResponse(AddOrUpdateItemResponse&& from) noexcept
    : AddOrUpdateItemResponse() {
    *this = ::std::move(from);
  }

  inline AddOrUpdateItemResponse& operator=(const AddOrUpdateItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOrUpdateItemResponse& operator=(AddOrUpdateItemResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddOrUpdateItemResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddOrUpdateItemResponse* internal_default_instance() {
    return reinterpret_cast<const AddOrUpdateItemResponse*>(
               &_AddOrUpdateItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AddOrUpdateItemResponse& a, AddOrUpdateItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOrUpdateItemResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOrUpdateItemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddOrUpdateItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddOrUpdateItemResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddOrUpdateItemResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddOrUpdateItemResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrUpdateItemResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.AddOrUpdateItemResponse";
  }
  protected:
  explicit AddOrUpdateItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.AddOrUpdateItemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class DeleteItemRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.DeleteItemRequest) */ {
 public:
  inline DeleteItemRequest() : DeleteItemRequest(nullptr) {}
  ~DeleteItemRequest() override;
  explicit constexpr DeleteItemRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteItemRequest(const DeleteItemRequest& from);
  DeleteItemRequest(DeleteItemRequest&& from) noexcept
    : DeleteItemRequest() {
    *this = ::std::move(from);
  }

  inline DeleteItemRequest& operator=(const DeleteItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteItemRequest& operator=(DeleteItemRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteItemRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteItemRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteItemRequest*>(
               &_DeleteItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DeleteItemRequest& a, DeleteItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteItemRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteItemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteItemRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteItemRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteItemRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteItemRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.DeleteItemRequest";
  }
  protected:
  explicit DeleteItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepoNameFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string repoName = 1;
  void clear_reponame();
  const std::string& reponame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reponame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reponame();
  PROTOBUF_NODISCARD std::string* release_reponame();
  void set_allocated_reponame(std::string* reponame);
  private:
  const std::string& _internal_reponame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reponame(const std::string& value);
  std::string* _internal_mutable_reponame();
  public:

  // int64 id = 2;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.DeleteItemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reponame_;
  int64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class DeleteItemResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.DeleteItemResponse) */ {
 public:
  inline DeleteItemResponse() : DeleteItemResponse(nullptr) {}
  ~DeleteItemResponse() override;
  explicit constexpr DeleteItemResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteItemResponse(const DeleteItemResponse& from);
  DeleteItemResponse(DeleteItemResponse&& from) noexcept
    : DeleteItemResponse() {
    *this = ::std::move(from);
  }

  inline DeleteItemResponse& operator=(const DeleteItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteItemResponse& operator=(DeleteItemResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteItemResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteItemResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteItemResponse*>(
               &_DeleteItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DeleteItemResponse& a, DeleteItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteItemResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteItemResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteItemResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteItemResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteItemResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteItemResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.DeleteItemResponse";
  }
  protected:
  explicit DeleteItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.DeleteItemResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class SearchResponseItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.SearchResponseItem) */ {
 public:
  inline SearchResponseItem() : SearchResponseItem(nullptr) {}
  ~SearchResponseItem() override;
  explicit constexpr SearchResponseItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResponseItem(const SearchResponseItem& from);
  SearchResponseItem(SearchResponseItem&& from) noexcept
    : SearchResponseItem() {
    *this = ::std::move(from);
  }

  inline SearchResponseItem& operator=(const SearchResponseItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponseItem& operator=(SearchResponseItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResponseItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResponseItem* internal_default_instance() {
    return reinterpret_cast<const SearchResponseItem*>(
               &_SearchResponseItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SearchResponseItem& a, SearchResponseItem& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponseItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResponseItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResponseItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResponseItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResponseItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchResponseItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponseItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.SearchResponseItem";
  }
  protected:
  explicit SearchResponseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // float score = 2;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.SearchResponseItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t id_;
  float score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {}
  ~SearchRequest() override;
  explicit constexpr SearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.SearchRequest";
  }
  protected:
  explicit SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 3,
    kRepoNameFieldNumber = 1,
    kTopkFieldNumber = 2,
  };
  // repeated float feature = 3;
  int feature_size() const;
  private:
  int _internal_feature_size() const;
  public:
  void clear_feature();
  private:
  float _internal_feature(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_feature() const;
  void _internal_add_feature(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_feature();
  public:
  float feature(int index) const;
  void set_feature(int index, float value);
  void add_feature(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      feature() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_feature();

  // string repoName = 1;
  void clear_reponame();
  const std::string& reponame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reponame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reponame();
  PROTOBUF_NODISCARD std::string* release_reponame();
  void set_allocated_reponame(std::string* reponame);
  private:
  const std::string& _internal_reponame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reponame(const std::string& value);
  std::string* _internal_mutable_reponame();
  public:

  // int32 topk = 2;
  void clear_topk();
  int32_t topk() const;
  void set_topk(int32_t value);
  private:
  int32_t _internal_topk() const;
  void _internal_set_topk(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > feature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reponame_;
  int32_t topk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class SearchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.SearchResponse) */ {
 public:
  inline SearchResponse() : SearchResponse(nullptr) {}
  ~SearchResponse() override;
  explicit constexpr SearchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResponse(const SearchResponse& from);
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.SearchResponse";
  }
  protected:
  explicit SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 3,
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .cniface.SearchResponseItem results = 3;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::cniface::SearchResponseItem* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::SearchResponseItem >*
      mutable_results();
  private:
  const ::cniface::SearchResponseItem& _internal_results(int index) const;
  ::cniface::SearchResponseItem* _internal_add_results();
  public:
  const ::cniface::SearchResponseItem& results(int index) const;
  ::cniface::SearchResponseItem* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::SearchResponseItem >&
      results() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.SearchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::SearchResponseItem > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class OCRRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.OCRRequest) */ {
 public:
  inline OCRRequest() : OCRRequest(nullptr) {}
  ~OCRRequest() override;
  explicit constexpr OCRRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OCRRequest(const OCRRequest& from);
  OCRRequest(OCRRequest&& from) noexcept
    : OCRRequest() {
    *this = ::std::move(from);
  }

  inline OCRRequest& operator=(const OCRRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OCRRequest& operator=(OCRRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OCRRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OCRRequest* internal_default_instance() {
    return reinterpret_cast<const OCRRequest*>(
               &_OCRRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(OCRRequest& a, OCRRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OCRRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OCRRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OCRRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OCRRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OCRRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OCRRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OCRRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.OCRRequest";
  }
  protected:
  explicit OCRRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageBase64FieldNumber = 1,
    kIsClsFieldNumber = 2,
    kIsRecFieldNumber = 3,
  };
  // string imageBase64 = 1;
  void clear_imagebase64();
  const std::string& imagebase64() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imagebase64(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imagebase64();
  PROTOBUF_NODISCARD std::string* release_imagebase64();
  void set_allocated_imagebase64(std::string* imagebase64);
  private:
  const std::string& _internal_imagebase64() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imagebase64(const std::string& value);
  std::string* _internal_mutable_imagebase64();
  public:

  // bool isCls = 2;
  void clear_iscls();
  bool iscls() const;
  void set_iscls(bool value);
  private:
  bool _internal_iscls() const;
  void _internal_set_iscls(bool value);
  public:

  // bool isRec = 3;
  void clear_isrec();
  bool isrec() const;
  void set_isrec(bool value);
  private:
  bool _internal_isrec() const;
  void _internal_set_isrec(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.OCRRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagebase64_;
  bool iscls_;
  bool isrec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class OCRResponseItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.OCRResponseItem) */ {
 public:
  inline OCRResponseItem() : OCRResponseItem(nullptr) {}
  ~OCRResponseItem() override;
  explicit constexpr OCRResponseItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OCRResponseItem(const OCRResponseItem& from);
  OCRResponseItem(OCRResponseItem&& from) noexcept
    : OCRResponseItem() {
    *this = ::std::move(from);
  }

  inline OCRResponseItem& operator=(const OCRResponseItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline OCRResponseItem& operator=(OCRResponseItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OCRResponseItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const OCRResponseItem* internal_default_instance() {
    return reinterpret_cast<const OCRResponseItem*>(
               &_OCRResponseItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(OCRResponseItem& a, OCRResponseItem& b) {
    a.Swap(&b);
  }
  inline void Swap(OCRResponseItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OCRResponseItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OCRResponseItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OCRResponseItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OCRResponseItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OCRResponseItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OCRResponseItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.OCRResponseItem";
  }
  protected:
  explicit OCRResponseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kTextFieldNumber = 3,
    kScoreFieldNumber = 2,
    kClsScoreFieldNumber = 4,
    kClsLabelFieldNumber = 5,
  };
  // repeated float position = 1;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  float _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_position() const;
  void _internal_add_position(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_position();
  public:
  float position(int index) const;
  void set_position(int index, float value);
  void add_position(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_position();

  // string text = 3;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // float score = 2;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // float clsScore = 4;
  void clear_clsscore();
  float clsscore() const;
  void set_clsscore(float value);
  private:
  float _internal_clsscore() const;
  void _internal_set_clsscore(float value);
  public:

  // int32 clsLabel = 5;
  void clear_clslabel();
  int32_t clslabel() const;
  void set_clslabel(int32_t value);
  private:
  int32_t _internal_clslabel() const;
  void _internal_set_clslabel(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.OCRResponseItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > position_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  float score_;
  float clsscore_;
  int32_t clslabel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// -------------------------------------------------------------------

class OCRResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.OCRResponse) */ {
 public:
  inline OCRResponse() : OCRResponse(nullptr) {}
  ~OCRResponse() override;
  explicit constexpr OCRResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OCRResponse(const OCRResponse& from);
  OCRResponse(OCRResponse&& from) noexcept
    : OCRResponse() {
    *this = ::std::move(from);
  }

  inline OCRResponse& operator=(const OCRResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OCRResponse& operator=(OCRResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OCRResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OCRResponse* internal_default_instance() {
    return reinterpret_cast<const OCRResponse*>(
               &_OCRResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(OCRResponse& a, OCRResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OCRResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OCRResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OCRResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OCRResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OCRResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OCRResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OCRResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.OCRResponse";
  }
  protected:
  explicit OCRResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 3,
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .cniface.OCRResponseItem results = 3;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::cniface::OCRResponseItem* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::OCRResponseItem >*
      mutable_results();
  private:
  const ::cniface::OCRResponseItem& _internal_results(int index) const;
  ::cniface::OCRResponseItem* _internal_add_results();
  public:
  const ::cniface::OCRResponseItem& results(int index) const;
  ::cniface::OCRResponseItem* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::OCRResponseItem >&
      results() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.OCRResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::OCRResponseItem > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cniface_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DetectRequest

// string model = 1;
inline void DetectRequest::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& DetectRequest::model() const {
  // @@protoc_insertion_point(field_get:cniface.DetectRequest.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetectRequest::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.DetectRequest.model)
}
inline std::string* DetectRequest::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:cniface.DetectRequest.model)
  return _s;
}
inline const std::string& DetectRequest::_internal_model() const {
  return model_.Get();
}
inline void DetectRequest::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DetectRequest::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DetectRequest::release_model() {
  // @@protoc_insertion_point(field_release:cniface.DetectRequest.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DetectRequest::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.DetectRequest.model)
}

// string faceImageBase64 = 2;
inline void DetectRequest::clear_faceimagebase64() {
  faceimagebase64_.ClearToEmpty();
}
inline const std::string& DetectRequest::faceimagebase64() const {
  // @@protoc_insertion_point(field_get:cniface.DetectRequest.faceImageBase64)
  return _internal_faceimagebase64();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetectRequest::set_faceimagebase64(ArgT0&& arg0, ArgT... args) {
 
 faceimagebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.DetectRequest.faceImageBase64)
}
inline std::string* DetectRequest::mutable_faceimagebase64() {
  std::string* _s = _internal_mutable_faceimagebase64();
  // @@protoc_insertion_point(field_mutable:cniface.DetectRequest.faceImageBase64)
  return _s;
}
inline const std::string& DetectRequest::_internal_faceimagebase64() const {
  return faceimagebase64_.Get();
}
inline void DetectRequest::_internal_set_faceimagebase64(const std::string& value) {
  
  faceimagebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DetectRequest::_internal_mutable_faceimagebase64() {
  
  return faceimagebase64_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DetectRequest::release_faceimagebase64() {
  // @@protoc_insertion_point(field_release:cniface.DetectRequest.faceImageBase64)
  return faceimagebase64_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DetectRequest::set_allocated_faceimagebase64(std::string* faceimagebase64) {
  if (faceimagebase64 != nullptr) {
    
  } else {
    
  }
  faceimagebase64_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), faceimagebase64,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (faceimagebase64_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    faceimagebase64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.DetectRequest.faceImageBase64)
}

// float score = 3;
inline void DetectRequest::clear_score() {
  score_ = 0;
}
inline float DetectRequest::_internal_score() const {
  return score_;
}
inline float DetectRequest::score() const {
  // @@protoc_insertion_point(field_get:cniface.DetectRequest.score)
  return _internal_score();
}
inline void DetectRequest::_internal_set_score(float value) {
  
  score_ = value;
}
inline void DetectRequest::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:cniface.DetectRequest.score)
}

// bool isReturnRecognitionSubImage = 4;
inline void DetectRequest::clear_isreturnrecognitionsubimage() {
  isreturnrecognitionsubimage_ = false;
}
inline bool DetectRequest::_internal_isreturnrecognitionsubimage() const {
  return isreturnrecognitionsubimage_;
}
inline bool DetectRequest::isreturnrecognitionsubimage() const {
  // @@protoc_insertion_point(field_get:cniface.DetectRequest.isReturnRecognitionSubImage)
  return _internal_isreturnrecognitionsubimage();
}
inline void DetectRequest::_internal_set_isreturnrecognitionsubimage(bool value) {
  
  isreturnrecognitionsubimage_ = value;
}
inline void DetectRequest::set_isreturnrecognitionsubimage(bool value) {
  _internal_set_isreturnrecognitionsubimage(value);
  // @@protoc_insertion_point(field_set:cniface.DetectRequest.isReturnRecognitionSubImage)
}

// -------------------------------------------------------------------

// DetectResult

// float score = 1;
inline void DetectResult::clear_score() {
  score_ = 0;
}
inline float DetectResult::_internal_score() const {
  return score_;
}
inline float DetectResult::score() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.score)
  return _internal_score();
}
inline void DetectResult::_internal_set_score(float value) {
  
  score_ = value;
}
inline void DetectResult::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.score)
}

// float x = 2;
inline void DetectResult::clear_x() {
  x_ = 0;
}
inline float DetectResult::_internal_x() const {
  return x_;
}
inline float DetectResult::x() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.x)
  return _internal_x();
}
inline void DetectResult::_internal_set_x(float value) {
  
  x_ = value;
}
inline void DetectResult::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.x)
}

// float y = 3;
inline void DetectResult::clear_y() {
  y_ = 0;
}
inline float DetectResult::_internal_y() const {
  return y_;
}
inline float DetectResult::y() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.y)
  return _internal_y();
}
inline void DetectResult::_internal_set_y(float value) {
  
  y_ = value;
}
inline void DetectResult::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.y)
}

// float w = 4;
inline void DetectResult::clear_w() {
  w_ = 0;
}
inline float DetectResult::_internal_w() const {
  return w_;
}
inline float DetectResult::w() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.w)
  return _internal_w();
}
inline void DetectResult::_internal_set_w(float value) {
  
  w_ = value;
}
inline void DetectResult::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.w)
}

// float h = 5;
inline void DetectResult::clear_h() {
  h_ = 0;
}
inline float DetectResult::_internal_h() const {
  return h_;
}
inline float DetectResult::h() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.h)
  return _internal_h();
}
inline void DetectResult::_internal_set_h(float value) {
  
  h_ = value;
}
inline void DetectResult::set_h(float value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.h)
}

// repeated float kps = 6;
inline int DetectResult::_internal_kps_size() const {
  return kps_.size();
}
inline int DetectResult::kps_size() const {
  return _internal_kps_size();
}
inline void DetectResult::clear_kps() {
  kps_.Clear();
}
inline float DetectResult::_internal_kps(int index) const {
  return kps_.Get(index);
}
inline float DetectResult::kps(int index) const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.kps)
  return _internal_kps(index);
}
inline void DetectResult::set_kps(int index, float value) {
  kps_.Set(index, value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.kps)
}
inline void DetectResult::_internal_add_kps(float value) {
  kps_.Add(value);
}
inline void DetectResult::add_kps(float value) {
  _internal_add_kps(value);
  // @@protoc_insertion_point(field_add:cniface.DetectResult.kps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DetectResult::_internal_kps() const {
  return kps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DetectResult::kps() const {
  // @@protoc_insertion_point(field_list:cniface.DetectResult.kps)
  return _internal_kps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DetectResult::_internal_mutable_kps() {
  return &kps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DetectResult::mutable_kps() {
  // @@protoc_insertion_point(field_mutable_list:cniface.DetectResult.kps)
  return _internal_mutable_kps();
}

// float maskScore = 7;
inline void DetectResult::clear_maskscore() {
  maskscore_ = 0;
}
inline float DetectResult::_internal_maskscore() const {
  return maskscore_;
}
inline float DetectResult::maskscore() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.maskScore)
  return _internal_maskscore();
}
inline void DetectResult::_internal_set_maskscore(float value) {
  
  maskscore_ = value;
}
inline void DetectResult::set_maskscore(float value) {
  _internal_set_maskscore(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResult.maskScore)
}

// string subImageBase64 = 8;
inline void DetectResult::clear_subimagebase64() {
  subimagebase64_.ClearToEmpty();
}
inline const std::string& DetectResult::subimagebase64() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResult.subImageBase64)
  return _internal_subimagebase64();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetectResult::set_subimagebase64(ArgT0&& arg0, ArgT... args) {
 
 subimagebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.DetectResult.subImageBase64)
}
inline std::string* DetectResult::mutable_subimagebase64() {
  std::string* _s = _internal_mutable_subimagebase64();
  // @@protoc_insertion_point(field_mutable:cniface.DetectResult.subImageBase64)
  return _s;
}
inline const std::string& DetectResult::_internal_subimagebase64() const {
  return subimagebase64_.Get();
}
inline void DetectResult::_internal_set_subimagebase64(const std::string& value) {
  
  subimagebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DetectResult::_internal_mutable_subimagebase64() {
  
  return subimagebase64_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DetectResult::release_subimagebase64() {
  // @@protoc_insertion_point(field_release:cniface.DetectResult.subImageBase64)
  return subimagebase64_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DetectResult::set_allocated_subimagebase64(std::string* subimagebase64) {
  if (subimagebase64 != nullptr) {
    
  } else {
    
  }
  subimagebase64_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subimagebase64,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subimagebase64_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subimagebase64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.DetectResult.subImageBase64)
}

// -------------------------------------------------------------------

// DetectResponse

// int32 code = 1;
inline void DetectResponse::clear_code() {
  code_ = 0;
}
inline int32_t DetectResponse::_internal_code() const {
  return code_;
}
inline int32_t DetectResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResponse.code)
  return _internal_code();
}
inline void DetectResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void DetectResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.DetectResponse.code)
}

// string message = 2;
inline void DetectResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& DetectResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.DetectResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DetectResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.DetectResponse.message)
}
inline std::string* DetectResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.DetectResponse.message)
  return _s;
}
inline const std::string& DetectResponse::_internal_message() const {
  return message_.Get();
}
inline void DetectResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DetectResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DetectResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.DetectResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DetectResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.DetectResponse.message)
}

// repeated .cniface.DetectResult results = 3;
inline int DetectResponse::_internal_results_size() const {
  return results_.size();
}
inline int DetectResponse::results_size() const {
  return _internal_results_size();
}
inline void DetectResponse::clear_results() {
  results_.Clear();
}
inline ::cniface::DetectResult* DetectResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:cniface.DetectResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::DetectResult >*
DetectResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:cniface.DetectResponse.results)
  return &results_;
}
inline const ::cniface::DetectResult& DetectResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::cniface::DetectResult& DetectResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:cniface.DetectResponse.results)
  return _internal_results(index);
}
inline ::cniface::DetectResult* DetectResponse::_internal_add_results() {
  return results_.Add();
}
inline ::cniface::DetectResult* DetectResponse::add_results() {
  ::cniface::DetectResult* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:cniface.DetectResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::DetectResult >&
DetectResponse::results() const {
  // @@protoc_insertion_point(field_list:cniface.DetectResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// ExtractFeatureRequest

// string model = 1;
inline void ExtractFeatureRequest::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& ExtractFeatureRequest::model() const {
  // @@protoc_insertion_point(field_get:cniface.ExtractFeatureRequest.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtractFeatureRequest::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.ExtractFeatureRequest.model)
}
inline std::string* ExtractFeatureRequest::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:cniface.ExtractFeatureRequest.model)
  return _s;
}
inline const std::string& ExtractFeatureRequest::_internal_model() const {
  return model_.Get();
}
inline void ExtractFeatureRequest::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExtractFeatureRequest::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExtractFeatureRequest::release_model() {
  // @@protoc_insertion_point(field_release:cniface.ExtractFeatureRequest.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExtractFeatureRequest::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.ExtractFeatureRequest.model)
}

// string faceImageBase64 = 2;
inline void ExtractFeatureRequest::clear_faceimagebase64() {
  faceimagebase64_.ClearToEmpty();
}
inline const std::string& ExtractFeatureRequest::faceimagebase64() const {
  // @@protoc_insertion_point(field_get:cniface.ExtractFeatureRequest.faceImageBase64)
  return _internal_faceimagebase64();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtractFeatureRequest::set_faceimagebase64(ArgT0&& arg0, ArgT... args) {
 
 faceimagebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.ExtractFeatureRequest.faceImageBase64)
}
inline std::string* ExtractFeatureRequest::mutable_faceimagebase64() {
  std::string* _s = _internal_mutable_faceimagebase64();
  // @@protoc_insertion_point(field_mutable:cniface.ExtractFeatureRequest.faceImageBase64)
  return _s;
}
inline const std::string& ExtractFeatureRequest::_internal_faceimagebase64() const {
  return faceimagebase64_.Get();
}
inline void ExtractFeatureRequest::_internal_set_faceimagebase64(const std::string& value) {
  
  faceimagebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExtractFeatureRequest::_internal_mutable_faceimagebase64() {
  
  return faceimagebase64_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExtractFeatureRequest::release_faceimagebase64() {
  // @@protoc_insertion_point(field_release:cniface.ExtractFeatureRequest.faceImageBase64)
  return faceimagebase64_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExtractFeatureRequest::set_allocated_faceimagebase64(std::string* faceimagebase64) {
  if (faceimagebase64 != nullptr) {
    
  } else {
    
  }
  faceimagebase64_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), faceimagebase64,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (faceimagebase64_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    faceimagebase64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.ExtractFeatureRequest.faceImageBase64)
}

// repeated float kps = 3;
inline int ExtractFeatureRequest::_internal_kps_size() const {
  return kps_.size();
}
inline int ExtractFeatureRequest::kps_size() const {
  return _internal_kps_size();
}
inline void ExtractFeatureRequest::clear_kps() {
  kps_.Clear();
}
inline float ExtractFeatureRequest::_internal_kps(int index) const {
  return kps_.Get(index);
}
inline float ExtractFeatureRequest::kps(int index) const {
  // @@protoc_insertion_point(field_get:cniface.ExtractFeatureRequest.kps)
  return _internal_kps(index);
}
inline void ExtractFeatureRequest::set_kps(int index, float value) {
  kps_.Set(index, value);
  // @@protoc_insertion_point(field_set:cniface.ExtractFeatureRequest.kps)
}
inline void ExtractFeatureRequest::_internal_add_kps(float value) {
  kps_.Add(value);
}
inline void ExtractFeatureRequest::add_kps(float value) {
  _internal_add_kps(value);
  // @@protoc_insertion_point(field_add:cniface.ExtractFeatureRequest.kps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ExtractFeatureRequest::_internal_kps() const {
  return kps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ExtractFeatureRequest::kps() const {
  // @@protoc_insertion_point(field_list:cniface.ExtractFeatureRequest.kps)
  return _internal_kps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ExtractFeatureRequest::_internal_mutable_kps() {
  return &kps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ExtractFeatureRequest::mutable_kps() {
  // @@protoc_insertion_point(field_mutable_list:cniface.ExtractFeatureRequest.kps)
  return _internal_mutable_kps();
}

// bool isDoNormalizeL2 = 4;
inline void ExtractFeatureRequest::clear_isdonormalizel2() {
  isdonormalizel2_ = false;
}
inline bool ExtractFeatureRequest::_internal_isdonormalizel2() const {
  return isdonormalizel2_;
}
inline bool ExtractFeatureRequest::isdonormalizel2() const {
  // @@protoc_insertion_point(field_get:cniface.ExtractFeatureRequest.isDoNormalizeL2)
  return _internal_isdonormalizel2();
}
inline void ExtractFeatureRequest::_internal_set_isdonormalizel2(bool value) {
  
  isdonormalizel2_ = value;
}
inline void ExtractFeatureRequest::set_isdonormalizel2(bool value) {
  _internal_set_isdonormalizel2(value);
  // @@protoc_insertion_point(field_set:cniface.ExtractFeatureRequest.isDoNormalizeL2)
}

// -------------------------------------------------------------------

// ExtractFeatureResponse

// int32 code = 1;
inline void ExtractFeatureResponse::clear_code() {
  code_ = 0;
}
inline int32_t ExtractFeatureResponse::_internal_code() const {
  return code_;
}
inline int32_t ExtractFeatureResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.ExtractFeatureResponse.code)
  return _internal_code();
}
inline void ExtractFeatureResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void ExtractFeatureResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.ExtractFeatureResponse.code)
}

// string message = 2;
inline void ExtractFeatureResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ExtractFeatureResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.ExtractFeatureResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExtractFeatureResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.ExtractFeatureResponse.message)
}
inline std::string* ExtractFeatureResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.ExtractFeatureResponse.message)
  return _s;
}
inline const std::string& ExtractFeatureResponse::_internal_message() const {
  return message_.Get();
}
inline void ExtractFeatureResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExtractFeatureResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExtractFeatureResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.ExtractFeatureResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExtractFeatureResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.ExtractFeatureResponse.message)
}

// repeated float feature = 3;
inline int ExtractFeatureResponse::_internal_feature_size() const {
  return feature_.size();
}
inline int ExtractFeatureResponse::feature_size() const {
  return _internal_feature_size();
}
inline void ExtractFeatureResponse::clear_feature() {
  feature_.Clear();
}
inline float ExtractFeatureResponse::_internal_feature(int index) const {
  return feature_.Get(index);
}
inline float ExtractFeatureResponse::feature(int index) const {
  // @@protoc_insertion_point(field_get:cniface.ExtractFeatureResponse.feature)
  return _internal_feature(index);
}
inline void ExtractFeatureResponse::set_feature(int index, float value) {
  feature_.Set(index, value);
  // @@protoc_insertion_point(field_set:cniface.ExtractFeatureResponse.feature)
}
inline void ExtractFeatureResponse::_internal_add_feature(float value) {
  feature_.Add(value);
}
inline void ExtractFeatureResponse::add_feature(float value) {
  _internal_add_feature(value);
  // @@protoc_insertion_point(field_add:cniface.ExtractFeatureResponse.feature)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ExtractFeatureResponse::_internal_feature() const {
  return feature_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ExtractFeatureResponse::feature() const {
  // @@protoc_insertion_point(field_list:cniface.ExtractFeatureResponse.feature)
  return _internal_feature();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ExtractFeatureResponse::_internal_mutable_feature() {
  return &feature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ExtractFeatureResponse::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:cniface.ExtractFeatureResponse.feature)
  return _internal_mutable_feature();
}

// -------------------------------------------------------------------

// SimilarityRequest

// repeated float feature1 = 1;
inline int SimilarityRequest::_internal_feature1_size() const {
  return feature1_.size();
}
inline int SimilarityRequest::feature1_size() const {
  return _internal_feature1_size();
}
inline void SimilarityRequest::clear_feature1() {
  feature1_.Clear();
}
inline float SimilarityRequest::_internal_feature1(int index) const {
  return feature1_.Get(index);
}
inline float SimilarityRequest::feature1(int index) const {
  // @@protoc_insertion_point(field_get:cniface.SimilarityRequest.feature1)
  return _internal_feature1(index);
}
inline void SimilarityRequest::set_feature1(int index, float value) {
  feature1_.Set(index, value);
  // @@protoc_insertion_point(field_set:cniface.SimilarityRequest.feature1)
}
inline void SimilarityRequest::_internal_add_feature1(float value) {
  feature1_.Add(value);
}
inline void SimilarityRequest::add_feature1(float value) {
  _internal_add_feature1(value);
  // @@protoc_insertion_point(field_add:cniface.SimilarityRequest.feature1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SimilarityRequest::_internal_feature1() const {
  return feature1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SimilarityRequest::feature1() const {
  // @@protoc_insertion_point(field_list:cniface.SimilarityRequest.feature1)
  return _internal_feature1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SimilarityRequest::_internal_mutable_feature1() {
  return &feature1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SimilarityRequest::mutable_feature1() {
  // @@protoc_insertion_point(field_mutable_list:cniface.SimilarityRequest.feature1)
  return _internal_mutable_feature1();
}

// repeated float feature2 = 2;
inline int SimilarityRequest::_internal_feature2_size() const {
  return feature2_.size();
}
inline int SimilarityRequest::feature2_size() const {
  return _internal_feature2_size();
}
inline void SimilarityRequest::clear_feature2() {
  feature2_.Clear();
}
inline float SimilarityRequest::_internal_feature2(int index) const {
  return feature2_.Get(index);
}
inline float SimilarityRequest::feature2(int index) const {
  // @@protoc_insertion_point(field_get:cniface.SimilarityRequest.feature2)
  return _internal_feature2(index);
}
inline void SimilarityRequest::set_feature2(int index, float value) {
  feature2_.Set(index, value);
  // @@protoc_insertion_point(field_set:cniface.SimilarityRequest.feature2)
}
inline void SimilarityRequest::_internal_add_feature2(float value) {
  feature2_.Add(value);
}
inline void SimilarityRequest::add_feature2(float value) {
  _internal_add_feature2(value);
  // @@protoc_insertion_point(field_add:cniface.SimilarityRequest.feature2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SimilarityRequest::_internal_feature2() const {
  return feature2_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SimilarityRequest::feature2() const {
  // @@protoc_insertion_point(field_list:cniface.SimilarityRequest.feature2)
  return _internal_feature2();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SimilarityRequest::_internal_mutable_feature2() {
  return &feature2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SimilarityRequest::mutable_feature2() {
  // @@protoc_insertion_point(field_mutable_list:cniface.SimilarityRequest.feature2)
  return _internal_mutable_feature2();
}

// -------------------------------------------------------------------

// SimilarityResponse

// int32 code = 1;
inline void SimilarityResponse::clear_code() {
  code_ = 0;
}
inline int32_t SimilarityResponse::_internal_code() const {
  return code_;
}
inline int32_t SimilarityResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.SimilarityResponse.code)
  return _internal_code();
}
inline void SimilarityResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void SimilarityResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.SimilarityResponse.code)
}

// string message = 2;
inline void SimilarityResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& SimilarityResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.SimilarityResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimilarityResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.SimilarityResponse.message)
}
inline std::string* SimilarityResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.SimilarityResponse.message)
  return _s;
}
inline const std::string& SimilarityResponse::_internal_message() const {
  return message_.Get();
}
inline void SimilarityResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SimilarityResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SimilarityResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.SimilarityResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SimilarityResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.SimilarityResponse.message)
}

// float similarity = 3;
inline void SimilarityResponse::clear_similarity() {
  similarity_ = 0;
}
inline float SimilarityResponse::_internal_similarity() const {
  return similarity_;
}
inline float SimilarityResponse::similarity() const {
  // @@protoc_insertion_point(field_get:cniface.SimilarityResponse.similarity)
  return _internal_similarity();
}
inline void SimilarityResponse::_internal_set_similarity(float value) {
  
  similarity_ = value;
}
inline void SimilarityResponse::set_similarity(float value) {
  _internal_set_similarity(value);
  // @@protoc_insertion_point(field_set:cniface.SimilarityResponse.similarity)
}

// -------------------------------------------------------------------

// GenderAgeRequest

// string model = 1;
inline void GenderAgeRequest::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& GenderAgeRequest::model() const {
  // @@protoc_insertion_point(field_get:cniface.GenderAgeRequest.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenderAgeRequest::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.GenderAgeRequest.model)
}
inline std::string* GenderAgeRequest::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:cniface.GenderAgeRequest.model)
  return _s;
}
inline const std::string& GenderAgeRequest::_internal_model() const {
  return model_.Get();
}
inline void GenderAgeRequest::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenderAgeRequest::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenderAgeRequest::release_model() {
  // @@protoc_insertion_point(field_release:cniface.GenderAgeRequest.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenderAgeRequest::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.GenderAgeRequest.model)
}

// string faceImageBase64 = 2;
inline void GenderAgeRequest::clear_faceimagebase64() {
  faceimagebase64_.ClearToEmpty();
}
inline const std::string& GenderAgeRequest::faceimagebase64() const {
  // @@protoc_insertion_point(field_get:cniface.GenderAgeRequest.faceImageBase64)
  return _internal_faceimagebase64();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenderAgeRequest::set_faceimagebase64(ArgT0&& arg0, ArgT... args) {
 
 faceimagebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.GenderAgeRequest.faceImageBase64)
}
inline std::string* GenderAgeRequest::mutable_faceimagebase64() {
  std::string* _s = _internal_mutable_faceimagebase64();
  // @@protoc_insertion_point(field_mutable:cniface.GenderAgeRequest.faceImageBase64)
  return _s;
}
inline const std::string& GenderAgeRequest::_internal_faceimagebase64() const {
  return faceimagebase64_.Get();
}
inline void GenderAgeRequest::_internal_set_faceimagebase64(const std::string& value) {
  
  faceimagebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenderAgeRequest::_internal_mutable_faceimagebase64() {
  
  return faceimagebase64_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenderAgeRequest::release_faceimagebase64() {
  // @@protoc_insertion_point(field_release:cniface.GenderAgeRequest.faceImageBase64)
  return faceimagebase64_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenderAgeRequest::set_allocated_faceimagebase64(std::string* faceimagebase64) {
  if (faceimagebase64 != nullptr) {
    
  } else {
    
  }
  faceimagebase64_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), faceimagebase64,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (faceimagebase64_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    faceimagebase64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.GenderAgeRequest.faceImageBase64)
}

// repeated float kps = 3;
inline int GenderAgeRequest::_internal_kps_size() const {
  return kps_.size();
}
inline int GenderAgeRequest::kps_size() const {
  return _internal_kps_size();
}
inline void GenderAgeRequest::clear_kps() {
  kps_.Clear();
}
inline float GenderAgeRequest::_internal_kps(int index) const {
  return kps_.Get(index);
}
inline float GenderAgeRequest::kps(int index) const {
  // @@protoc_insertion_point(field_get:cniface.GenderAgeRequest.kps)
  return _internal_kps(index);
}
inline void GenderAgeRequest::set_kps(int index, float value) {
  kps_.Set(index, value);
  // @@protoc_insertion_point(field_set:cniface.GenderAgeRequest.kps)
}
inline void GenderAgeRequest::_internal_add_kps(float value) {
  kps_.Add(value);
}
inline void GenderAgeRequest::add_kps(float value) {
  _internal_add_kps(value);
  // @@protoc_insertion_point(field_add:cniface.GenderAgeRequest.kps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GenderAgeRequest::_internal_kps() const {
  return kps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GenderAgeRequest::kps() const {
  // @@protoc_insertion_point(field_list:cniface.GenderAgeRequest.kps)
  return _internal_kps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GenderAgeRequest::_internal_mutable_kps() {
  return &kps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GenderAgeRequest::mutable_kps() {
  // @@protoc_insertion_point(field_mutable_list:cniface.GenderAgeRequest.kps)
  return _internal_mutable_kps();
}

// -------------------------------------------------------------------

// GenderAgeResponse

// int32 code = 1;
inline void GenderAgeResponse::clear_code() {
  code_ = 0;
}
inline int32_t GenderAgeResponse::_internal_code() const {
  return code_;
}
inline int32_t GenderAgeResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.GenderAgeResponse.code)
  return _internal_code();
}
inline void GenderAgeResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void GenderAgeResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.GenderAgeResponse.code)
}

// string message = 2;
inline void GenderAgeResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& GenderAgeResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.GenderAgeResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenderAgeResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.GenderAgeResponse.message)
}
inline std::string* GenderAgeResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.GenderAgeResponse.message)
  return _s;
}
inline const std::string& GenderAgeResponse::_internal_message() const {
  return message_.Get();
}
inline void GenderAgeResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenderAgeResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenderAgeResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.GenderAgeResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenderAgeResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.GenderAgeResponse.message)
}

// int32 gender = 3;
inline void GenderAgeResponse::clear_gender() {
  gender_ = 0;
}
inline int32_t GenderAgeResponse::_internal_gender() const {
  return gender_;
}
inline int32_t GenderAgeResponse::gender() const {
  // @@protoc_insertion_point(field_get:cniface.GenderAgeResponse.gender)
  return _internal_gender();
}
inline void GenderAgeResponse::_internal_set_gender(int32_t value) {
  
  gender_ = value;
}
inline void GenderAgeResponse::set_gender(int32_t value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:cniface.GenderAgeResponse.gender)
}

// int32 age = 4;
inline void GenderAgeResponse::clear_age() {
  age_ = 0;
}
inline int32_t GenderAgeResponse::_internal_age() const {
  return age_;
}
inline int32_t GenderAgeResponse::age() const {
  // @@protoc_insertion_point(field_get:cniface.GenderAgeResponse.age)
  return _internal_age();
}
inline void GenderAgeResponse::_internal_set_age(int32_t value) {
  
  age_ = value;
}
inline void GenderAgeResponse::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:cniface.GenderAgeResponse.age)
}

// -------------------------------------------------------------------

// CreateRepositoryRequest

// string repoName = 1;
inline void CreateRepositoryRequest::clear_reponame() {
  reponame_.ClearToEmpty();
}
inline const std::string& CreateRepositoryRequest::reponame() const {
  // @@protoc_insertion_point(field_get:cniface.CreateRepositoryRequest.repoName)
  return _internal_reponame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRepositoryRequest::set_reponame(ArgT0&& arg0, ArgT... args) {
 
 reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.CreateRepositoryRequest.repoName)
}
inline std::string* CreateRepositoryRequest::mutable_reponame() {
  std::string* _s = _internal_mutable_reponame();
  // @@protoc_insertion_point(field_mutable:cniface.CreateRepositoryRequest.repoName)
  return _s;
}
inline const std::string& CreateRepositoryRequest::_internal_reponame() const {
  return reponame_.Get();
}
inline void CreateRepositoryRequest::_internal_set_reponame(const std::string& value) {
  
  reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRepositoryRequest::_internal_mutable_reponame() {
  
  return reponame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRepositoryRequest::release_reponame() {
  // @@protoc_insertion_point(field_release:cniface.CreateRepositoryRequest.repoName)
  return reponame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRepositoryRequest::set_allocated_reponame(std::string* reponame) {
  if (reponame != nullptr) {
    
  } else {
    
  }
  reponame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reponame,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reponame_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reponame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.CreateRepositoryRequest.repoName)
}

// -------------------------------------------------------------------

// CreateRepositoryResponse

// int32 code = 1;
inline void CreateRepositoryResponse::clear_code() {
  code_ = 0;
}
inline int32_t CreateRepositoryResponse::_internal_code() const {
  return code_;
}
inline int32_t CreateRepositoryResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.CreateRepositoryResponse.code)
  return _internal_code();
}
inline void CreateRepositoryResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void CreateRepositoryResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.CreateRepositoryResponse.code)
}

// string message = 2;
inline void CreateRepositoryResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CreateRepositoryResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.CreateRepositoryResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRepositoryResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.CreateRepositoryResponse.message)
}
inline std::string* CreateRepositoryResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.CreateRepositoryResponse.message)
  return _s;
}
inline const std::string& CreateRepositoryResponse::_internal_message() const {
  return message_.Get();
}
inline void CreateRepositoryResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRepositoryResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRepositoryResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.CreateRepositoryResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRepositoryResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.CreateRepositoryResponse.message)
}

// -------------------------------------------------------------------

// DeleteRepositoryRequest

// string repoName = 1;
inline void DeleteRepositoryRequest::clear_reponame() {
  reponame_.ClearToEmpty();
}
inline const std::string& DeleteRepositoryRequest::reponame() const {
  // @@protoc_insertion_point(field_get:cniface.DeleteRepositoryRequest.repoName)
  return _internal_reponame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRepositoryRequest::set_reponame(ArgT0&& arg0, ArgT... args) {
 
 reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.DeleteRepositoryRequest.repoName)
}
inline std::string* DeleteRepositoryRequest::mutable_reponame() {
  std::string* _s = _internal_mutable_reponame();
  // @@protoc_insertion_point(field_mutable:cniface.DeleteRepositoryRequest.repoName)
  return _s;
}
inline const std::string& DeleteRepositoryRequest::_internal_reponame() const {
  return reponame_.Get();
}
inline void DeleteRepositoryRequest::_internal_set_reponame(const std::string& value) {
  
  reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRepositoryRequest::_internal_mutable_reponame() {
  
  return reponame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRepositoryRequest::release_reponame() {
  // @@protoc_insertion_point(field_release:cniface.DeleteRepositoryRequest.repoName)
  return reponame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRepositoryRequest::set_allocated_reponame(std::string* reponame) {
  if (reponame != nullptr) {
    
  } else {
    
  }
  reponame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reponame,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reponame_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reponame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.DeleteRepositoryRequest.repoName)
}

// -------------------------------------------------------------------

// DeleteRepositoryResponse

// int32 code = 1;
inline void DeleteRepositoryResponse::clear_code() {
  code_ = 0;
}
inline int32_t DeleteRepositoryResponse::_internal_code() const {
  return code_;
}
inline int32_t DeleteRepositoryResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.DeleteRepositoryResponse.code)
  return _internal_code();
}
inline void DeleteRepositoryResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void DeleteRepositoryResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.DeleteRepositoryResponse.code)
}

// string message = 2;
inline void DeleteRepositoryResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& DeleteRepositoryResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.DeleteRepositoryResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRepositoryResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.DeleteRepositoryResponse.message)
}
inline std::string* DeleteRepositoryResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.DeleteRepositoryResponse.message)
  return _s;
}
inline const std::string& DeleteRepositoryResponse::_internal_message() const {
  return message_.Get();
}
inline void DeleteRepositoryResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRepositoryResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRepositoryResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.DeleteRepositoryResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRepositoryResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.DeleteRepositoryResponse.message)
}

// -------------------------------------------------------------------

// ExistRepositoryRequest

// string repoName = 1;
inline void ExistRepositoryRequest::clear_reponame() {
  reponame_.ClearToEmpty();
}
inline const std::string& ExistRepositoryRequest::reponame() const {
  // @@protoc_insertion_point(field_get:cniface.ExistRepositoryRequest.repoName)
  return _internal_reponame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExistRepositoryRequest::set_reponame(ArgT0&& arg0, ArgT... args) {
 
 reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.ExistRepositoryRequest.repoName)
}
inline std::string* ExistRepositoryRequest::mutable_reponame() {
  std::string* _s = _internal_mutable_reponame();
  // @@protoc_insertion_point(field_mutable:cniface.ExistRepositoryRequest.repoName)
  return _s;
}
inline const std::string& ExistRepositoryRequest::_internal_reponame() const {
  return reponame_.Get();
}
inline void ExistRepositoryRequest::_internal_set_reponame(const std::string& value) {
  
  reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExistRepositoryRequest::_internal_mutable_reponame() {
  
  return reponame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExistRepositoryRequest::release_reponame() {
  // @@protoc_insertion_point(field_release:cniface.ExistRepositoryRequest.repoName)
  return reponame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExistRepositoryRequest::set_allocated_reponame(std::string* reponame) {
  if (reponame != nullptr) {
    
  } else {
    
  }
  reponame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reponame,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reponame_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reponame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.ExistRepositoryRequest.repoName)
}

// -------------------------------------------------------------------

// ExistRepositoryResponse

// int32 code = 1;
inline void ExistRepositoryResponse::clear_code() {
  code_ = 0;
}
inline int32_t ExistRepositoryResponse::_internal_code() const {
  return code_;
}
inline int32_t ExistRepositoryResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.ExistRepositoryResponse.code)
  return _internal_code();
}
inline void ExistRepositoryResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void ExistRepositoryResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.ExistRepositoryResponse.code)
}

// string message = 2;
inline void ExistRepositoryResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ExistRepositoryResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.ExistRepositoryResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExistRepositoryResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.ExistRepositoryResponse.message)
}
inline std::string* ExistRepositoryResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.ExistRepositoryResponse.message)
  return _s;
}
inline const std::string& ExistRepositoryResponse::_internal_message() const {
  return message_.Get();
}
inline void ExistRepositoryResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExistRepositoryResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExistRepositoryResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.ExistRepositoryResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExistRepositoryResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.ExistRepositoryResponse.message)
}

// bool exist = 3;
inline void ExistRepositoryResponse::clear_exist() {
  exist_ = false;
}
inline bool ExistRepositoryResponse::_internal_exist() const {
  return exist_;
}
inline bool ExistRepositoryResponse::exist() const {
  // @@protoc_insertion_point(field_get:cniface.ExistRepositoryResponse.exist)
  return _internal_exist();
}
inline void ExistRepositoryResponse::_internal_set_exist(bool value) {
  
  exist_ = value;
}
inline void ExistRepositoryResponse::set_exist(bool value) {
  _internal_set_exist(value);
  // @@protoc_insertion_point(field_set:cniface.ExistRepositoryResponse.exist)
}

// -------------------------------------------------------------------

// ListRepositoryResponse

// int32 code = 1;
inline void ListRepositoryResponse::clear_code() {
  code_ = 0;
}
inline int32_t ListRepositoryResponse::_internal_code() const {
  return code_;
}
inline int32_t ListRepositoryResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.ListRepositoryResponse.code)
  return _internal_code();
}
inline void ListRepositoryResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void ListRepositoryResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.ListRepositoryResponse.code)
}

// string message = 2;
inline void ListRepositoryResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ListRepositoryResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.ListRepositoryResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRepositoryResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.ListRepositoryResponse.message)
}
inline std::string* ListRepositoryResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.ListRepositoryResponse.message)
  return _s;
}
inline const std::string& ListRepositoryResponse::_internal_message() const {
  return message_.Get();
}
inline void ListRepositoryResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListRepositoryResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListRepositoryResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.ListRepositoryResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListRepositoryResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.ListRepositoryResponse.message)
}

// repeated string names = 3;
inline int ListRepositoryResponse::_internal_names_size() const {
  return names_.size();
}
inline int ListRepositoryResponse::names_size() const {
  return _internal_names_size();
}
inline void ListRepositoryResponse::clear_names() {
  names_.Clear();
}
inline std::string* ListRepositoryResponse::add_names() {
  std::string* _s = _internal_add_names();
  // @@protoc_insertion_point(field_add_mutable:cniface.ListRepositoryResponse.names)
  return _s;
}
inline const std::string& ListRepositoryResponse::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& ListRepositoryResponse::names(int index) const {
  // @@protoc_insertion_point(field_get:cniface.ListRepositoryResponse.names)
  return _internal_names(index);
}
inline std::string* ListRepositoryResponse::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:cniface.ListRepositoryResponse.names)
  return names_.Mutable(index);
}
inline void ListRepositoryResponse::set_names(int index, const std::string& value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cniface.ListRepositoryResponse.names)
}
inline void ListRepositoryResponse::set_names(int index, std::string&& value) {
  names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cniface.ListRepositoryResponse.names)
}
inline void ListRepositoryResponse::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cniface.ListRepositoryResponse.names)
}
inline void ListRepositoryResponse::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cniface.ListRepositoryResponse.names)
}
inline std::string* ListRepositoryResponse::_internal_add_names() {
  return names_.Add();
}
inline void ListRepositoryResponse::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cniface.ListRepositoryResponse.names)
}
inline void ListRepositoryResponse::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cniface.ListRepositoryResponse.names)
}
inline void ListRepositoryResponse::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cniface.ListRepositoryResponse.names)
}
inline void ListRepositoryResponse::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cniface.ListRepositoryResponse.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListRepositoryResponse::names() const {
  // @@protoc_insertion_point(field_list:cniface.ListRepositoryResponse.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListRepositoryResponse::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:cniface.ListRepositoryResponse.names)
  return &names_;
}

// -------------------------------------------------------------------

// AddOrUpdateItemRequest

// string repoName = 1;
inline void AddOrUpdateItemRequest::clear_reponame() {
  reponame_.ClearToEmpty();
}
inline const std::string& AddOrUpdateItemRequest::reponame() const {
  // @@protoc_insertion_point(field_get:cniface.AddOrUpdateItemRequest.repoName)
  return _internal_reponame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddOrUpdateItemRequest::set_reponame(ArgT0&& arg0, ArgT... args) {
 
 reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.AddOrUpdateItemRequest.repoName)
}
inline std::string* AddOrUpdateItemRequest::mutable_reponame() {
  std::string* _s = _internal_mutable_reponame();
  // @@protoc_insertion_point(field_mutable:cniface.AddOrUpdateItemRequest.repoName)
  return _s;
}
inline const std::string& AddOrUpdateItemRequest::_internal_reponame() const {
  return reponame_.Get();
}
inline void AddOrUpdateItemRequest::_internal_set_reponame(const std::string& value) {
  
  reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddOrUpdateItemRequest::_internal_mutable_reponame() {
  
  return reponame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddOrUpdateItemRequest::release_reponame() {
  // @@protoc_insertion_point(field_release:cniface.AddOrUpdateItemRequest.repoName)
  return reponame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddOrUpdateItemRequest::set_allocated_reponame(std::string* reponame) {
  if (reponame != nullptr) {
    
  } else {
    
  }
  reponame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reponame,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reponame_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reponame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.AddOrUpdateItemRequest.repoName)
}

// int64 id = 2;
inline void AddOrUpdateItemRequest::clear_id() {
  id_ = int64_t{0};
}
inline int64_t AddOrUpdateItemRequest::_internal_id() const {
  return id_;
}
inline int64_t AddOrUpdateItemRequest::id() const {
  // @@protoc_insertion_point(field_get:cniface.AddOrUpdateItemRequest.id)
  return _internal_id();
}
inline void AddOrUpdateItemRequest::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void AddOrUpdateItemRequest::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cniface.AddOrUpdateItemRequest.id)
}

// repeated float feature = 3;
inline int AddOrUpdateItemRequest::_internal_feature_size() const {
  return feature_.size();
}
inline int AddOrUpdateItemRequest::feature_size() const {
  return _internal_feature_size();
}
inline void AddOrUpdateItemRequest::clear_feature() {
  feature_.Clear();
}
inline float AddOrUpdateItemRequest::_internal_feature(int index) const {
  return feature_.Get(index);
}
inline float AddOrUpdateItemRequest::feature(int index) const {
  // @@protoc_insertion_point(field_get:cniface.AddOrUpdateItemRequest.feature)
  return _internal_feature(index);
}
inline void AddOrUpdateItemRequest::set_feature(int index, float value) {
  feature_.Set(index, value);
  // @@protoc_insertion_point(field_set:cniface.AddOrUpdateItemRequest.feature)
}
inline void AddOrUpdateItemRequest::_internal_add_feature(float value) {
  feature_.Add(value);
}
inline void AddOrUpdateItemRequest::add_feature(float value) {
  _internal_add_feature(value);
  // @@protoc_insertion_point(field_add:cniface.AddOrUpdateItemRequest.feature)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AddOrUpdateItemRequest::_internal_feature() const {
  return feature_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AddOrUpdateItemRequest::feature() const {
  // @@protoc_insertion_point(field_list:cniface.AddOrUpdateItemRequest.feature)
  return _internal_feature();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AddOrUpdateItemRequest::_internal_mutable_feature() {
  return &feature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AddOrUpdateItemRequest::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:cniface.AddOrUpdateItemRequest.feature)
  return _internal_mutable_feature();
}

// -------------------------------------------------------------------

// AddOrUpdateItemResponse

// int32 code = 1;
inline void AddOrUpdateItemResponse::clear_code() {
  code_ = 0;
}
inline int32_t AddOrUpdateItemResponse::_internal_code() const {
  return code_;
}
inline int32_t AddOrUpdateItemResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.AddOrUpdateItemResponse.code)
  return _internal_code();
}
inline void AddOrUpdateItemResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void AddOrUpdateItemResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.AddOrUpdateItemResponse.code)
}

// string message = 2;
inline void AddOrUpdateItemResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& AddOrUpdateItemResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.AddOrUpdateItemResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddOrUpdateItemResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.AddOrUpdateItemResponse.message)
}
inline std::string* AddOrUpdateItemResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.AddOrUpdateItemResponse.message)
  return _s;
}
inline const std::string& AddOrUpdateItemResponse::_internal_message() const {
  return message_.Get();
}
inline void AddOrUpdateItemResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddOrUpdateItemResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddOrUpdateItemResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.AddOrUpdateItemResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddOrUpdateItemResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.AddOrUpdateItemResponse.message)
}

// -------------------------------------------------------------------

// DeleteItemRequest

// string repoName = 1;
inline void DeleteItemRequest::clear_reponame() {
  reponame_.ClearToEmpty();
}
inline const std::string& DeleteItemRequest::reponame() const {
  // @@protoc_insertion_point(field_get:cniface.DeleteItemRequest.repoName)
  return _internal_reponame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteItemRequest::set_reponame(ArgT0&& arg0, ArgT... args) {
 
 reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.DeleteItemRequest.repoName)
}
inline std::string* DeleteItemRequest::mutable_reponame() {
  std::string* _s = _internal_mutable_reponame();
  // @@protoc_insertion_point(field_mutable:cniface.DeleteItemRequest.repoName)
  return _s;
}
inline const std::string& DeleteItemRequest::_internal_reponame() const {
  return reponame_.Get();
}
inline void DeleteItemRequest::_internal_set_reponame(const std::string& value) {
  
  reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteItemRequest::_internal_mutable_reponame() {
  
  return reponame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteItemRequest::release_reponame() {
  // @@protoc_insertion_point(field_release:cniface.DeleteItemRequest.repoName)
  return reponame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteItemRequest::set_allocated_reponame(std::string* reponame) {
  if (reponame != nullptr) {
    
  } else {
    
  }
  reponame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reponame,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reponame_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reponame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.DeleteItemRequest.repoName)
}

// int64 id = 2;
inline void DeleteItemRequest::clear_id() {
  id_ = int64_t{0};
}
inline int64_t DeleteItemRequest::_internal_id() const {
  return id_;
}
inline int64_t DeleteItemRequest::id() const {
  // @@protoc_insertion_point(field_get:cniface.DeleteItemRequest.id)
  return _internal_id();
}
inline void DeleteItemRequest::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void DeleteItemRequest::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cniface.DeleteItemRequest.id)
}

// -------------------------------------------------------------------

// DeleteItemResponse

// int32 code = 1;
inline void DeleteItemResponse::clear_code() {
  code_ = 0;
}
inline int32_t DeleteItemResponse::_internal_code() const {
  return code_;
}
inline int32_t DeleteItemResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.DeleteItemResponse.code)
  return _internal_code();
}
inline void DeleteItemResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void DeleteItemResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.DeleteItemResponse.code)
}

// string message = 2;
inline void DeleteItemResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& DeleteItemResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.DeleteItemResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteItemResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.DeleteItemResponse.message)
}
inline std::string* DeleteItemResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.DeleteItemResponse.message)
  return _s;
}
inline const std::string& DeleteItemResponse::_internal_message() const {
  return message_.Get();
}
inline void DeleteItemResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteItemResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteItemResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.DeleteItemResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteItemResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.DeleteItemResponse.message)
}

// -------------------------------------------------------------------

// SearchResponseItem

// int64 id = 1;
inline void SearchResponseItem::clear_id() {
  id_ = int64_t{0};
}
inline int64_t SearchResponseItem::_internal_id() const {
  return id_;
}
inline int64_t SearchResponseItem::id() const {
  // @@protoc_insertion_point(field_get:cniface.SearchResponseItem.id)
  return _internal_id();
}
inline void SearchResponseItem::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void SearchResponseItem::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cniface.SearchResponseItem.id)
}

// float score = 2;
inline void SearchResponseItem::clear_score() {
  score_ = 0;
}
inline float SearchResponseItem::_internal_score() const {
  return score_;
}
inline float SearchResponseItem::score() const {
  // @@protoc_insertion_point(field_get:cniface.SearchResponseItem.score)
  return _internal_score();
}
inline void SearchResponseItem::_internal_set_score(float value) {
  
  score_ = value;
}
inline void SearchResponseItem::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:cniface.SearchResponseItem.score)
}

// -------------------------------------------------------------------

// SearchRequest

// string repoName = 1;
inline void SearchRequest::clear_reponame() {
  reponame_.ClearToEmpty();
}
inline const std::string& SearchRequest::reponame() const {
  // @@protoc_insertion_point(field_get:cniface.SearchRequest.repoName)
  return _internal_reponame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_reponame(ArgT0&& arg0, ArgT... args) {
 
 reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.SearchRequest.repoName)
}
inline std::string* SearchRequest::mutable_reponame() {
  std::string* _s = _internal_mutable_reponame();
  // @@protoc_insertion_point(field_mutable:cniface.SearchRequest.repoName)
  return _s;
}
inline const std::string& SearchRequest::_internal_reponame() const {
  return reponame_.Get();
}
inline void SearchRequest::_internal_set_reponame(const std::string& value) {
  
  reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_reponame() {
  
  return reponame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequest::release_reponame() {
  // @@protoc_insertion_point(field_release:cniface.SearchRequest.repoName)
  return reponame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchRequest::set_allocated_reponame(std::string* reponame) {
  if (reponame != nullptr) {
    
  } else {
    
  }
  reponame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reponame,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reponame_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reponame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.SearchRequest.repoName)
}

// int32 topk = 2;
inline void SearchRequest::clear_topk() {
  topk_ = 0;
}
inline int32_t SearchRequest::_internal_topk() const {
  return topk_;
}
inline int32_t SearchRequest::topk() const {
  // @@protoc_insertion_point(field_get:cniface.SearchRequest.topk)
  return _internal_topk();
}
inline void SearchRequest::_internal_set_topk(int32_t value) {
  
  topk_ = value;
}
inline void SearchRequest::set_topk(int32_t value) {
  _internal_set_topk(value);
  // @@protoc_insertion_point(field_set:cniface.SearchRequest.topk)
}

// repeated float feature = 3;
inline int SearchRequest::_internal_feature_size() const {
  return feature_.size();
}
inline int SearchRequest::feature_size() const {
  return _internal_feature_size();
}
inline void SearchRequest::clear_feature() {
  feature_.Clear();
}
inline float SearchRequest::_internal_feature(int index) const {
  return feature_.Get(index);
}
inline float SearchRequest::feature(int index) const {
  // @@protoc_insertion_point(field_get:cniface.SearchRequest.feature)
  return _internal_feature(index);
}
inline void SearchRequest::set_feature(int index, float value) {
  feature_.Set(index, value);
  // @@protoc_insertion_point(field_set:cniface.SearchRequest.feature)
}
inline void SearchRequest::_internal_add_feature(float value) {
  feature_.Add(value);
}
inline void SearchRequest::add_feature(float value) {
  _internal_add_feature(value);
  // @@protoc_insertion_point(field_add:cniface.SearchRequest.feature)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SearchRequest::_internal_feature() const {
  return feature_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SearchRequest::feature() const {
  // @@protoc_insertion_point(field_list:cniface.SearchRequest.feature)
  return _internal_feature();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SearchRequest::_internal_mutable_feature() {
  return &feature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SearchRequest::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:cniface.SearchRequest.feature)
  return _internal_mutable_feature();
}

// -------------------------------------------------------------------

// SearchResponse

// int32 code = 1;
inline void SearchResponse::clear_code() {
  code_ = 0;
}
inline int32_t SearchResponse::_internal_code() const {
  return code_;
}
inline int32_t SearchResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.SearchResponse.code)
  return _internal_code();
}
inline void SearchResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void SearchResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.SearchResponse.code)
}

// string message = 2;
inline void SearchResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& SearchResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.SearchResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.SearchResponse.message)
}
inline std::string* SearchResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.SearchResponse.message)
  return _s;
}
inline const std::string& SearchResponse::_internal_message() const {
  return message_.Get();
}
inline void SearchResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.SearchResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.SearchResponse.message)
}

// repeated .cniface.SearchResponseItem results = 3;
inline int SearchResponse::_internal_results_size() const {
  return results_.size();
}
inline int SearchResponse::results_size() const {
  return _internal_results_size();
}
inline void SearchResponse::clear_results() {
  results_.Clear();
}
inline ::cniface::SearchResponseItem* SearchResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:cniface.SearchResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::SearchResponseItem >*
SearchResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:cniface.SearchResponse.results)
  return &results_;
}
inline const ::cniface::SearchResponseItem& SearchResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::cniface::SearchResponseItem& SearchResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:cniface.SearchResponse.results)
  return _internal_results(index);
}
inline ::cniface::SearchResponseItem* SearchResponse::_internal_add_results() {
  return results_.Add();
}
inline ::cniface::SearchResponseItem* SearchResponse::add_results() {
  ::cniface::SearchResponseItem* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:cniface.SearchResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::SearchResponseItem >&
SearchResponse::results() const {
  // @@protoc_insertion_point(field_list:cniface.SearchResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// OCRRequest

// string imageBase64 = 1;
inline void OCRRequest::clear_imagebase64() {
  imagebase64_.ClearToEmpty();
}
inline const std::string& OCRRequest::imagebase64() const {
  // @@protoc_insertion_point(field_get:cniface.OCRRequest.imageBase64)
  return _internal_imagebase64();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OCRRequest::set_imagebase64(ArgT0&& arg0, ArgT... args) {
 
 imagebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.OCRRequest.imageBase64)
}
inline std::string* OCRRequest::mutable_imagebase64() {
  std::string* _s = _internal_mutable_imagebase64();
  // @@protoc_insertion_point(field_mutable:cniface.OCRRequest.imageBase64)
  return _s;
}
inline const std::string& OCRRequest::_internal_imagebase64() const {
  return imagebase64_.Get();
}
inline void OCRRequest::_internal_set_imagebase64(const std::string& value) {
  
  imagebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OCRRequest::_internal_mutable_imagebase64() {
  
  return imagebase64_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OCRRequest::release_imagebase64() {
  // @@protoc_insertion_point(field_release:cniface.OCRRequest.imageBase64)
  return imagebase64_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OCRRequest::set_allocated_imagebase64(std::string* imagebase64) {
  if (imagebase64 != nullptr) {
    
  } else {
    
  }
  imagebase64_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagebase64,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (imagebase64_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    imagebase64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.OCRRequest.imageBase64)
}

// bool isCls = 2;
inline void OCRRequest::clear_iscls() {
  iscls_ = false;
}
inline bool OCRRequest::_internal_iscls() const {
  return iscls_;
}
inline bool OCRRequest::iscls() const {
  // @@protoc_insertion_point(field_get:cniface.OCRRequest.isCls)
  return _internal_iscls();
}
inline void OCRRequest::_internal_set_iscls(bool value) {
  
  iscls_ = value;
}
inline void OCRRequest::set_iscls(bool value) {
  _internal_set_iscls(value);
  // @@protoc_insertion_point(field_set:cniface.OCRRequest.isCls)
}

// bool isRec = 3;
inline void OCRRequest::clear_isrec() {
  isrec_ = false;
}
inline bool OCRRequest::_internal_isrec() const {
  return isrec_;
}
inline bool OCRRequest::isrec() const {
  // @@protoc_insertion_point(field_get:cniface.OCRRequest.isRec)
  return _internal_isrec();
}
inline void OCRRequest::_internal_set_isrec(bool value) {
  
  isrec_ = value;
}
inline void OCRRequest::set_isrec(bool value) {
  _internal_set_isrec(value);
  // @@protoc_insertion_point(field_set:cniface.OCRRequest.isRec)
}

// -------------------------------------------------------------------

// OCRResponseItem

// repeated float position = 1;
inline int OCRResponseItem::_internal_position_size() const {
  return position_.size();
}
inline int OCRResponseItem::position_size() const {
  return _internal_position_size();
}
inline void OCRResponseItem::clear_position() {
  position_.Clear();
}
inline float OCRResponseItem::_internal_position(int index) const {
  return position_.Get(index);
}
inline float OCRResponseItem::position(int index) const {
  // @@protoc_insertion_point(field_get:cniface.OCRResponseItem.position)
  return _internal_position(index);
}
inline void OCRResponseItem::set_position(int index, float value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:cniface.OCRResponseItem.position)
}
inline void OCRResponseItem::_internal_add_position(float value) {
  position_.Add(value);
}
inline void OCRResponseItem::add_position(float value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:cniface.OCRResponseItem.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OCRResponseItem::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OCRResponseItem::position() const {
  // @@protoc_insertion_point(field_list:cniface.OCRResponseItem.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OCRResponseItem::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OCRResponseItem::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:cniface.OCRResponseItem.position)
  return _internal_mutable_position();
}

// float score = 2;
inline void OCRResponseItem::clear_score() {
  score_ = 0;
}
inline float OCRResponseItem::_internal_score() const {
  return score_;
}
inline float OCRResponseItem::score() const {
  // @@protoc_insertion_point(field_get:cniface.OCRResponseItem.score)
  return _internal_score();
}
inline void OCRResponseItem::_internal_set_score(float value) {
  
  score_ = value;
}
inline void OCRResponseItem::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:cniface.OCRResponseItem.score)
}

// string text = 3;
inline void OCRResponseItem::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& OCRResponseItem::text() const {
  // @@protoc_insertion_point(field_get:cniface.OCRResponseItem.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OCRResponseItem::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.OCRResponseItem.text)
}
inline std::string* OCRResponseItem::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:cniface.OCRResponseItem.text)
  return _s;
}
inline const std::string& OCRResponseItem::_internal_text() const {
  return text_.Get();
}
inline void OCRResponseItem::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OCRResponseItem::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OCRResponseItem::release_text() {
  // @@protoc_insertion_point(field_release:cniface.OCRResponseItem.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OCRResponseItem::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.OCRResponseItem.text)
}

// float clsScore = 4;
inline void OCRResponseItem::clear_clsscore() {
  clsscore_ = 0;
}
inline float OCRResponseItem::_internal_clsscore() const {
  return clsscore_;
}
inline float OCRResponseItem::clsscore() const {
  // @@protoc_insertion_point(field_get:cniface.OCRResponseItem.clsScore)
  return _internal_clsscore();
}
inline void OCRResponseItem::_internal_set_clsscore(float value) {
  
  clsscore_ = value;
}
inline void OCRResponseItem::set_clsscore(float value) {
  _internal_set_clsscore(value);
  // @@protoc_insertion_point(field_set:cniface.OCRResponseItem.clsScore)
}

// int32 clsLabel = 5;
inline void OCRResponseItem::clear_clslabel() {
  clslabel_ = 0;
}
inline int32_t OCRResponseItem::_internal_clslabel() const {
  return clslabel_;
}
inline int32_t OCRResponseItem::clslabel() const {
  // @@protoc_insertion_point(field_get:cniface.OCRResponseItem.clsLabel)
  return _internal_clslabel();
}
inline void OCRResponseItem::_internal_set_clslabel(int32_t value) {
  
  clslabel_ = value;
}
inline void OCRResponseItem::set_clslabel(int32_t value) {
  _internal_set_clslabel(value);
  // @@protoc_insertion_point(field_set:cniface.OCRResponseItem.clsLabel)
}

// -------------------------------------------------------------------

// OCRResponse

// int32 code = 1;
inline void OCRResponse::clear_code() {
  code_ = 0;
}
inline int32_t OCRResponse::_internal_code() const {
  return code_;
}
inline int32_t OCRResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.OCRResponse.code)
  return _internal_code();
}
inline void OCRResponse::_internal_set_code(int32_t value) {
  
  code_ = value;
}
inline void OCRResponse::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.OCRResponse.code)
}

// string message = 2;
inline void OCRResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& OCRResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.OCRResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OCRResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.OCRResponse.message)
}
inline std::string* OCRResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.OCRResponse.message)
  return _s;
}
inline const std::string& OCRResponse::_internal_message() const {
  return message_.Get();
}
inline void OCRResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OCRResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OCRResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.OCRResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OCRResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.OCRResponse.message)
}

// repeated .cniface.OCRResponseItem results = 3;
inline int OCRResponse::_internal_results_size() const {
  return results_.size();
}
inline int OCRResponse::results_size() const {
  return _internal_results_size();
}
inline void OCRResponse::clear_results() {
  results_.Clear();
}
inline ::cniface::OCRResponseItem* OCRResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:cniface.OCRResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::OCRResponseItem >*
OCRResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:cniface.OCRResponse.results)
  return &results_;
}
inline const ::cniface::OCRResponseItem& OCRResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::cniface::OCRResponseItem& OCRResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:cniface.OCRResponse.results)
  return _internal_results(index);
}
inline ::cniface::OCRResponseItem* OCRResponse::_internal_add_results() {
  return results_.Add();
}
inline ::cniface::OCRResponseItem* OCRResponse::add_results() {
  ::cniface::OCRResponseItem* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:cniface.OCRResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::OCRResponseItem >&
OCRResponse::results() const {
  // @@protoc_insertion_point(field_list:cniface.OCRResponse.results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cniface

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cniface_2eproto
