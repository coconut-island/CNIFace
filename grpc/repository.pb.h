// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: repository.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_repository_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_repository_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_repository_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_repository_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_repository_2eproto;
namespace cniface {
class AddFeatureRequest;
struct AddFeatureRequestDefaultTypeInternal;
extern AddFeatureRequestDefaultTypeInternal _AddFeatureRequest_default_instance_;
class AddFeatureResponse;
struct AddFeatureResponseDefaultTypeInternal;
extern AddFeatureResponseDefaultTypeInternal _AddFeatureResponse_default_instance_;
class AddRepoRequest;
struct AddRepoRequestDefaultTypeInternal;
extern AddRepoRequestDefaultTypeInternal _AddRepoRequest_default_instance_;
class AddRepoResponse;
struct AddRepoResponseDefaultTypeInternal;
extern AddRepoResponseDefaultTypeInternal _AddRepoResponse_default_instance_;
class DeleteRepoRequest;
struct DeleteRepoRequestDefaultTypeInternal;
extern DeleteRepoRequestDefaultTypeInternal _DeleteRepoRequest_default_instance_;
class DeleteRepoResponse;
struct DeleteRepoResponseDefaultTypeInternal;
extern DeleteRepoResponseDefaultTypeInternal _DeleteRepoResponse_default_instance_;
class ListRepositoryResponse;
struct ListRepositoryResponseDefaultTypeInternal;
extern ListRepositoryResponseDefaultTypeInternal _ListRepositoryResponse_default_instance_;
class Repository;
struct RepositoryDefaultTypeInternal;
extern RepositoryDefaultTypeInternal _Repository_default_instance_;
class RepositoryRequest;
struct RepositoryRequestDefaultTypeInternal;
extern RepositoryRequestDefaultTypeInternal _RepositoryRequest_default_instance_;
class SearchRequest;
struct SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
struct SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
class SearchResult;
struct SearchResultDefaultTypeInternal;
extern SearchResultDefaultTypeInternal _SearchResult_default_instance_;
class deleteFeatureRequest;
struct deleteFeatureRequestDefaultTypeInternal;
extern deleteFeatureRequestDefaultTypeInternal _deleteFeatureRequest_default_instance_;
class deleteFeatureResponse;
struct deleteFeatureResponseDefaultTypeInternal;
extern deleteFeatureResponseDefaultTypeInternal _deleteFeatureResponse_default_instance_;
}  // namespace cniface
PROTOBUF_NAMESPACE_OPEN
template<> ::cniface::AddFeatureRequest* Arena::CreateMaybeMessage<::cniface::AddFeatureRequest>(Arena*);
template<> ::cniface::AddFeatureResponse* Arena::CreateMaybeMessage<::cniface::AddFeatureResponse>(Arena*);
template<> ::cniface::AddRepoRequest* Arena::CreateMaybeMessage<::cniface::AddRepoRequest>(Arena*);
template<> ::cniface::AddRepoResponse* Arena::CreateMaybeMessage<::cniface::AddRepoResponse>(Arena*);
template<> ::cniface::DeleteRepoRequest* Arena::CreateMaybeMessage<::cniface::DeleteRepoRequest>(Arena*);
template<> ::cniface::DeleteRepoResponse* Arena::CreateMaybeMessage<::cniface::DeleteRepoResponse>(Arena*);
template<> ::cniface::ListRepositoryResponse* Arena::CreateMaybeMessage<::cniface::ListRepositoryResponse>(Arena*);
template<> ::cniface::Repository* Arena::CreateMaybeMessage<::cniface::Repository>(Arena*);
template<> ::cniface::RepositoryRequest* Arena::CreateMaybeMessage<::cniface::RepositoryRequest>(Arena*);
template<> ::cniface::SearchRequest* Arena::CreateMaybeMessage<::cniface::SearchRequest>(Arena*);
template<> ::cniface::SearchResponse* Arena::CreateMaybeMessage<::cniface::SearchResponse>(Arena*);
template<> ::cniface::SearchResult* Arena::CreateMaybeMessage<::cniface::SearchResult>(Arena*);
template<> ::cniface::deleteFeatureRequest* Arena::CreateMaybeMessage<::cniface::deleteFeatureRequest>(Arena*);
template<> ::cniface::deleteFeatureResponse* Arena::CreateMaybeMessage<::cniface::deleteFeatureResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cniface {

// ===================================================================

class Repository final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.Repository) */ {
 public:
  inline Repository() : Repository(nullptr) {}
  ~Repository() override;
  explicit constexpr Repository(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Repository(const Repository& from);
  Repository(Repository&& from) noexcept
    : Repository() {
    *this = ::std::move(from);
  }

  inline Repository& operator=(const Repository& from) {
    CopyFrom(from);
    return *this;
  }
  inline Repository& operator=(Repository&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Repository& default_instance() {
    return *internal_default_instance();
  }
  static inline const Repository* internal_default_instance() {
    return reinterpret_cast<const Repository*>(
               &_Repository_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Repository& a, Repository& b) {
    a.Swap(&b);
  }
  inline void Swap(Repository* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Repository* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Repository* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Repository>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Repository& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Repository& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Repository* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.Repository";
  }
  protected:
  explicit Repository(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 size = 2;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.Repository)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int64_t size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class ListRepositoryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.ListRepositoryResponse) */ {
 public:
  inline ListRepositoryResponse() : ListRepositoryResponse(nullptr) {}
  ~ListRepositoryResponse() override;
  explicit constexpr ListRepositoryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRepositoryResponse(const ListRepositoryResponse& from);
  ListRepositoryResponse(ListRepositoryResponse&& from) noexcept
    : ListRepositoryResponse() {
    *this = ::std::move(from);
  }

  inline ListRepositoryResponse& operator=(const ListRepositoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRepositoryResponse& operator=(ListRepositoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRepositoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRepositoryResponse* internal_default_instance() {
    return reinterpret_cast<const ListRepositoryResponse*>(
               &_ListRepositoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListRepositoryResponse& a, ListRepositoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRepositoryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRepositoryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRepositoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRepositoryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRepositoryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListRepositoryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRepositoryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.ListRepositoryResponse";
  }
  protected:
  explicit ListRepositoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepositoriesFieldNumber = 3,
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .cniface.Repository repositories = 3;
  int repositories_size() const;
  private:
  int _internal_repositories_size() const;
  public:
  void clear_repositories();
  ::cniface::Repository* mutable_repositories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::Repository >*
      mutable_repositories();
  private:
  const ::cniface::Repository& _internal_repositories(int index) const;
  ::cniface::Repository* _internal_add_repositories();
  public:
  const ::cniface::Repository& repositories(int index) const;
  ::cniface::Repository* add_repositories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::Repository >&
      repositories() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 code = 1;
  void clear_code();
  int64_t code() const;
  void set_code(int64_t value);
  private:
  int64_t _internal_code() const;
  void _internal_set_code(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.ListRepositoryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::Repository > repositories_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int64_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class deleteFeatureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.deleteFeatureRequest) */ {
 public:
  inline deleteFeatureRequest() : deleteFeatureRequest(nullptr) {}
  ~deleteFeatureRequest() override;
  explicit constexpr deleteFeatureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  deleteFeatureRequest(const deleteFeatureRequest& from);
  deleteFeatureRequest(deleteFeatureRequest&& from) noexcept
    : deleteFeatureRequest() {
    *this = ::std::move(from);
  }

  inline deleteFeatureRequest& operator=(const deleteFeatureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline deleteFeatureRequest& operator=(deleteFeatureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const deleteFeatureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const deleteFeatureRequest* internal_default_instance() {
    return reinterpret_cast<const deleteFeatureRequest*>(
               &_deleteFeatureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(deleteFeatureRequest& a, deleteFeatureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(deleteFeatureRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deleteFeatureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  deleteFeatureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<deleteFeatureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const deleteFeatureRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const deleteFeatureRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteFeatureRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.deleteFeatureRequest";
  }
  protected:
  explicit deleteFeatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepoNameFieldNumber = 1,
    kFeatureIdFieldNumber = 2,
  };
  // string repoName = 1;
  void clear_reponame();
  const std::string& reponame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reponame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reponame();
  PROTOBUF_NODISCARD std::string* release_reponame();
  void set_allocated_reponame(std::string* reponame);
  private:
  const std::string& _internal_reponame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reponame(const std::string& value);
  std::string* _internal_mutable_reponame();
  public:

  // int64 featureId = 2;
  void clear_featureid();
  int64_t featureid() const;
  void set_featureid(int64_t value);
  private:
  int64_t _internal_featureid() const;
  void _internal_set_featureid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.deleteFeatureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reponame_;
  int64_t featureid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class deleteFeatureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.deleteFeatureResponse) */ {
 public:
  inline deleteFeatureResponse() : deleteFeatureResponse(nullptr) {}
  ~deleteFeatureResponse() override;
  explicit constexpr deleteFeatureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  deleteFeatureResponse(const deleteFeatureResponse& from);
  deleteFeatureResponse(deleteFeatureResponse&& from) noexcept
    : deleteFeatureResponse() {
    *this = ::std::move(from);
  }

  inline deleteFeatureResponse& operator=(const deleteFeatureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline deleteFeatureResponse& operator=(deleteFeatureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const deleteFeatureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const deleteFeatureResponse* internal_default_instance() {
    return reinterpret_cast<const deleteFeatureResponse*>(
               &_deleteFeatureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(deleteFeatureResponse& a, deleteFeatureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(deleteFeatureResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deleteFeatureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  deleteFeatureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<deleteFeatureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const deleteFeatureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const deleteFeatureResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteFeatureResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.deleteFeatureResponse";
  }
  protected:
  explicit deleteFeatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 code = 1;
  void clear_code();
  int64_t code() const;
  void set_code(int64_t value);
  private:
  int64_t _internal_code() const;
  void _internal_set_code(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.deleteFeatureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int64_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class AddFeatureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.AddFeatureRequest) */ {
 public:
  inline AddFeatureRequest() : AddFeatureRequest(nullptr) {}
  ~AddFeatureRequest() override;
  explicit constexpr AddFeatureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFeatureRequest(const AddFeatureRequest& from);
  AddFeatureRequest(AddFeatureRequest&& from) noexcept
    : AddFeatureRequest() {
    *this = ::std::move(from);
  }

  inline AddFeatureRequest& operator=(const AddFeatureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFeatureRequest& operator=(AddFeatureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFeatureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFeatureRequest* internal_default_instance() {
    return reinterpret_cast<const AddFeatureRequest*>(
               &_AddFeatureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddFeatureRequest& a, AddFeatureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFeatureRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFeatureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFeatureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFeatureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFeatureRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddFeatureRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFeatureRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.AddFeatureRequest";
  }
  protected:
  explicit AddFeatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepoNameFieldNumber = 1,
    kFeatureBase64FieldNumber = 3,
    kFeatureIdFieldNumber = 2,
  };
  // string repoName = 1;
  void clear_reponame();
  const std::string& reponame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reponame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reponame();
  PROTOBUF_NODISCARD std::string* release_reponame();
  void set_allocated_reponame(std::string* reponame);
  private:
  const std::string& _internal_reponame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reponame(const std::string& value);
  std::string* _internal_mutable_reponame();
  public:

  // string featureBase64 = 3;
  void clear_featurebase64();
  const std::string& featurebase64() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_featurebase64(ArgT0&& arg0, ArgT... args);
  std::string* mutable_featurebase64();
  PROTOBUF_NODISCARD std::string* release_featurebase64();
  void set_allocated_featurebase64(std::string* featurebase64);
  private:
  const std::string& _internal_featurebase64() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_featurebase64(const std::string& value);
  std::string* _internal_mutable_featurebase64();
  public:

  // int64 featureId = 2;
  void clear_featureid();
  int64_t featureid() const;
  void set_featureid(int64_t value);
  private:
  int64_t _internal_featureid() const;
  void _internal_set_featureid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.AddFeatureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reponame_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr featurebase64_;
  int64_t featureid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class AddFeatureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.AddFeatureResponse) */ {
 public:
  inline AddFeatureResponse() : AddFeatureResponse(nullptr) {}
  ~AddFeatureResponse() override;
  explicit constexpr AddFeatureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFeatureResponse(const AddFeatureResponse& from);
  AddFeatureResponse(AddFeatureResponse&& from) noexcept
    : AddFeatureResponse() {
    *this = ::std::move(from);
  }

  inline AddFeatureResponse& operator=(const AddFeatureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFeatureResponse& operator=(AddFeatureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFeatureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFeatureResponse* internal_default_instance() {
    return reinterpret_cast<const AddFeatureResponse*>(
               &_AddFeatureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddFeatureResponse& a, AddFeatureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFeatureResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFeatureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFeatureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFeatureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFeatureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddFeatureResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFeatureResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.AddFeatureResponse";
  }
  protected:
  explicit AddFeatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 code = 1;
  void clear_code();
  int64_t code() const;
  void set_code(int64_t value);
  private:
  int64_t _internal_code() const;
  void _internal_set_code(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.AddFeatureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int64_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class DeleteRepoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.DeleteRepoRequest) */ {
 public:
  inline DeleteRepoRequest() : DeleteRepoRequest(nullptr) {}
  ~DeleteRepoRequest() override;
  explicit constexpr DeleteRepoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRepoRequest(const DeleteRepoRequest& from);
  DeleteRepoRequest(DeleteRepoRequest&& from) noexcept
    : DeleteRepoRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRepoRequest& operator=(const DeleteRepoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRepoRequest& operator=(DeleteRepoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRepoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRepoRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRepoRequest*>(
               &_DeleteRepoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteRepoRequest& a, DeleteRepoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRepoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRepoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRepoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRepoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRepoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRepoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRepoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.DeleteRepoRequest";
  }
  protected:
  explicit DeleteRepoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepoNameFieldNumber = 1,
  };
  // string repoName = 1;
  void clear_reponame();
  const std::string& reponame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reponame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reponame();
  PROTOBUF_NODISCARD std::string* release_reponame();
  void set_allocated_reponame(std::string* reponame);
  private:
  const std::string& _internal_reponame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reponame(const std::string& value);
  std::string* _internal_mutable_reponame();
  public:

  // @@protoc_insertion_point(class_scope:cniface.DeleteRepoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reponame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class DeleteRepoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.DeleteRepoResponse) */ {
 public:
  inline DeleteRepoResponse() : DeleteRepoResponse(nullptr) {}
  ~DeleteRepoResponse() override;
  explicit constexpr DeleteRepoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRepoResponse(const DeleteRepoResponse& from);
  DeleteRepoResponse(DeleteRepoResponse&& from) noexcept
    : DeleteRepoResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRepoResponse& operator=(const DeleteRepoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRepoResponse& operator=(DeleteRepoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRepoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRepoResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRepoResponse*>(
               &_DeleteRepoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteRepoResponse& a, DeleteRepoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRepoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRepoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRepoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRepoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRepoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRepoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRepoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.DeleteRepoResponse";
  }
  protected:
  explicit DeleteRepoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 code = 1;
  void clear_code();
  int64_t code() const;
  void set_code(int64_t value);
  private:
  int64_t _internal_code() const;
  void _internal_set_code(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.DeleteRepoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int64_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class AddRepoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.AddRepoRequest) */ {
 public:
  inline AddRepoRequest() : AddRepoRequest(nullptr) {}
  ~AddRepoRequest() override;
  explicit constexpr AddRepoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRepoRequest(const AddRepoRequest& from);
  AddRepoRequest(AddRepoRequest&& from) noexcept
    : AddRepoRequest() {
    *this = ::std::move(from);
  }

  inline AddRepoRequest& operator=(const AddRepoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRepoRequest& operator=(AddRepoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRepoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRepoRequest* internal_default_instance() {
    return reinterpret_cast<const AddRepoRequest*>(
               &_AddRepoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AddRepoRequest& a, AddRepoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRepoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRepoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddRepoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddRepoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddRepoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddRepoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRepoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.AddRepoRequest";
  }
  protected:
  explicit AddRepoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepoNameFieldNumber = 1,
  };
  // string repoName = 1;
  void clear_reponame();
  const std::string& reponame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reponame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reponame();
  PROTOBUF_NODISCARD std::string* release_reponame();
  void set_allocated_reponame(std::string* reponame);
  private:
  const std::string& _internal_reponame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reponame(const std::string& value);
  std::string* _internal_mutable_reponame();
  public:

  // @@protoc_insertion_point(class_scope:cniface.AddRepoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reponame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class AddRepoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.AddRepoResponse) */ {
 public:
  inline AddRepoResponse() : AddRepoResponse(nullptr) {}
  ~AddRepoResponse() override;
  explicit constexpr AddRepoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRepoResponse(const AddRepoResponse& from);
  AddRepoResponse(AddRepoResponse&& from) noexcept
    : AddRepoResponse() {
    *this = ::std::move(from);
  }

  inline AddRepoResponse& operator=(const AddRepoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRepoResponse& operator=(AddRepoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRepoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRepoResponse* internal_default_instance() {
    return reinterpret_cast<const AddRepoResponse*>(
               &_AddRepoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AddRepoResponse& a, AddRepoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRepoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRepoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddRepoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddRepoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddRepoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddRepoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRepoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.AddRepoResponse";
  }
  protected:
  explicit AddRepoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 code = 1;
  void clear_code();
  int64_t code() const;
  void set_code(int64_t value);
  private:
  int64_t _internal_code() const;
  void _internal_set_code(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.AddRepoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int64_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class RepositoryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.RepositoryRequest) */ {
 public:
  inline RepositoryRequest() : RepositoryRequest(nullptr) {}
  ~RepositoryRequest() override;
  explicit constexpr RepositoryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepositoryRequest(const RepositoryRequest& from);
  RepositoryRequest(RepositoryRequest&& from) noexcept
    : RepositoryRequest() {
    *this = ::std::move(from);
  }

  inline RepositoryRequest& operator=(const RepositoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepositoryRequest& operator=(RepositoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepositoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepositoryRequest* internal_default_instance() {
    return reinterpret_cast<const RepositoryRequest*>(
               &_RepositoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RepositoryRequest& a, RepositoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RepositoryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepositoryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepositoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepositoryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepositoryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RepositoryRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepositoryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.RepositoryRequest";
  }
  protected:
  explicit RepositoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepoNameFieldNumber = 1,
  };
  // string repoName = 1;
  void clear_reponame();
  const std::string& reponame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reponame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reponame();
  PROTOBUF_NODISCARD std::string* release_reponame();
  void set_allocated_reponame(std::string* reponame);
  private:
  const std::string& _internal_reponame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reponame(const std::string& value);
  std::string* _internal_mutable_reponame();
  public:

  // @@protoc_insertion_point(class_scope:cniface.RepositoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reponame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class SearchResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.SearchResult) */ {
 public:
  inline SearchResult() : SearchResult(nullptr) {}
  ~SearchResult() override;
  explicit constexpr SearchResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResult(const SearchResult& from);
  SearchResult(SearchResult&& from) noexcept
    : SearchResult() {
    *this = ::std::move(from);
  }

  inline SearchResult& operator=(const SearchResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResult& operator=(SearchResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResult* internal_default_instance() {
    return reinterpret_cast<const SearchResult*>(
               &_SearchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SearchResult& a, SearchResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.SearchResult";
  }
  protected:
  explicit SearchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureIdFieldNumber = 1,
    kDistanceFieldNumber = 2,
  };
  // int64 featureId = 1;
  void clear_featureid();
  int64_t featureid() const;
  void set_featureid(int64_t value);
  private:
  int64_t _internal_featureid() const;
  void _internal_set_featureid(int64_t value);
  public:

  // float distance = 2;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.SearchResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t featureid_;
  float distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {}
  ~SearchRequest() override;
  explicit constexpr SearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.SearchRequest";
  }
  protected:
  explicit SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepoNameFieldNumber = 1,
    kFeatureBase64FieldNumber = 2,
    kTopkFieldNumber = 3,
  };
  // string repoName = 1;
  void clear_reponame();
  const std::string& reponame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reponame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reponame();
  PROTOBUF_NODISCARD std::string* release_reponame();
  void set_allocated_reponame(std::string* reponame);
  private:
  const std::string& _internal_reponame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reponame(const std::string& value);
  std::string* _internal_mutable_reponame();
  public:

  // string featureBase64 = 2;
  void clear_featurebase64();
  const std::string& featurebase64() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_featurebase64(ArgT0&& arg0, ArgT... args);
  std::string* mutable_featurebase64();
  PROTOBUF_NODISCARD std::string* release_featurebase64();
  void set_allocated_featurebase64(std::string* featurebase64);
  private:
  const std::string& _internal_featurebase64() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_featurebase64(const std::string& value);
  std::string* _internal_mutable_featurebase64();
  public:

  // int64 topk = 3;
  void clear_topk();
  int64_t topk() const;
  void set_topk(int64_t value);
  private:
  int64_t _internal_topk() const;
  void _internal_set_topk(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reponame_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr featurebase64_;
  int64_t topk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class SearchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cniface.SearchResponse) */ {
 public:
  inline SearchResponse() : SearchResponse(nullptr) {}
  ~SearchResponse() override;
  explicit constexpr SearchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResponse(const SearchResponse& from);
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cniface.SearchResponse";
  }
  protected:
  explicit SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 3,
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .cniface.SearchResult results = 3;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::cniface::SearchResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::SearchResult >*
      mutable_results();
  private:
  const ::cniface::SearchResult& _internal_results(int index) const;
  ::cniface::SearchResult* _internal_add_results();
  public:
  const ::cniface::SearchResult& results(int index) const;
  ::cniface::SearchResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::SearchResult >&
      results() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 code = 1;
  void clear_code();
  int64_t code() const;
  void set_code(int64_t value);
  private:
  int64_t _internal_code() const;
  void _internal_set_code(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:cniface.SearchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::SearchResult > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int64_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Repository

// string name = 1;
inline void Repository::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Repository::name() const {
  // @@protoc_insertion_point(field_get:cniface.Repository.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Repository::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.Repository.name)
}
inline std::string* Repository::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cniface.Repository.name)
  return _s;
}
inline const std::string& Repository::_internal_name() const {
  return name_.Get();
}
inline void Repository::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Repository::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Repository::release_name() {
  // @@protoc_insertion_point(field_release:cniface.Repository.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Repository::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.Repository.name)
}

// int64 size = 2;
inline void Repository::clear_size() {
  size_ = int64_t{0};
}
inline int64_t Repository::_internal_size() const {
  return size_;
}
inline int64_t Repository::size() const {
  // @@protoc_insertion_point(field_get:cniface.Repository.size)
  return _internal_size();
}
inline void Repository::_internal_set_size(int64_t value) {
  
  size_ = value;
}
inline void Repository::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:cniface.Repository.size)
}

// -------------------------------------------------------------------

// ListRepositoryResponse

// int64 code = 1;
inline void ListRepositoryResponse::clear_code() {
  code_ = int64_t{0};
}
inline int64_t ListRepositoryResponse::_internal_code() const {
  return code_;
}
inline int64_t ListRepositoryResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.ListRepositoryResponse.code)
  return _internal_code();
}
inline void ListRepositoryResponse::_internal_set_code(int64_t value) {
  
  code_ = value;
}
inline void ListRepositoryResponse::set_code(int64_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.ListRepositoryResponse.code)
}

// string message = 2;
inline void ListRepositoryResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ListRepositoryResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.ListRepositoryResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRepositoryResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.ListRepositoryResponse.message)
}
inline std::string* ListRepositoryResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.ListRepositoryResponse.message)
  return _s;
}
inline const std::string& ListRepositoryResponse::_internal_message() const {
  return message_.Get();
}
inline void ListRepositoryResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListRepositoryResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListRepositoryResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.ListRepositoryResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListRepositoryResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.ListRepositoryResponse.message)
}

// repeated .cniface.Repository repositories = 3;
inline int ListRepositoryResponse::_internal_repositories_size() const {
  return repositories_.size();
}
inline int ListRepositoryResponse::repositories_size() const {
  return _internal_repositories_size();
}
inline void ListRepositoryResponse::clear_repositories() {
  repositories_.Clear();
}
inline ::cniface::Repository* ListRepositoryResponse::mutable_repositories(int index) {
  // @@protoc_insertion_point(field_mutable:cniface.ListRepositoryResponse.repositories)
  return repositories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::Repository >*
ListRepositoryResponse::mutable_repositories() {
  // @@protoc_insertion_point(field_mutable_list:cniface.ListRepositoryResponse.repositories)
  return &repositories_;
}
inline const ::cniface::Repository& ListRepositoryResponse::_internal_repositories(int index) const {
  return repositories_.Get(index);
}
inline const ::cniface::Repository& ListRepositoryResponse::repositories(int index) const {
  // @@protoc_insertion_point(field_get:cniface.ListRepositoryResponse.repositories)
  return _internal_repositories(index);
}
inline ::cniface::Repository* ListRepositoryResponse::_internal_add_repositories() {
  return repositories_.Add();
}
inline ::cniface::Repository* ListRepositoryResponse::add_repositories() {
  ::cniface::Repository* _add = _internal_add_repositories();
  // @@protoc_insertion_point(field_add:cniface.ListRepositoryResponse.repositories)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::Repository >&
ListRepositoryResponse::repositories() const {
  // @@protoc_insertion_point(field_list:cniface.ListRepositoryResponse.repositories)
  return repositories_;
}

// -------------------------------------------------------------------

// deleteFeatureRequest

// string repoName = 1;
inline void deleteFeatureRequest::clear_reponame() {
  reponame_.ClearToEmpty();
}
inline const std::string& deleteFeatureRequest::reponame() const {
  // @@protoc_insertion_point(field_get:cniface.deleteFeatureRequest.repoName)
  return _internal_reponame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void deleteFeatureRequest::set_reponame(ArgT0&& arg0, ArgT... args) {
 
 reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.deleteFeatureRequest.repoName)
}
inline std::string* deleteFeatureRequest::mutable_reponame() {
  std::string* _s = _internal_mutable_reponame();
  // @@protoc_insertion_point(field_mutable:cniface.deleteFeatureRequest.repoName)
  return _s;
}
inline const std::string& deleteFeatureRequest::_internal_reponame() const {
  return reponame_.Get();
}
inline void deleteFeatureRequest::_internal_set_reponame(const std::string& value) {
  
  reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* deleteFeatureRequest::_internal_mutable_reponame() {
  
  return reponame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* deleteFeatureRequest::release_reponame() {
  // @@protoc_insertion_point(field_release:cniface.deleteFeatureRequest.repoName)
  return reponame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void deleteFeatureRequest::set_allocated_reponame(std::string* reponame) {
  if (reponame != nullptr) {
    
  } else {
    
  }
  reponame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reponame,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reponame_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reponame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.deleteFeatureRequest.repoName)
}

// int64 featureId = 2;
inline void deleteFeatureRequest::clear_featureid() {
  featureid_ = int64_t{0};
}
inline int64_t deleteFeatureRequest::_internal_featureid() const {
  return featureid_;
}
inline int64_t deleteFeatureRequest::featureid() const {
  // @@protoc_insertion_point(field_get:cniface.deleteFeatureRequest.featureId)
  return _internal_featureid();
}
inline void deleteFeatureRequest::_internal_set_featureid(int64_t value) {
  
  featureid_ = value;
}
inline void deleteFeatureRequest::set_featureid(int64_t value) {
  _internal_set_featureid(value);
  // @@protoc_insertion_point(field_set:cniface.deleteFeatureRequest.featureId)
}

// -------------------------------------------------------------------

// deleteFeatureResponse

// int64 code = 1;
inline void deleteFeatureResponse::clear_code() {
  code_ = int64_t{0};
}
inline int64_t deleteFeatureResponse::_internal_code() const {
  return code_;
}
inline int64_t deleteFeatureResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.deleteFeatureResponse.code)
  return _internal_code();
}
inline void deleteFeatureResponse::_internal_set_code(int64_t value) {
  
  code_ = value;
}
inline void deleteFeatureResponse::set_code(int64_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.deleteFeatureResponse.code)
}

// string message = 2;
inline void deleteFeatureResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& deleteFeatureResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.deleteFeatureResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void deleteFeatureResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.deleteFeatureResponse.message)
}
inline std::string* deleteFeatureResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.deleteFeatureResponse.message)
  return _s;
}
inline const std::string& deleteFeatureResponse::_internal_message() const {
  return message_.Get();
}
inline void deleteFeatureResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* deleteFeatureResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* deleteFeatureResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.deleteFeatureResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void deleteFeatureResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.deleteFeatureResponse.message)
}

// -------------------------------------------------------------------

// AddFeatureRequest

// string repoName = 1;
inline void AddFeatureRequest::clear_reponame() {
  reponame_.ClearToEmpty();
}
inline const std::string& AddFeatureRequest::reponame() const {
  // @@protoc_insertion_point(field_get:cniface.AddFeatureRequest.repoName)
  return _internal_reponame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddFeatureRequest::set_reponame(ArgT0&& arg0, ArgT... args) {
 
 reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.AddFeatureRequest.repoName)
}
inline std::string* AddFeatureRequest::mutable_reponame() {
  std::string* _s = _internal_mutable_reponame();
  // @@protoc_insertion_point(field_mutable:cniface.AddFeatureRequest.repoName)
  return _s;
}
inline const std::string& AddFeatureRequest::_internal_reponame() const {
  return reponame_.Get();
}
inline void AddFeatureRequest::_internal_set_reponame(const std::string& value) {
  
  reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddFeatureRequest::_internal_mutable_reponame() {
  
  return reponame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddFeatureRequest::release_reponame() {
  // @@protoc_insertion_point(field_release:cniface.AddFeatureRequest.repoName)
  return reponame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddFeatureRequest::set_allocated_reponame(std::string* reponame) {
  if (reponame != nullptr) {
    
  } else {
    
  }
  reponame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reponame,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reponame_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reponame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.AddFeatureRequest.repoName)
}

// int64 featureId = 2;
inline void AddFeatureRequest::clear_featureid() {
  featureid_ = int64_t{0};
}
inline int64_t AddFeatureRequest::_internal_featureid() const {
  return featureid_;
}
inline int64_t AddFeatureRequest::featureid() const {
  // @@protoc_insertion_point(field_get:cniface.AddFeatureRequest.featureId)
  return _internal_featureid();
}
inline void AddFeatureRequest::_internal_set_featureid(int64_t value) {
  
  featureid_ = value;
}
inline void AddFeatureRequest::set_featureid(int64_t value) {
  _internal_set_featureid(value);
  // @@protoc_insertion_point(field_set:cniface.AddFeatureRequest.featureId)
}

// string featureBase64 = 3;
inline void AddFeatureRequest::clear_featurebase64() {
  featurebase64_.ClearToEmpty();
}
inline const std::string& AddFeatureRequest::featurebase64() const {
  // @@protoc_insertion_point(field_get:cniface.AddFeatureRequest.featureBase64)
  return _internal_featurebase64();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddFeatureRequest::set_featurebase64(ArgT0&& arg0, ArgT... args) {
 
 featurebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.AddFeatureRequest.featureBase64)
}
inline std::string* AddFeatureRequest::mutable_featurebase64() {
  std::string* _s = _internal_mutable_featurebase64();
  // @@protoc_insertion_point(field_mutable:cniface.AddFeatureRequest.featureBase64)
  return _s;
}
inline const std::string& AddFeatureRequest::_internal_featurebase64() const {
  return featurebase64_.Get();
}
inline void AddFeatureRequest::_internal_set_featurebase64(const std::string& value) {
  
  featurebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddFeatureRequest::_internal_mutable_featurebase64() {
  
  return featurebase64_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddFeatureRequest::release_featurebase64() {
  // @@protoc_insertion_point(field_release:cniface.AddFeatureRequest.featureBase64)
  return featurebase64_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddFeatureRequest::set_allocated_featurebase64(std::string* featurebase64) {
  if (featurebase64 != nullptr) {
    
  } else {
    
  }
  featurebase64_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), featurebase64,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (featurebase64_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    featurebase64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.AddFeatureRequest.featureBase64)
}

// -------------------------------------------------------------------

// AddFeatureResponse

// int64 code = 1;
inline void AddFeatureResponse::clear_code() {
  code_ = int64_t{0};
}
inline int64_t AddFeatureResponse::_internal_code() const {
  return code_;
}
inline int64_t AddFeatureResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.AddFeatureResponse.code)
  return _internal_code();
}
inline void AddFeatureResponse::_internal_set_code(int64_t value) {
  
  code_ = value;
}
inline void AddFeatureResponse::set_code(int64_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.AddFeatureResponse.code)
}

// string message = 2;
inline void AddFeatureResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& AddFeatureResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.AddFeatureResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddFeatureResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.AddFeatureResponse.message)
}
inline std::string* AddFeatureResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.AddFeatureResponse.message)
  return _s;
}
inline const std::string& AddFeatureResponse::_internal_message() const {
  return message_.Get();
}
inline void AddFeatureResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddFeatureResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddFeatureResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.AddFeatureResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddFeatureResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.AddFeatureResponse.message)
}

// -------------------------------------------------------------------

// DeleteRepoRequest

// string repoName = 1;
inline void DeleteRepoRequest::clear_reponame() {
  reponame_.ClearToEmpty();
}
inline const std::string& DeleteRepoRequest::reponame() const {
  // @@protoc_insertion_point(field_get:cniface.DeleteRepoRequest.repoName)
  return _internal_reponame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRepoRequest::set_reponame(ArgT0&& arg0, ArgT... args) {
 
 reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.DeleteRepoRequest.repoName)
}
inline std::string* DeleteRepoRequest::mutable_reponame() {
  std::string* _s = _internal_mutable_reponame();
  // @@protoc_insertion_point(field_mutable:cniface.DeleteRepoRequest.repoName)
  return _s;
}
inline const std::string& DeleteRepoRequest::_internal_reponame() const {
  return reponame_.Get();
}
inline void DeleteRepoRequest::_internal_set_reponame(const std::string& value) {
  
  reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRepoRequest::_internal_mutable_reponame() {
  
  return reponame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRepoRequest::release_reponame() {
  // @@protoc_insertion_point(field_release:cniface.DeleteRepoRequest.repoName)
  return reponame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRepoRequest::set_allocated_reponame(std::string* reponame) {
  if (reponame != nullptr) {
    
  } else {
    
  }
  reponame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reponame,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reponame_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reponame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.DeleteRepoRequest.repoName)
}

// -------------------------------------------------------------------

// DeleteRepoResponse

// int64 code = 1;
inline void DeleteRepoResponse::clear_code() {
  code_ = int64_t{0};
}
inline int64_t DeleteRepoResponse::_internal_code() const {
  return code_;
}
inline int64_t DeleteRepoResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.DeleteRepoResponse.code)
  return _internal_code();
}
inline void DeleteRepoResponse::_internal_set_code(int64_t value) {
  
  code_ = value;
}
inline void DeleteRepoResponse::set_code(int64_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.DeleteRepoResponse.code)
}

// string message = 2;
inline void DeleteRepoResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& DeleteRepoResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.DeleteRepoResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRepoResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.DeleteRepoResponse.message)
}
inline std::string* DeleteRepoResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.DeleteRepoResponse.message)
  return _s;
}
inline const std::string& DeleteRepoResponse::_internal_message() const {
  return message_.Get();
}
inline void DeleteRepoResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRepoResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRepoResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.DeleteRepoResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRepoResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.DeleteRepoResponse.message)
}

// -------------------------------------------------------------------

// AddRepoRequest

// string repoName = 1;
inline void AddRepoRequest::clear_reponame() {
  reponame_.ClearToEmpty();
}
inline const std::string& AddRepoRequest::reponame() const {
  // @@protoc_insertion_point(field_get:cniface.AddRepoRequest.repoName)
  return _internal_reponame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRepoRequest::set_reponame(ArgT0&& arg0, ArgT... args) {
 
 reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.AddRepoRequest.repoName)
}
inline std::string* AddRepoRequest::mutable_reponame() {
  std::string* _s = _internal_mutable_reponame();
  // @@protoc_insertion_point(field_mutable:cniface.AddRepoRequest.repoName)
  return _s;
}
inline const std::string& AddRepoRequest::_internal_reponame() const {
  return reponame_.Get();
}
inline void AddRepoRequest::_internal_set_reponame(const std::string& value) {
  
  reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddRepoRequest::_internal_mutable_reponame() {
  
  return reponame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddRepoRequest::release_reponame() {
  // @@protoc_insertion_point(field_release:cniface.AddRepoRequest.repoName)
  return reponame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddRepoRequest::set_allocated_reponame(std::string* reponame) {
  if (reponame != nullptr) {
    
  } else {
    
  }
  reponame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reponame,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reponame_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reponame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.AddRepoRequest.repoName)
}

// -------------------------------------------------------------------

// AddRepoResponse

// int64 code = 1;
inline void AddRepoResponse::clear_code() {
  code_ = int64_t{0};
}
inline int64_t AddRepoResponse::_internal_code() const {
  return code_;
}
inline int64_t AddRepoResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.AddRepoResponse.code)
  return _internal_code();
}
inline void AddRepoResponse::_internal_set_code(int64_t value) {
  
  code_ = value;
}
inline void AddRepoResponse::set_code(int64_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.AddRepoResponse.code)
}

// string message = 2;
inline void AddRepoResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& AddRepoResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.AddRepoResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddRepoResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.AddRepoResponse.message)
}
inline std::string* AddRepoResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.AddRepoResponse.message)
  return _s;
}
inline const std::string& AddRepoResponse::_internal_message() const {
  return message_.Get();
}
inline void AddRepoResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddRepoResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddRepoResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.AddRepoResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddRepoResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.AddRepoResponse.message)
}

// -------------------------------------------------------------------

// RepositoryRequest

// string repoName = 1;
inline void RepositoryRequest::clear_reponame() {
  reponame_.ClearToEmpty();
}
inline const std::string& RepositoryRequest::reponame() const {
  // @@protoc_insertion_point(field_get:cniface.RepositoryRequest.repoName)
  return _internal_reponame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RepositoryRequest::set_reponame(ArgT0&& arg0, ArgT... args) {
 
 reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.RepositoryRequest.repoName)
}
inline std::string* RepositoryRequest::mutable_reponame() {
  std::string* _s = _internal_mutable_reponame();
  // @@protoc_insertion_point(field_mutable:cniface.RepositoryRequest.repoName)
  return _s;
}
inline const std::string& RepositoryRequest::_internal_reponame() const {
  return reponame_.Get();
}
inline void RepositoryRequest::_internal_set_reponame(const std::string& value) {
  
  reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RepositoryRequest::_internal_mutable_reponame() {
  
  return reponame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RepositoryRequest::release_reponame() {
  // @@protoc_insertion_point(field_release:cniface.RepositoryRequest.repoName)
  return reponame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RepositoryRequest::set_allocated_reponame(std::string* reponame) {
  if (reponame != nullptr) {
    
  } else {
    
  }
  reponame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reponame,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reponame_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reponame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.RepositoryRequest.repoName)
}

// -------------------------------------------------------------------

// SearchResult

// int64 featureId = 1;
inline void SearchResult::clear_featureid() {
  featureid_ = int64_t{0};
}
inline int64_t SearchResult::_internal_featureid() const {
  return featureid_;
}
inline int64_t SearchResult::featureid() const {
  // @@protoc_insertion_point(field_get:cniface.SearchResult.featureId)
  return _internal_featureid();
}
inline void SearchResult::_internal_set_featureid(int64_t value) {
  
  featureid_ = value;
}
inline void SearchResult::set_featureid(int64_t value) {
  _internal_set_featureid(value);
  // @@protoc_insertion_point(field_set:cniface.SearchResult.featureId)
}

// float distance = 2;
inline void SearchResult::clear_distance() {
  distance_ = 0;
}
inline float SearchResult::_internal_distance() const {
  return distance_;
}
inline float SearchResult::distance() const {
  // @@protoc_insertion_point(field_get:cniface.SearchResult.distance)
  return _internal_distance();
}
inline void SearchResult::_internal_set_distance(float value) {
  
  distance_ = value;
}
inline void SearchResult::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:cniface.SearchResult.distance)
}

// -------------------------------------------------------------------

// SearchRequest

// string repoName = 1;
inline void SearchRequest::clear_reponame() {
  reponame_.ClearToEmpty();
}
inline const std::string& SearchRequest::reponame() const {
  // @@protoc_insertion_point(field_get:cniface.SearchRequest.repoName)
  return _internal_reponame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_reponame(ArgT0&& arg0, ArgT... args) {
 
 reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.SearchRequest.repoName)
}
inline std::string* SearchRequest::mutable_reponame() {
  std::string* _s = _internal_mutable_reponame();
  // @@protoc_insertion_point(field_mutable:cniface.SearchRequest.repoName)
  return _s;
}
inline const std::string& SearchRequest::_internal_reponame() const {
  return reponame_.Get();
}
inline void SearchRequest::_internal_set_reponame(const std::string& value) {
  
  reponame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_reponame() {
  
  return reponame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequest::release_reponame() {
  // @@protoc_insertion_point(field_release:cniface.SearchRequest.repoName)
  return reponame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchRequest::set_allocated_reponame(std::string* reponame) {
  if (reponame != nullptr) {
    
  } else {
    
  }
  reponame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reponame,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reponame_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reponame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.SearchRequest.repoName)
}

// string featureBase64 = 2;
inline void SearchRequest::clear_featurebase64() {
  featurebase64_.ClearToEmpty();
}
inline const std::string& SearchRequest::featurebase64() const {
  // @@protoc_insertion_point(field_get:cniface.SearchRequest.featureBase64)
  return _internal_featurebase64();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_featurebase64(ArgT0&& arg0, ArgT... args) {
 
 featurebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.SearchRequest.featureBase64)
}
inline std::string* SearchRequest::mutable_featurebase64() {
  std::string* _s = _internal_mutable_featurebase64();
  // @@protoc_insertion_point(field_mutable:cniface.SearchRequest.featureBase64)
  return _s;
}
inline const std::string& SearchRequest::_internal_featurebase64() const {
  return featurebase64_.Get();
}
inline void SearchRequest::_internal_set_featurebase64(const std::string& value) {
  
  featurebase64_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_featurebase64() {
  
  return featurebase64_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchRequest::release_featurebase64() {
  // @@protoc_insertion_point(field_release:cniface.SearchRequest.featureBase64)
  return featurebase64_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchRequest::set_allocated_featurebase64(std::string* featurebase64) {
  if (featurebase64 != nullptr) {
    
  } else {
    
  }
  featurebase64_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), featurebase64,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (featurebase64_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    featurebase64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.SearchRequest.featureBase64)
}

// int64 topk = 3;
inline void SearchRequest::clear_topk() {
  topk_ = int64_t{0};
}
inline int64_t SearchRequest::_internal_topk() const {
  return topk_;
}
inline int64_t SearchRequest::topk() const {
  // @@protoc_insertion_point(field_get:cniface.SearchRequest.topk)
  return _internal_topk();
}
inline void SearchRequest::_internal_set_topk(int64_t value) {
  
  topk_ = value;
}
inline void SearchRequest::set_topk(int64_t value) {
  _internal_set_topk(value);
  // @@protoc_insertion_point(field_set:cniface.SearchRequest.topk)
}

// -------------------------------------------------------------------

// SearchResponse

// int64 code = 1;
inline void SearchResponse::clear_code() {
  code_ = int64_t{0};
}
inline int64_t SearchResponse::_internal_code() const {
  return code_;
}
inline int64_t SearchResponse::code() const {
  // @@protoc_insertion_point(field_get:cniface.SearchResponse.code)
  return _internal_code();
}
inline void SearchResponse::_internal_set_code(int64_t value) {
  
  code_ = value;
}
inline void SearchResponse::set_code(int64_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cniface.SearchResponse.code)
}

// string message = 2;
inline void SearchResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& SearchResponse::message() const {
  // @@protoc_insertion_point(field_get:cniface.SearchResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cniface.SearchResponse.message)
}
inline std::string* SearchResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cniface.SearchResponse.message)
  return _s;
}
inline const std::string& SearchResponse::_internal_message() const {
  return message_.Get();
}
inline void SearchResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SearchResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SearchResponse::release_message() {
  // @@protoc_insertion_point(field_release:cniface.SearchResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SearchResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cniface.SearchResponse.message)
}

// repeated .cniface.SearchResult results = 3;
inline int SearchResponse::_internal_results_size() const {
  return results_.size();
}
inline int SearchResponse::results_size() const {
  return _internal_results_size();
}
inline void SearchResponse::clear_results() {
  results_.Clear();
}
inline ::cniface::SearchResult* SearchResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:cniface.SearchResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::SearchResult >*
SearchResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:cniface.SearchResponse.results)
  return &results_;
}
inline const ::cniface::SearchResult& SearchResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::cniface::SearchResult& SearchResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:cniface.SearchResponse.results)
  return _internal_results(index);
}
inline ::cniface::SearchResult* SearchResponse::_internal_add_results() {
  return results_.Add();
}
inline ::cniface::SearchResult* SearchResponse::add_results() {
  ::cniface::SearchResult* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:cniface.SearchResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cniface::SearchResult >&
SearchResponse::results() const {
  // @@protoc_insertion_point(field_list:cniface.SearchResponse.results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cniface

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_repository_2eproto
